
bmp_temp_monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080083b8  080083b8  000093b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008824  08008824  00009824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008828  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001d4  080089fc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  080089fc  0000a5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012750  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266d  00000000  00000000  0001c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c24  00000000  00000000  0001ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa3a  00000000  00000000  00020b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001433d  00000000  00000000  000405c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c476a  00000000  00000000  00054903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011906d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  001190b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080083a0 	.word	0x080083a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080083a0 	.word	0x080083a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9b5 	b.w	8000f84 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	715a      	strb	r2, [r3, #5]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	8af9      	ldrh	r1, [r7, #22]
 8000fe0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f001 ff55 	bl	8002ea0 <HAL_I2C_Mem_Read>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10b      	bne.n	8001014 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	801a      	strh	r2, [r3, #0]
		return true;
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <read_register16+0x56>
	} else
		return false;
 8001014:	2300      	movs	r3, #0

}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800101e:	b590      	push	{r4, r7, lr}
 8001020:	b08b      	sub	sp, #44	@ 0x2c
 8001022:	af04      	add	r7, sp, #16
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	72fb      	strb	r3, [r7, #11]
 800102e:	4613      	mov	r3, r2
 8001030:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	b29a      	uxth	r2, r3
 8001042:	7abb      	ldrb	r3, [r7, #10]
 8001044:	b29b      	uxth	r3, r3
 8001046:	8af9      	ldrh	r1, [r7, #22]
 8001048:	f241 3488 	movw	r4, #5000	@ 0x1388
 800104c:	9402      	str	r4, [sp, #8]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	f001 ff23 	bl	8002ea0 <HAL_I2C_Mem_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <read_data+0x46>
		return 0;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <read_data+0x48>
	else
		return 1;
 8001064:	2301      	movs	r3, #1

}
 8001066:	4618      	mov	r0, r3
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}

0800106e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	461a      	mov	r2, r3
 800107a:	2188      	movs	r1, #136	@ 0x88
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff9f 	bl	8000fc0 <read_register16>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d06f      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3302      	adds	r3, #2
 800108c:	461a      	mov	r2, r3
 800108e:	218a      	movs	r1, #138	@ 0x8a
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff95 	bl	8000fc0 <read_register16>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d065      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	461a      	mov	r2, r3
 80010a2:	218c      	movs	r1, #140	@ 0x8c
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff8b 	bl	8000fc0 <read_register16>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d05b      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3306      	adds	r3, #6
 80010b4:	461a      	mov	r2, r3
 80010b6:	218e      	movs	r1, #142	@ 0x8e
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff81 	bl	8000fc0 <read_register16>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d051      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3308      	adds	r3, #8
 80010c8:	461a      	mov	r2, r3
 80010ca:	2190      	movs	r1, #144	@ 0x90
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff77 	bl	8000fc0 <read_register16>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d047      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	330a      	adds	r3, #10
 80010dc:	461a      	mov	r2, r3
 80010de:	2192      	movs	r1, #146	@ 0x92
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff6d 	bl	8000fc0 <read_register16>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d03d      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	330c      	adds	r3, #12
 80010f0:	461a      	mov	r2, r3
 80010f2:	2194      	movs	r1, #148	@ 0x94
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff63 	bl	8000fc0 <read_register16>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d033      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	330e      	adds	r3, #14
 8001104:	461a      	mov	r2, r3
 8001106:	2196      	movs	r1, #150	@ 0x96
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff59 	bl	8000fc0 <read_register16>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d029      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3310      	adds	r3, #16
 8001118:	461a      	mov	r2, r3
 800111a:	2198      	movs	r1, #152	@ 0x98
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff4f 	bl	8000fc0 <read_register16>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01f      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3312      	adds	r3, #18
 800112c:	461a      	mov	r2, r3
 800112e:	219a      	movs	r1, #154	@ 0x9a
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff45 	bl	8000fc0 <read_register16>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d015      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3314      	adds	r3, #20
 8001140:	461a      	mov	r2, r3
 8001142:	219c      	movs	r1, #156	@ 0x9c
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff3b 	bl	8000fc0 <read_register16>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001154:	461a      	mov	r2, r3
 8001156:	219e      	movs	r1, #158	@ 0x9e
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff31 	bl	8000fc0 <read_register16>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <read_calibration_data+0xfa>

		return true;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <read_calibration_data+0xfc>
	}

	return false;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f103 0218 	add.w	r2, r3, #24
 8001180:	2301      	movs	r3, #1
 8001182:	21a1      	movs	r1, #161	@ 0xa1
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff4a 	bl	800101e <read_data>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d14b      	bne.n	8001228 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	331a      	adds	r3, #26
 8001194:	461a      	mov	r2, r3
 8001196:	21e1      	movs	r1, #225	@ 0xe1
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff11 	bl	8000fc0 <read_register16>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d041      	beq.n	8001228 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f103 021c 	add.w	r2, r3, #28
 80011aa:	2301      	movs	r3, #1
 80011ac:	21e3      	movs	r1, #227	@ 0xe3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff35 	bl	800101e <read_data>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d136      	bne.n	8001228 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011ba:	f107 030e 	add.w	r3, r7, #14
 80011be:	461a      	mov	r2, r3
 80011c0:	21e4      	movs	r1, #228	@ 0xe4
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fefc 	bl	8000fc0 <read_register16>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d02c      	beq.n	8001228 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	461a      	mov	r2, r3
 80011d4:	21e5      	movs	r1, #229	@ 0xe5
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fef2 	bl	8000fc0 <read_register16>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d022      	beq.n	8001228 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011e8:	2301      	movs	r3, #1
 80011ea:	21e7      	movs	r1, #231	@ 0xe7
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff16 	bl	800101e <read_data>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d117      	bne.n	8001228 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001202:	b21a      	sxth	r2, r3
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21a      	sxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001218:	89bb      	ldrh	r3, [r7, #12]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	b29b      	uxth	r3, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	841a      	strh	r2, [r3, #32]

		return true;
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001232:	b580      	push	{r7, lr}
 8001234:	b088      	sub	sp, #32
 8001236:	af04      	add	r7, sp, #16
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
 800123e:	4613      	mov	r3, r2
 8001240:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	b29a      	uxth	r2, r3
 8001252:	89f9      	ldrh	r1, [r7, #14]
 8001254:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	1cbb      	adds	r3, r7, #2
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	f001 fd08 	bl	8002c78 <HAL_I2C_Mem_Write>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <write_register8+0x40>
		return false;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <write_register8+0x42>
	else
		return true;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800128a:	2b76      	cmp	r3, #118	@ 0x76
 800128c:	d005      	beq.n	800129a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001292:	2b77      	cmp	r3, #119	@ 0x77
 8001294:	d001      	beq.n	800129a <bmp280_init+0x1e>

		return false;
 8001296:	2300      	movs	r3, #0
 8001298:	e099      	b.n	80013ce <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80012a0:	2301      	movs	r3, #1
 80012a2:	21d0      	movs	r1, #208	@ 0xd0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff feba 	bl	800101e <read_data>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <bmp280_init+0x38>
		return false;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e08c      	b.n	80013ce <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012ba:	2b58      	cmp	r3, #88	@ 0x58
 80012bc:	d006      	beq.n	80012cc <bmp280_init+0x50>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012c4:	2b60      	cmp	r3, #96	@ 0x60
 80012c6:	d001      	beq.n	80012cc <bmp280_init+0x50>

		return false;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e080      	b.n	80013ce <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012cc:	22b6      	movs	r2, #182	@ 0xb6
 80012ce:	21e0      	movs	r1, #224	@ 0xe0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffae 	bl	8001232 <write_register8>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <bmp280_init+0x64>
		return false;
 80012dc:	2300      	movs	r3, #0
 80012de:	e076      	b.n	80013ce <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	2301      	movs	r3, #1
 80012e6:	21f3      	movs	r1, #243	@ 0xf3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fe98 	bl	800101e <read_data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f5      	bne.n	80012e0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff feb5 	bl	800106e <read_calibration_data>
 8001304:	4603      	mov	r3, r0
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d100      	bne.n	8001312 <bmp280_init+0x96>
 8001310:	e001      	b.n	8001316 <bmp280_init+0x9a>
		return false;
 8001312:	2300      	movs	r3, #0
 8001314:	e05b      	b.n	80013ce <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800131c:	2b60      	cmp	r3, #96	@ 0x60
 800131e:	d10a      	bne.n	8001336 <bmp280_init+0xba>
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff26 	bl	8001172 <read_hum_calibration_data>
 8001326:	4603      	mov	r3, r0
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <bmp280_init+0xba>
		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e04b      	b.n	80013ce <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	b25a      	sxtb	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b25b      	sxtb	r3, r3
 800134a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	461a      	mov	r2, r3
 8001350:	21f5      	movs	r1, #245	@ 0xf5
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff6d 	bl	8001232 <write_register8>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <bmp280_init+0xe6>
		return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e035      	b.n	80013ce <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001376:	b25a      	sxtb	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25a      	sxtb	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800138e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001396:	2b60      	cmp	r3, #96	@ 0x60
 8001398:	d10d      	bne.n	80013b6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80013a0:	7b7b      	ldrb	r3, [r7, #13]
 80013a2:	461a      	mov	r2, r3
 80013a4:	21f2      	movs	r1, #242	@ 0xf2
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff43 	bl	8001232 <write_register8>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <bmp280_init+0x13a>
			return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e00b      	b.n	80013ce <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	461a      	mov	r2, r3
 80013ba:	21f4      	movs	r1, #244	@ 0xf4
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff38 	bl	8001232 <write_register8>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <bmp280_init+0x150>
		return false;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e000      	b.n	80013ce <bmp280_init+0x152>
	}

	return true;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013d6:	b480      	push	{r7}
 80013d8:	b087      	sub	sp, #28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	10da      	asrs	r2, r3, #3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013f8:	12db      	asrs	r3, r3, #11
 80013fa:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	111b      	asrs	r3, r3, #4
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	8812      	ldrh	r2, [r2, #0]
 8001404:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	1112      	asrs	r2, r2, #4
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	8809      	ldrh	r1, [r1, #0]
 800140e:	1a52      	subs	r2, r2, r1
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800141c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001420:	139b      	asrs	r3, r3, #14
 8001422:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	441a      	add	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3380      	adds	r3, #128	@ 0x80
 800143a:	121b      	asrs	r3, r3, #8
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800144c:	b0cc      	sub	sp, #304	@ 0x130
 800144e:	af00      	add	r7, sp, #0
 8001450:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001454:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001458:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800145c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001460:	17da      	asrs	r2, r3, #31
 8001462:	461c      	mov	r4, r3
 8001464:	4615      	mov	r5, r2
 8001466:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800146a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800146e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001472:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800147a:	fb03 f102 	mul.w	r1, r3, r2
 800147e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	18ca      	adds	r2, r1, r3
 800148c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001490:	fba3 8903 	umull	r8, r9, r3, r3
 8001494:	eb02 0309 	add.w	r3, r2, r9
 8001498:	4699      	mov	r9, r3
 800149a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800149e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	17da      	asrs	r2, r3, #31
 80014a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014aa:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014ae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014b2:	4603      	mov	r3, r0
 80014b4:	fb03 f209 	mul.w	r2, r3, r9
 80014b8:	460b      	mov	r3, r1
 80014ba:	fb08 f303 	mul.w	r3, r8, r3
 80014be:	4413      	add	r3, r2
 80014c0:	4602      	mov	r2, r0
 80014c2:	fba8 1202 	umull	r1, r2, r8, r2
 80014c6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014ca:	460a      	mov	r2, r1
 80014cc:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014d4:	4413      	add	r3, r2
 80014d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014da:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014de:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80014e2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014f6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80014fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014fe:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001502:	462a      	mov	r2, r5
 8001504:	fb02 f203 	mul.w	r2, r2, r3
 8001508:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800150c:	4621      	mov	r1, r4
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	441a      	add	r2, r3
 8001514:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001518:	4621      	mov	r1, r4
 800151a:	fba3 1301 	umull	r1, r3, r3, r1
 800151e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001522:	460b      	mov	r3, r1
 8001524:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800153e:	462b      	mov	r3, r5
 8001540:	0459      	lsls	r1, r3, #17
 8001542:	4623      	mov	r3, r4
 8001544:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001548:	4623      	mov	r3, r4
 800154a:	0458      	lsls	r0, r3, #17
 800154c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001550:	1814      	adds	r4, r2, r0
 8001552:	643c      	str	r4, [r7, #64]	@ 0x40
 8001554:	414b      	adcs	r3, r1
 8001556:	647b      	str	r3, [r7, #68]	@ 0x44
 8001558:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800155c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001564:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001568:	b21b      	sxth	r3, r3
 800156a:	17da      	asrs	r2, r3, #31
 800156c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001570:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001580:	00d9      	lsls	r1, r3, #3
 8001582:	2000      	movs	r0, #0
 8001584:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001588:	1814      	adds	r4, r2, r0
 800158a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800158c:	414b      	adcs	r3, r1
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001590:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001594:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001598:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800159c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015a0:	fb03 f102 	mul.w	r1, r3, r2
 80015a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	18ca      	adds	r2, r1, r3
 80015b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015b6:	fba3 1303 	umull	r1, r3, r3, r3
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015be:	460b      	mov	r3, r1
 80015c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015e2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015e6:	462b      	mov	r3, r5
 80015e8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015ec:	4642      	mov	r2, r8
 80015ee:	fb02 f203 	mul.w	r2, r2, r3
 80015f2:	464b      	mov	r3, r9
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	4622      	mov	r2, r4
 80015fe:	4641      	mov	r1, r8
 8001600:	fba2 1201 	umull	r1, r2, r2, r1
 8001604:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001608:	460a      	mov	r2, r1
 800160a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800160e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001612:	4413      	add	r3, r2
 8001614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001618:	f04f 0000 	mov.w	r0, #0
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001624:	4623      	mov	r3, r4
 8001626:	0a18      	lsrs	r0, r3, #8
 8001628:	462b      	mov	r3, r5
 800162a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800162e:	462b      	mov	r3, r5
 8001630:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001642:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800164a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800164e:	464a      	mov	r2, r9
 8001650:	fb02 f203 	mul.w	r2, r2, r3
 8001654:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001658:	4644      	mov	r4, r8
 800165a:	fb04 f303 	mul.w	r3, r4, r3
 800165e:	441a      	add	r2, r3
 8001660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001664:	4644      	mov	r4, r8
 8001666:	fba3 4304 	umull	r4, r3, r3, r4
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800166e:	4623      	mov	r3, r4
 8001670:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001674:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800168a:	464c      	mov	r4, r9
 800168c:	0323      	lsls	r3, r4, #12
 800168e:	4644      	mov	r4, r8
 8001690:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001694:	4644      	mov	r4, r8
 8001696:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001698:	1884      	adds	r4, r0, r2
 800169a:	633c      	str	r4, [r7, #48]	@ 0x30
 800169c:	eb41 0303 	adc.w	r3, r1, r3
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80016a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016a6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016aa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80016ae:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016b2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016be:	88db      	ldrh	r3, [r3, #6]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016d0:	462b      	mov	r3, r5
 80016d2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016d6:	4642      	mov	r2, r8
 80016d8:	fb02 f203 	mul.w	r2, r2, r3
 80016dc:	464b      	mov	r3, r9
 80016de:	4621      	mov	r1, r4
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	4622      	mov	r2, r4
 80016e8:	4641      	mov	r1, r8
 80016ea:	fba2 1201 	umull	r1, r2, r2, r1
 80016ee:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80016f2:	460a      	mov	r2, r1
 80016f4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80016f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016fc:	4413      	add	r3, r2
 80016fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800170e:	4629      	mov	r1, r5
 8001710:	104a      	asrs	r2, r1, #1
 8001712:	4629      	mov	r1, r5
 8001714:	17cb      	asrs	r3, r1, #31
 8001716:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800171a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800171e:	4313      	orrs	r3, r2
 8001720:	d101      	bne.n	8001726 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001722:	2300      	movs	r3, #0
 8001724:	e148      	b.n	80019b8 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001726:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800172a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800172e:	17da      	asrs	r2, r3, #31
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001734:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001738:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800173c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001740:	105b      	asrs	r3, r3, #1
 8001742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001746:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800174a:	07db      	lsls	r3, r3, #31
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001750:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001754:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001758:	4621      	mov	r1, r4
 800175a:	1a89      	subs	r1, r1, r2
 800175c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800175e:	4629      	mov	r1, r5
 8001760:	eb61 0303 	sbc.w	r3, r1, r3
 8001764:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001766:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800176a:	4622      	mov	r2, r4
 800176c:	462b      	mov	r3, r5
 800176e:	1891      	adds	r1, r2, r2
 8001770:	6239      	str	r1, [r7, #32]
 8001772:	415b      	adcs	r3, r3
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800177a:	4621      	mov	r1, r4
 800177c:	1851      	adds	r1, r2, r1
 800177e:	61b9      	str	r1, [r7, #24]
 8001780:	4629      	mov	r1, r5
 8001782:	414b      	adcs	r3, r1
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001792:	4649      	mov	r1, r9
 8001794:	018b      	lsls	r3, r1, #6
 8001796:	4641      	mov	r1, r8
 8001798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179c:	4641      	mov	r1, r8
 800179e:	018a      	lsls	r2, r1, #6
 80017a0:	4641      	mov	r1, r8
 80017a2:	1889      	adds	r1, r1, r2
 80017a4:	6139      	str	r1, [r7, #16]
 80017a6:	4649      	mov	r1, r9
 80017a8:	eb43 0101 	adc.w	r1, r3, r1
 80017ac:	6179      	str	r1, [r7, #20]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017ba:	4649      	mov	r1, r9
 80017bc:	008b      	lsls	r3, r1, #2
 80017be:	4641      	mov	r1, r8
 80017c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c4:	4641      	mov	r1, r8
 80017c6:	008a      	lsls	r2, r1, #2
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	4622      	mov	r2, r4
 80017d0:	189b      	adds	r3, r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	460b      	mov	r3, r1
 80017d6:	462a      	mov	r2, r5
 80017d8:	eb42 0303 	adc.w	r3, r2, r3
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017ea:	4649      	mov	r1, r9
 80017ec:	008b      	lsls	r3, r1, #2
 80017ee:	4641      	mov	r1, r8
 80017f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f4:	4641      	mov	r1, r8
 80017f6:	008a      	lsls	r2, r1, #2
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	4622      	mov	r2, r4
 8001800:	189b      	adds	r3, r3, r2
 8001802:	673b      	str	r3, [r7, #112]	@ 0x70
 8001804:	462b      	mov	r3, r5
 8001806:	460a      	mov	r2, r1
 8001808:	eb42 0303 	adc.w	r3, r2, r3
 800180c:	677b      	str	r3, [r7, #116]	@ 0x74
 800180e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001812:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001816:	f7ff f9ef 	bl	8000bf8 <__aeabi_ldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001826:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800182a:	b21b      	sxth	r3, r3
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001830:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001832:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0b50      	lsrs	r0, r2, #13
 8001840:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001844:	1359      	asrs	r1, r3, #13
 8001846:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800184a:	462b      	mov	r3, r5
 800184c:	fb00 f203 	mul.w	r2, r0, r3
 8001850:	4623      	mov	r3, r4
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	4413      	add	r3, r2
 8001858:	4622      	mov	r2, r4
 800185a:	fba2 1200 	umull	r1, r2, r2, r0
 800185e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001862:	460a      	mov	r2, r1
 8001864:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001868:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800186c:	4413      	add	r3, r2
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0b50      	lsrs	r0, r2, #13
 8001880:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001884:	1359      	asrs	r1, r3, #13
 8001886:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800188a:	462b      	mov	r3, r5
 800188c:	fb00 f203 	mul.w	r2, r0, r3
 8001890:	4623      	mov	r3, r4
 8001892:	fb03 f301 	mul.w	r3, r3, r1
 8001896:	4413      	add	r3, r2
 8001898:	4622      	mov	r2, r4
 800189a:	fba2 1200 	umull	r1, r2, r2, r0
 800189e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018a2:	460a      	mov	r2, r1
 80018a4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018ac:	4413      	add	r3, r2
 80018ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018be:	4621      	mov	r1, r4
 80018c0:	0e4a      	lsrs	r2, r1, #25
 80018c2:	4629      	mov	r1, r5
 80018c4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018c8:	4629      	mov	r1, r5
 80018ca:	164b      	asrs	r3, r1, #25
 80018cc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	17da      	asrs	r2, r3, #31
 80018dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80018de:	667a      	str	r2, [r7, #100]	@ 0x64
 80018e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018e8:	462a      	mov	r2, r5
 80018ea:	fb02 f203 	mul.w	r2, r2, r3
 80018ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018f2:	4621      	mov	r1, r4
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018fe:	4621      	mov	r1, r4
 8001900:	fba2 1201 	umull	r1, r2, r2, r1
 8001904:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001908:	460a      	mov	r2, r1
 800190a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800190e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001912:	4413      	add	r3, r2
 8001914:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001924:	4621      	mov	r1, r4
 8001926:	0cca      	lsrs	r2, r1, #19
 8001928:	4629      	mov	r1, r5
 800192a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800192e:	4629      	mov	r1, r5
 8001930:	14cb      	asrs	r3, r1, #19
 8001932:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001936:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800193a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800193e:	1884      	adds	r4, r0, r2
 8001940:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001942:	eb41 0303 	adc.w	r3, r1, r3
 8001946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001948:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800194c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001950:	4621      	mov	r1, r4
 8001952:	1889      	adds	r1, r1, r2
 8001954:	6539      	str	r1, [r7, #80]	@ 0x50
 8001956:	4629      	mov	r1, r5
 8001958:	eb43 0101 	adc.w	r1, r3, r1
 800195c:	6579      	str	r1, [r7, #84]	@ 0x54
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800196a:	4623      	mov	r3, r4
 800196c:	0a18      	lsrs	r0, r3, #8
 800196e:	462b      	mov	r3, r5
 8001970:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001974:	462b      	mov	r3, r5
 8001976:	1219      	asrs	r1, r3, #8
 8001978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800197c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001980:	b21b      	sxth	r3, r3
 8001982:	17da      	asrs	r2, r3, #31
 8001984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001986:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001994:	464c      	mov	r4, r9
 8001996:	0123      	lsls	r3, r4, #4
 8001998:	4644      	mov	r4, r8
 800199a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800199e:	4644      	mov	r4, r8
 80019a0:	0122      	lsls	r2, r4, #4
 80019a2:	1884      	adds	r4, r0, r2
 80019a4:	603c      	str	r4, [r7, #0]
 80019a6:	eb41 0303 	adc.w	r3, r1, r3
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80019b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019be:	46bd      	mov	sp, r7
 80019c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019c4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80019d6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	039a      	lsls	r2, r3, #14
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019e2:	051b      	lsls	r3, r3, #20
 80019e4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ec:	4619      	mov	r1, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019fa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001a02:	4611      	mov	r1, r2
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	fb01 f202 	mul.w	r2, r1, r2
 8001a0a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	7f09      	ldrb	r1, [r1, #28]
 8001a10:	4608      	mov	r0, r1
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	fb00 f101 	mul.w	r1, r0, r1
 8001a18:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a1a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a1e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a22:	1292      	asrs	r2, r2, #10
 8001a24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a2e:	fb01 f202 	mul.w	r2, r1, r2
 8001a32:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a36:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	13db      	asrs	r3, r3, #15
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	13d2      	asrs	r2, r2, #15
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	7e12      	ldrb	r2, [r2, #24]
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a6a:	bfa8      	it	ge
 8001a6c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001a70:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	131b      	asrs	r3, r3, #12
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b08c      	sub	sp, #48	@ 0x30
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a96:	2b60      	cmp	r3, #96	@ 0x60
 8001a98:	d007      	beq.n	8001aaa <bmp280_read_fixed+0x28>
		if (humidity)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <bmp280_read_fixed+0x32>
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	e000      	b.n	8001ab6 <bmp280_read_fixed+0x34>
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f107 0218 	add.w	r2, r7, #24
 8001ac0:	21f7      	movs	r1, #247	@ 0xf7
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff faab 	bl	800101e <read_data>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <bmp280_read_fixed+0x50>
		return false;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e038      	b.n	8001b44 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ad2:	7e3b      	ldrb	r3, [r7, #24]
 8001ad4:	031a      	lsls	r2, r3, #12
 8001ad6:	7e7b      	ldrb	r3, [r7, #25]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4313      	orrs	r3, r2
 8001adc:	7eba      	ldrb	r2, [r7, #26]
 8001ade:	0912      	lsrs	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ae6:	7efb      	ldrb	r3, [r7, #27]
 8001ae8:	031a      	lsls	r2, r3, #12
 8001aea:	7f3b      	ldrb	r3, [r7, #28]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4313      	orrs	r3, r2
 8001af0:	7f7a      	ldrb	r2, [r7, #29]
 8001af2:	0912      	lsrs	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	4313      	orrs	r3, r2
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff fc67 	bl	80013d6 <compensate_temperature>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	461a      	mov	r2, r3
 8001b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fc97 	bl	8001448 <compensate_pressure>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b26:	7fbb      	ldrb	r3, [r7, #30]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	7ffa      	ldrb	r2, [r7, #31]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	461a      	mov	r2, r3
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff ff44 	bl	80019c4 <compensate_humidity>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3730      	adds	r7, #48	@ 0x30
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <bmp280_read_float+0x1a>
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	e000      	b.n	8001b68 <bmp280_read_float+0x1c>
 8001b66:	2300      	movs	r3, #0
 8001b68:	f107 0218 	add.w	r2, r7, #24
 8001b6c:	f107 011c 	add.w	r1, r7, #28
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff ff86 	bl	8001a82 <bmp280_read_fixed>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d028      	beq.n	8001bce <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001bd8 <bmp280_read_float+0x8c>
 8001b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001bdc <bmp280_read_float+0x90>
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bbc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001be0 <bmp280_read_float+0x94>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <bmp280_read_float+0x84>
	}

	return false;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	43800000 	.word	0x43800000
 8001be0:	44800000 	.word	0x44800000

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bea:	f000 fc98 	bl	800251e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bee:	f000 f8e7 	bl	8001dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf2:	f000 f9fb 	bl	8001fec <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bf6:	f000 f96f 	bl	8001ed8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001bfa:	f000 f9ab 	bl	8001f54 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001bfe:	f000 f92b 	bl	8001e58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	bmp280_init_default_params(&bmp280.params);
 8001c02:	485e      	ldr	r0, [pc, #376]	@ (8001d7c <main+0x198>)
 8001c04:	f7ff f9c0 	bl	8000f88 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001c08:	4b5d      	ldr	r3, [pc, #372]	@ (8001d80 <main+0x19c>)
 8001c0a:	2276      	movs	r2, #118	@ 0x76
 8001c0c:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d80 <main+0x19c>)
 8001c10:	4a5c      	ldr	r2, [pc, #368]	@ (8001d84 <main+0x1a0>)
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001c14:	e013      	b.n	8001c3e <main+0x5a>
		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001c16:	495c      	ldr	r1, [pc, #368]	@ (8001d88 <main+0x1a4>)
 8001c18:	485c      	ldr	r0, [pc, #368]	@ (8001d8c <main+0x1a8>)
 8001c1a:	f004 fa95 	bl	8006148 <siprintf>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <main+0x1ac>)
 8001c24:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001c26:	4b5a      	ldr	r3, [pc, #360]	@ (8001d90 <main+0x1ac>)
 8001c28:	881a      	ldrh	r2, [r3, #0]
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	4957      	ldr	r1, [pc, #348]	@ (8001d8c <main+0x1a8>)
 8001c30:	4858      	ldr	r0, [pc, #352]	@ (8001d94 <main+0x1b0>)
 8001c32:	f002 fec2 	bl	80049ba <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001c36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c3a:	f000 fce1 	bl	8002600 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001c3e:	494f      	ldr	r1, [pc, #316]	@ (8001d7c <main+0x198>)
 8001c40:	484f      	ldr	r0, [pc, #316]	@ (8001d80 <main+0x19c>)
 8001c42:	f7ff fb1b 	bl	800127c <bmp280_init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e1      	bne.n	8001c16 <main+0x32>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001c52:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <main+0x19c>)
 8001c54:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c58:	2b60      	cmp	r3, #96	@ 0x60
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	71fb      	strb	r3, [r7, #7]
	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <main+0x88>
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <main+0x1b4>)
 8001c6a:	e000      	b.n	8001c6e <main+0x8a>
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d9c <main+0x1b8>)
 8001c6e:	461a      	mov	r2, r3
 8001c70:	494b      	ldr	r1, [pc, #300]	@ (8001da0 <main+0x1bc>)
 8001c72:	4846      	ldr	r0, [pc, #280]	@ (8001d8c <main+0x1a8>)
 8001c74:	f004 fa68 	bl	8006148 <siprintf>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <main+0x1ac>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001c80:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <main+0x1ac>)
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c88:	4940      	ldr	r1, [pc, #256]	@ (8001d8c <main+0x1a8>)
 8001c8a:	4842      	ldr	r0, [pc, #264]	@ (8001d94 <main+0x1b0>)
 8001c8c:	f002 fe95 	bl	80049ba <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8001c90:	2064      	movs	r0, #100	@ 0x64
 8001c92:	f000 fcb5 	bl	8002600 <HAL_Delay>
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001c96:	e013      	b.n	8001cc0 <main+0xdc>
	  			size = sprintf((char *)Data,
 8001c98:	4942      	ldr	r1, [pc, #264]	@ (8001da4 <main+0x1c0>)
 8001c9a:	483c      	ldr	r0, [pc, #240]	@ (8001d8c <main+0x1a8>)
 8001c9c:	f004 fa54 	bl	8006148 <siprintf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <main+0x1ac>)
 8001ca6:	801a      	strh	r2, [r3, #0]
	  					"Temperature/pressure reading failed\n");
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001ca8:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <main+0x1ac>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb0:	4936      	ldr	r1, [pc, #216]	@ (8001d8c <main+0x1a8>)
 8001cb2:	4838      	ldr	r0, [pc, #224]	@ (8001d94 <main+0x1b0>)
 8001cb4:	f002 fe81 	bl	80049ba <HAL_UART_Transmit>
	  			HAL_Delay(2000);
 8001cb8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cbc:	f000 fca0 	bl	8002600 <HAL_Delay>
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001cc0:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <main+0x1c4>)
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001dac <main+0x1c8>)
 8001cc4:	493a      	ldr	r1, [pc, #232]	@ (8001db0 <main+0x1cc>)
 8001cc6:	482e      	ldr	r0, [pc, #184]	@ (8001d80 <main+0x19c>)
 8001cc8:	f7ff ff40 	bl	8001b4c <bmp280_read_float>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1df      	bne.n	8001c98 <main+0xb4>
	  		}

	  		size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <main+0x1c8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc5b 	bl	8000598 <__aeabi_f2d>
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	460d      	mov	r5, r1
 8001ce6:	4b32      	ldr	r3, [pc, #200]	@ (8001db0 <main+0x1cc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc54 	bl	8000598 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	e9cd 2300 	strd	r2, r3, [sp]
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	492d      	ldr	r1, [pc, #180]	@ (8001db4 <main+0x1d0>)
 8001cfe:	4823      	ldr	r0, [pc, #140]	@ (8001d8c <main+0x1a8>)
 8001d00:	f004 fa22 	bl	8006148 <siprintf>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <main+0x1ac>)
 8001d0a:	801a      	strh	r2, [r3, #0]
	  				pressure, temperature);
	  		HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <main+0x1ac>)
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d14:	491d      	ldr	r1, [pc, #116]	@ (8001d8c <main+0x1a8>)
 8001d16:	481f      	ldr	r0, [pc, #124]	@ (8001d94 <main+0x1b0>)
 8001d18:	f002 fe4f 	bl	80049ba <HAL_UART_Transmit>
	  		if (bme280p) {
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d017      	beq.n	8001d52 <main+0x16e>
	  			size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <main+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc36 	bl	8000598 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4921      	ldr	r1, [pc, #132]	@ (8001db8 <main+0x1d4>)
 8001d32:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <main+0x1a8>)
 8001d34:	f004 fa08 	bl	8006148 <siprintf>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <main+0x1ac>)
 8001d3e:	801a      	strh	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <main+0x1ac>)
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d48:	4910      	ldr	r1, [pc, #64]	@ (8001d8c <main+0x1a8>)
 8001d4a:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <main+0x1b0>)
 8001d4c:	f002 fe35 	bl	80049ba <HAL_UART_Transmit>
 8001d50:	e00f      	b.n	8001d72 <main+0x18e>
	  		}

	  		else {
	  			size = sprintf((char *)Data, "\n");
 8001d52:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <main+0x1d8>)
 8001d54:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <main+0x1a8>)
 8001d56:	f004 f9f7 	bl	8006148 <siprintf>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <main+0x1ac>)
 8001d60:	801a      	strh	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <main+0x1ac>)
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <main+0x1a8>)
 8001d6c:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <main+0x1b0>)
 8001d6e:	f002 fe24 	bl	80049ba <HAL_UART_Transmit>
	  		}
	  		HAL_Delay(2000);
 8001d72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d76:	f000 fc43 	bl	8002600 <HAL_Delay>
	  HAL_Delay(100);
 8001d7a:	e789      	b.n	8001c90 <main+0xac>
 8001d7c:	2000021c 	.word	0x2000021c
 8001d80:	200001f0 	.word	0x200001f0
 8001d84:	20000334 	.word	0x20000334
 8001d88:	080083b8 	.word	0x080083b8
 8001d8c:	20000234 	.word	0x20000234
 8001d90:	20000230 	.word	0x20000230
 8001d94:	200003ec 	.word	0x200003ec
 8001d98:	080083d8 	.word	0x080083d8
 8001d9c:	080083e0 	.word	0x080083e0
 8001da0:	080083e8 	.word	0x080083e8
 8001da4:	080083fc 	.word	0x080083fc
 8001da8:	2000022c 	.word	0x2000022c
 8001dac:	20000224 	.word	0x20000224
 8001db0:	20000228 	.word	0x20000228
 8001db4:	08008424 	.word	0x08008424
 8001db8:	0800844c 	.word	0x0800844c
 8001dbc:	08008460 	.word	0x08008460

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b094      	sub	sp, #80	@ 0x50
 8001dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	f107 0318 	add.w	r3, r7, #24
 8001dca:	2238      	movs	r2, #56	@ 0x38
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fa1d 	bl	800620e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f001 fcd0 	bl	8003788 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df2:	2340      	movs	r3, #64	@ 0x40
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df6:	2302      	movs	r3, #2
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e02:	2355      	movs	r3, #85	@ 0x55
 8001e04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fd6a 	bl	80038f0 <HAL_RCC_OscConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e22:	f000 f92d 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e26:	230f      	movs	r3, #15
 8001e28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f868 	bl	8003f14 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e4a:	f000 f919 	bl	8002080 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	@ 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <MX_I2C1_Init+0x78>)
 8001e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e64:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <MX_I2C1_Init+0x7c>)
 8001e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e68:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001e94:	f000 fe54 	bl	8002b40 <HAL_I2C_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e9e:	f000 f8ef 	bl	8002080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001ea6:	f001 fbd7 	bl	8003658 <HAL_I2CEx_ConfigAnalogFilter>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001eb0:	f000 f8e6 	bl	8002080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <MX_I2C1_Init+0x74>)
 8001eb8:	f001 fc19 	bl	80036ee <HAL_I2CEx_ConfigDigitalFilter>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ec2:	f000 f8dd 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000334 	.word	0x20000334
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40b285c2 	.word	0x40b285c2

08001ed8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001ede:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <MX_SPI1_Init+0x78>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001ef2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f0e:	2228      	movs	r2, #40	@ 0x28
 8001f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f26:	2207      	movs	r2, #7
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f32:	2208      	movs	r2, #8
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_SPI1_Init+0x74>)
 8001f38:	f002 fc44 	bl	80047c4 <HAL_SPI_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f000 f89d 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000388 	.word	0x20000388
 8001f50:	40013000 	.word	0x40013000

08001f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f5a:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <MX_USART1_UART_Init+0x94>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9c:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001f9e:	f002 fcbc 	bl	800491a <HAL_UART_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fa8:	f000 f86a 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001fb0:	f003 fae6 	bl	8005580 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fba:	f000 f861 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001fc2:	f003 fb1b 	bl	80055fc <HAL_UARTEx_SetRxFifoThreshold>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fcc:	f000 f858 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_USART1_UART_Init+0x90>)
 8001fd2:	f003 fa9c 	bl	800550e <HAL_UARTEx_DisableFifoMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fdc:	f000 f850 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200003ec 	.word	0x200003ec
 8001fe8:	40013800 	.word	0x40013800

08001fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_GPIO_Init+0x8c>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4a16      	ldr	r2, [pc, #88]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_GPIO_Init+0x8c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2140      	movs	r1, #64	@ 0x40
 800204e:	480b      	ldr	r0, [pc, #44]	@ (800207c <MX_GPIO_Init+0x90>)
 8002050:	f000 fd5e 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002054:	2340      	movs	r3, #64	@ 0x40
 8002056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_GPIO_Init+0x90>)
 800206c:	f000 fbce 	bl	800280c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	48000400 	.word	0x48000400

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <Error_Handler+0x8>

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_MspInit+0x44>)
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	4a0e      	ldr	r2, [pc, #56]	@ (80020d0 <HAL_MspInit+0x44>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6613      	str	r3, [r2, #96]	@ 0x60
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_MspInit+0x44>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_MspInit+0x44>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <HAL_MspInit+0x44>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_MspInit+0x44>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020c2:	f001 fc05 	bl	80038d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09e      	sub	sp, #120	@ 0x78
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2250      	movs	r2, #80	@ 0x50
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 f88a 	bl	800620e <memset>
  if(hi2c->Instance==I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1f      	ldr	r2, [pc, #124]	@ (800217c <HAL_I2C_MspInit+0xa8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d136      	bne.n	8002172 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002104:	2340      	movs	r3, #64	@ 0x40
 8002106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4618      	mov	r0, r3
 8002112:	f002 f91b 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800211c:	f7ff ffb0 	bl	8002080 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002138:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800213c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213e:	2312      	movs	r3, #18
 8002140:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800214a:	2304      	movs	r3, #4
 800214c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002152:	4619      	mov	r1, r3
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <HAL_I2C_MspInit+0xb0>)
 8002156:	f000 fb59 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a08      	ldr	r2, [pc, #32]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 8002160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_I2C_MspInit+0xac>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002172:	bf00      	nop
 8002174:	3778      	adds	r7, #120	@ 0x78
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40005400 	.word	0x40005400
 8002180:	40021000 	.word	0x40021000
 8002184:	48000400 	.word	0x48000400

08002188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_SPI_MspInit+0x7c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d128      	bne.n	80021fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_SPI_MspInit+0x80>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021da:	23e0      	movs	r3, #224	@ 0xe0
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ea:	2305      	movs	r3, #5
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f000 fb08 	bl	800280c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013000 	.word	0x40013000
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09e      	sub	sp, #120	@ 0x78
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2250      	movs	r2, #80	@ 0x50
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f003 ffee 	bl	800620e <memset>
  if(huart->Instance==USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_UART_MspInit+0xa4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d135      	bne.n	80022a8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4618      	mov	r0, r3
 800224a:	f002 f87f 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002254:	f7ff ff14 	bl	8002080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002258:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 800225a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225c:	4a15      	ldr	r2, [pc, #84]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 800225e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002262:	6613      	str	r3, [r2, #96]	@ 0x60
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 8002266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002270:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_UART_MspInit+0xa8>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002288:	2330      	movs	r3, #48	@ 0x30
 800228a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002298:	2307      	movs	r3, #7
 800229a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <HAL_UART_MspInit+0xac>)
 80022a4:	f000 fab2 	bl	800280c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022a8:	bf00      	nop
 80022aa:	3778      	adds	r7, #120	@ 0x78
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	48000800 	.word	0x48000800

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <NMI_Handler+0x4>

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002312:	f000 f957 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_kill>:

int _kill(int pid, int sig)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002334:	f003 ffbe 	bl	80062b4 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	2216      	movs	r2, #22
 800233c:	601a      	str	r2, [r3, #0]
  return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_exit>:

void _exit (int status)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002352:	f04f 31ff 	mov.w	r1, #4294967295
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffe7 	bl	800232a <_kill>
  while (1) {}    /* Make sure we hang here */
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <_exit+0x12>

08002360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00a      	b.n	8002388 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002372:	f3af 8000 	nop.w
 8002376:	4601      	mov	r1, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf0      	blt.n	8002372 <_read+0x12>
  }

  return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e009      	b.n	80023c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	60ba      	str	r2, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbf1      	blt.n	80023ac <_write+0x12>
  }
  return len;
 80023c8:	687b      	ldr	r3, [r7, #4]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_close>:

int _close(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023fa:	605a      	str	r2, [r3, #4]
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_isatty>:

int _isatty(int file)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	@ (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f003 ff22 	bl	80062b4 <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2001c000 	.word	0x2001c000
 800249c:	00000400 	.word	0x00000400
 80024a0:	20000480 	.word	0x20000480
 80024a4:	200005d8 	.word	0x200005d8

080024a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <SystemInit+0x20>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	4a05      	ldr	r2, [pc, #20]	@ (80024c8 <SystemInit+0x20>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024cc:	480d      	ldr	r0, [pc, #52]	@ (8002504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d0:	f7ff ffea 	bl	80024a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	@ (8002508 <LoopForever+0x6>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	@ (800250c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <LoopForever+0xe>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002518 <LoopForever+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fa:	f003 fee1 	bl	80062c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fe:	f7ff fb71 	bl	8001be4 <main>

08002502 <LoopForever>:

LoopForever:
    b LoopForever
 8002502:	e7fe      	b.n	8002502 <LoopForever>
  ldr   r0, =_estack
 8002504:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002510:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8002514:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002518:	200005d4 	.word	0x200005d4

0800251c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_2_IRQHandler>

0800251e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 f93d 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252e:	200f      	movs	r0, #15
 8002530:	f000 f80e 	bl	8002550 <HAL_InitTick>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e001      	b.n	8002544 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002540:	f7ff fda4 	bl	800208c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002544:	79fb      	ldrb	r3, [r7, #7]

}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <HAL_InitTick+0x68>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_InitTick+0x6c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_InitTick+0x68>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f93a 	bl	80027f2 <HAL_SYSTICK_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10f      	bne.n	80025a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d809      	bhi.n	800259e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258a:	2200      	movs	r2, #0
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	f04f 30ff 	mov.w	r0, #4294967295
 8002592:	f000 f914 	bl	80027be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <HAL_InitTick+0x70>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e007      	b.n	80025ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e004      	b.n	80025ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_IncTick+0x20>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a03      	ldr	r2, [pc, #12]	@ (80025e0 <HAL_IncTick+0x1c>)
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000484 	.word	0x20000484
 80025e4:	20000008 	.word	0x20000008

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	@ (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000484 	.word	0x20000484

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d004      	beq.n	8002624 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_Delay+0x40>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002624:	bf00      	nop
 8002626:	f7ff ffdf 	bl	80025e8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d8f7      	bhi.n	8002626 <HAL_Delay+0x26>
  {
  }
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000008 	.word	0x20000008

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	@ (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	@ 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff47 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff5e 	bl	800268c <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff90 	bl	80026fc <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5f 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffb2 	bl	8002764 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800281a:	e15a      	b.n	8002ad2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 814c 	beq.w	8002acc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d005      	beq.n	800284c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002848:	2b02      	cmp	r3, #2
 800284a:	d130      	bne.n	80028ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002882:	2201      	movs	r2, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0201 	and.w	r2, r3, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d017      	beq.n	80028ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d123      	bne.n	800293e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a6 	beq.w	8002acc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <HAL_GPIO_Init+0x2e4>)
 8002982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002984:	4a5a      	ldr	r2, [pc, #360]	@ (8002af0 <HAL_GPIO_Init+0x2e4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6613      	str	r3, [r2, #96]	@ 0x60
 800298c:	4b58      	ldr	r3, [pc, #352]	@ (8002af0 <HAL_GPIO_Init+0x2e4>)
 800298e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002998:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_GPIO_Init+0x2e8>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029c2:	d01f      	beq.n	8002a04 <HAL_GPIO_Init+0x1f8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4c      	ldr	r2, [pc, #304]	@ (8002af8 <HAL_GPIO_Init+0x2ec>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d019      	beq.n	8002a00 <HAL_GPIO_Init+0x1f4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4b      	ldr	r2, [pc, #300]	@ (8002afc <HAL_GPIO_Init+0x2f0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_GPIO_Init+0x1f0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b00 <HAL_GPIO_Init+0x2f4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1ec>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a49      	ldr	r2, [pc, #292]	@ (8002b04 <HAL_GPIO_Init+0x2f8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1e8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a48      	ldr	r2, [pc, #288]	@ (8002b08 <HAL_GPIO_Init+0x2fc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029ec:	2305      	movs	r3, #5
 80029ee:	e00a      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 80029f0:	2306      	movs	r3, #6
 80029f2:	e008      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1fa>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	@ (8002af4 <HAL_GPIO_Init+0x2e8>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a24:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a48:	4a30      	ldr	r2, [pc, #192]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a72:	4a26      	ldr	r2, [pc, #152]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_GPIO_Init+0x300>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f ae9d 	bne.w	800281c <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	48001400 	.word	0x48001400
 8002b0c:	40010400 	.word	0x40010400

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e08d      	b.n	8002c6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fab4 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	@ 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d108      	bne.n	8002be2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	e007      	b.n	8002bf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69d9      	ldr	r1, [r3, #28]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	f040 80f9 	bne.w	8002e92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_I2C_Mem_Write+0x34>
 8002ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0ed      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2C_Mem_Write+0x4e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0e6      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cce:	f7ff fc8b 	bl	80025e8 <HAL_GetTick>
 8002cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fac3 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d1      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2221      	movs	r2, #33	@ 0x21
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d18:	88f8      	ldrh	r0, [r7, #6]
 8002d1a:	893a      	ldrh	r2, [r7, #8]
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4603      	mov	r3, r0
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f9d3 	bl	80030d4 <I2C_RequestMemoryWrite>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a9      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2bff      	cmp	r3, #255	@ 0xff
 8002d48:	d90e      	bls.n	8002d68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	22ff      	movs	r2, #255	@ 0xff
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	8979      	ldrh	r1, [r7, #10]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fc47 	bl	80035f4 <I2C_TransferConfig>
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fc36 	bl	80035f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fac6 	bl	800331e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e07b      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d034      	beq.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d130      	bne.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa3f 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04d      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2bff      	cmp	r3, #255	@ 0xff
 8002e00:	d90e      	bls.n	8002e20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22ff      	movs	r2, #255	@ 0xff
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fbeb 	bl	80035f4 <I2C_TransferConfig>
 8002e1e:	e00f      	b.n	8002e40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fbda 	bl	80035f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d19e      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 faac 	bl	80033ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01a      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_I2C_Mem_Write+0x224>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
  }
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	f040 80fd 	bne.w	80030c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x34>
 8002ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0f1      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_I2C_Mem_Read+0x4e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0ea      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ef6:	f7ff fb77 	bl	80025e8 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2319      	movs	r3, #25
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f9af 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0d5      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2222      	movs	r2, #34	@ 0x22
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2240      	movs	r2, #64	@ 0x40
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a3a      	ldr	r2, [r7, #32]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f40:	88f8      	ldrh	r0, [r7, #6]
 8002f42:	893a      	ldrh	r2, [r7, #8]
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	4603      	mov	r3, r0
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f913 	bl	800317c <I2C_RequestMemoryRead>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0ad      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2bff      	cmp	r3, #255	@ 0xff
 8002f70:	d90e      	bls.n	8002f90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	22ff      	movs	r2, #255	@ 0xff
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	4b52      	ldr	r3, [pc, #328]	@ (80030cc <HAL_I2C_Mem_Read+0x22c>)
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fb33 	bl	80035f4 <I2C_TransferConfig>
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <HAL_I2C_Mem_Read+0x22c>)
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb22 	bl	80035f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2104      	movs	r1, #4
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f956 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07c      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d034      	beq.n	8003070 <HAL_I2C_Mem_Read+0x1d0>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d130      	bne.n	8003070 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	@ 0x80
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f927 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e04d      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2bff      	cmp	r3, #255	@ 0xff
 8003030:	d90e      	bls.n	8003050 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	22ff      	movs	r2, #255	@ 0xff
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fad3 	bl	80035f4 <I2C_TransferConfig>
 800304e:	e00f      	b.n	8003070 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fac2 	bl	80035f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d19a      	bne.n	8002fb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f994 	bl	80033ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e01a      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2220      	movs	r2, #32
 8003094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_I2C_Mem_Read+0x230>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	80002400 	.word	0x80002400
 80030d0:	fe00e800 	.word	0xfe00e800

080030d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	817b      	strh	r3, [r7, #10]
 80030e6:	460b      	mov	r3, r1
 80030e8:	813b      	strh	r3, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	8979      	ldrh	r1, [r7, #10]
 80030f4:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <I2C_RequestMemoryWrite+0xa4>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fa79 	bl	80035f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f909 	bl	800331e <I2C_WaitOnTXISFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02c      	b.n	8003170 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
 8003126:	e015      	b.n	8003154 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8ef 	bl	800331e <I2C_WaitOnTXISFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e012      	b.n	8003170 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2200      	movs	r2, #0
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f884 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	80002000 	.word	0x80002000

0800317c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <I2C_RequestMemoryRead+0xa4>)
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2300      	movs	r3, #0
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa26 	bl	80035f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	69b9      	ldr	r1, [r7, #24]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f8b6 	bl	800331e <I2C_WaitOnTXISFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e02c      	b.n	8003216 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c2:	893b      	ldrh	r3, [r7, #8]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80031cc:	e015      	b.n	80031fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031ce:	893b      	ldrh	r3, [r7, #8]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f89c 	bl	800331e <I2C_WaitOnTXISFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e012      	b.n	8003216 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2200      	movs	r2, #0
 8003202:	2140      	movs	r1, #64	@ 0x40
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f831 	bl	800326c <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	80002000 	.word	0x80002000

08003224 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d103      	bne.n	8003242 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d007      	beq.n	8003260 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	619a      	str	r2, [r3, #24]
  }
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327c:	e03b      	b.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8d6 	bl	8003434 <I2C_IsErrorOccurred>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e041      	b.n	8003316 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d02d      	beq.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7ff f9a5 	bl	80025e8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d122      	bne.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d113      	bne.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	429a      	cmp	r2, r3
 8003312:	d0b4      	beq.n	800327e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800332a:	e033      	b.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f87f 	bl	8003434 <I2C_IsErrorOccurred>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e031      	b.n	80033a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d025      	beq.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003348:	f7ff f94e 	bl	80025e8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11a      	bne.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d013      	beq.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e007      	b.n	80033a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d1c4      	bne.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	e02f      	b.n	800341a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f838 	bl	8003434 <I2C_IsErrorOccurred>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e02d      	b.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7ff f90b 	bl	80025e8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11a      	bne.n	800341a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d013      	beq.n	800341a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f043 0220 	orr.w	r2, r3, #32
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e007      	b.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b20      	cmp	r3, #32
 8003426:	d1c8      	bne.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d068      	beq.n	8003532 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2210      	movs	r2, #16
 8003466:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003468:	e049      	b.n	80034fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d045      	beq.n	80034fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7ff f8b9 	bl	80025e8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_IsErrorOccurred+0x54>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13a      	bne.n	80034fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800349a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034aa:	d121      	bne.n	80034f0 <I2C_IsErrorOccurred+0xbc>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034b2:	d01d      	beq.n	80034f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d01a      	beq.n	80034f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034ca:	f7ff f88d 	bl	80025e8 <HAL_GetTick>
 80034ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d0:	e00e      	b.n	80034f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034d2:	f7ff f889 	bl	80025e8 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b19      	cmp	r3, #25
 80034de:	d907      	bls.n	80034f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f043 0320 	orr.w	r3, r3, #32
 80034e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034ee:	e006      	b.n	80034fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d1e9      	bne.n	80034d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b20      	cmp	r3, #32
 800350a:	d003      	beq.n	8003514 <I2C_IsErrorOccurred+0xe0>
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0aa      	beq.n	800346a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2220      	movs	r2, #32
 8003522:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f043 0304 	orr.w	r3, r3, #4
 800352a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f043 0308 	orr.w	r3, r3, #8
 800356c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01c      	beq.n	80035e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fe3b 	bl	8003224 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <I2C_IsErrorOccurred+0x1bc>)
 80035ba:	400b      	ands	r3, r1
 80035bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3728      	adds	r7, #40	@ 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	fe00e800 	.word	0xfe00e800

080035f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	817b      	strh	r3, [r7, #10]
 8003602:	4613      	mov	r3, r2
 8003604:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003606:	897b      	ldrh	r3, [r7, #10]
 8003608:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800360c:	7a7b      	ldrb	r3, [r7, #9]
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003614:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	4313      	orrs	r3, r2
 800361e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003622:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	0d5b      	lsrs	r3, r3, #21
 800362e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003632:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <I2C_TransferConfig+0x60>)
 8003634:	430b      	orrs	r3, r1
 8003636:	43db      	mvns	r3, r3
 8003638:	ea02 0103 	and.w	r1, r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	03ff63ff 	.word	0x03ff63ff

08003658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	d138      	bne.n	80036e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003678:	2302      	movs	r3, #2
 800367a:	e032      	b.n	80036e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	@ 0x24
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	d139      	bne.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800370e:	2302      	movs	r3, #2
 8003710:	e033      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2224      	movs	r2, #36	@ 0x24
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d141      	bne.n	800381a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003796:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d131      	bne.n	8003808 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a4:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037aa:	4a46      	ldr	r2, [pc, #280]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b4:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037bc:	4a41      	ldr	r2, [pc, #260]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c4:	4b40      	ldr	r3, [pc, #256]	@ (80038c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2232      	movs	r2, #50	@ 0x32
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	4a3f      	ldr	r2, [pc, #252]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	0c9b      	lsrs	r3, r3, #18
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037da:	e002      	b.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3b01      	subs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e2:	4b38      	ldr	r3, [pc, #224]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d102      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f2      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f6:	4b33      	ldr	r3, [pc, #204]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003802:	d158      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e057      	b.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380e:	4a2d      	ldr	r2, [pc, #180]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003818:	e04d      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003820:	d141      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003822:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	d131      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003830:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003836:	4a23      	ldr	r2, [pc, #140]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003840:	4b20      	ldr	r3, [pc, #128]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003848:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800384e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003850:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2232      	movs	r2, #50	@ 0x32
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	0c9b      	lsrs	r3, r3, #18
 8003862:	3301      	adds	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003866:	e002      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3b01      	subs	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387a:	d102      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f2      	bne.n	8003868 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388e:	d112      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e011      	b.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389a:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038a4:	e007      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038a6:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038ae:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40007000 	.word	0x40007000
 80038c8:	20000000 	.word	0x20000000
 80038cc:	431bde83 	.word	0x431bde83

080038d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a04      	ldr	r2, [pc, #16]	@ (80038ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038de:	6093      	str	r3, [r2, #8]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40007000 	.word	0x40007000

080038f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e2fe      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d075      	beq.n	80039fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b97      	ldr	r3, [pc, #604]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4b94      	ldr	r3, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d102      	bne.n	800392e <HAL_RCC_OscConfig+0x3e>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d002      	beq.n	8003934 <HAL_RCC_OscConfig+0x44>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b8d      	ldr	r3, [pc, #564]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05b      	beq.n	80039f8 <HAL_RCC_OscConfig+0x108>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e2d9      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x74>
 8003956:	4b85      	ldr	r3, [pc, #532]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a84      	ldr	r2, [pc, #528]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x98>
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7e      	ldr	r2, [pc, #504]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003988:	4b78      	ldr	r3, [pc, #480]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a77      	ldr	r2, [pc, #476]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b75      	ldr	r3, [pc, #468]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a74      	ldr	r2, [pc, #464]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fe1e 	bl	80025e8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe fe1a 	bl	80025e8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	@ 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e29e      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xc0>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fe0a 	bl	80025e8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe fe06 	bl	80025e8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e28a      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ea:	4b60      	ldr	r3, [pc, #384]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0xe8>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d075      	beq.n	8003af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a06:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a10:	4b56      	ldr	r3, [pc, #344]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d102      	bne.n	8003a26 <HAL_RCC_OscConfig+0x136>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d002      	beq.n	8003a2c <HAL_RCC_OscConfig+0x13c>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d11f      	bne.n	8003a6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_OscConfig+0x154>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e25d      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	4946      	ldr	r1, [pc, #280]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a58:	4b45      	ldr	r3, [pc, #276]	@ (8003b70 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fd77 	bl	8002550 <HAL_InitTick>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d043      	beq.n	8003af0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e249      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3c      	ldr	r2, [pc, #240]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fe fdb2 	bl	80025e8 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fe fdae 	bl	80025e8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e232      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9a:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b31      	ldr	r3, [pc, #196]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	061b      	lsls	r3, r3, #24
 8003ab4:	492d      	ldr	r1, [pc, #180]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
 8003aba:	e01a      	b.n	8003af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fd8e 	bl	80025e8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe fd8a 	bl	80025e8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e20e      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae2:	4b22      	ldr	r3, [pc, #136]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1e0>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d041      	beq.n	8003b82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0c:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe fd67 	bl	80025e8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fd63 	bl	80025e8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1e7      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ef      	beq.n	8003b1e <HAL_RCC_OscConfig+0x22e>
 8003b3e:	e020      	b.n	8003b82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b46:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe fd4a 	bl	80025e8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b56:	e00d      	b.n	8003b74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fe fd46 	bl	80025e8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d906      	bls.n	8003b74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1ca      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b74:	4b8c      	ldr	r3, [pc, #560]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ea      	bne.n	8003b58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80a6 	beq.w	8003cdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b94:	4b84      	ldr	r3, [pc, #528]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2b4>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x2b6>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b7f      	ldr	r3, [pc, #508]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	4a7e      	ldr	r2, [pc, #504]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	4b79      	ldr	r3, [pc, #484]	@ (8003dac <HAL_RCC_OscConfig+0x4bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd2:	4b76      	ldr	r3, [pc, #472]	@ (8003dac <HAL_RCC_OscConfig+0x4bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	@ (8003dac <HAL_RCC_OscConfig+0x4bc>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fd03 	bl	80025e8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fe fcff 	bl	80025e8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e183      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8003dac <HAL_RCC_OscConfig+0x4bc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d108      	bne.n	8003c1e <HAL_RCC_OscConfig+0x32e>
 8003c0c:	4b66      	ldr	r3, [pc, #408]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	4a65      	ldr	r2, [pc, #404]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c1c:	e024      	b.n	8003c68 <HAL_RCC_OscConfig+0x378>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d110      	bne.n	8003c48 <HAL_RCC_OscConfig+0x358>
 8003c26:	4b60      	ldr	r3, [pc, #384]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c36:	4b5c      	ldr	r3, [pc, #368]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c46:	e00f      	b.n	8003c68 <HAL_RCC_OscConfig+0x378>
 8003c48:	4b57      	ldr	r3, [pc, #348]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	4a56      	ldr	r2, [pc, #344]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c58:	4b53      	ldr	r3, [pc, #332]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c60:	f023 0304 	bic.w	r3, r3, #4
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe fcba 	bl	80025e8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe fcb6 	bl	80025e8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e138      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8e:	4b46      	ldr	r3, [pc, #280]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ed      	beq.n	8003c78 <HAL_RCC_OscConfig+0x388>
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fca3 	bl	80025e8 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca6:	f7fe fc9f 	bl	80025e8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e121      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ed      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d03c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fe fc72 	bl	80025e8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d08:	f7fe fc6e 	bl	80025e8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0f2      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d1a:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x418>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d30:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fc55 	bl	80025e8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d42:	f7fe fc51 	bl	80025e8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0d5      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d54:	4b14      	ldr	r3, [pc, #80]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80c9 	beq.w	8003efe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	f000 8083 	beq.w	8003e80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d15e      	bne.n	8003e40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a08      	ldr	r2, [pc, #32]	@ (8003da8 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fc2b 	bl	80025e8 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d94:	e00c      	b.n	8003db0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe fc27 	bl	80025e8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d905      	bls.n	8003db0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e0ab      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db0:	4b55      	ldr	r3, [pc, #340]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ec      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dbc:	4b52      	ldr	r3, [pc, #328]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	4b52      	ldr	r3, [pc, #328]	@ (8003f0c <HAL_RCC_OscConfig+0x61c>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6a11      	ldr	r1, [r2, #32]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003dd6:	0212      	lsls	r2, r2, #8
 8003dd8:	4311      	orrs	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0552      	lsls	r2, r2, #21
 8003de4:	4311      	orrs	r1, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dea:	0852      	lsrs	r2, r2, #1
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0652      	lsls	r2, r2, #25
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003df6:	06d2      	lsls	r2, r2, #27
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4943      	ldr	r1, [pc, #268]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e00:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a40      	ldr	r2, [pc, #256]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a3d      	ldr	r2, [pc, #244]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fe fbe6 	bl	80025e8 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fe fbe2 	bl	80025e8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e066      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e32:	4b35      	ldr	r3, [pc, #212]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x530>
 8003e3e:	e05e      	b.n	8003efe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a30      	ldr	r2, [pc, #192]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fbcc 	bl	80025e8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fbc8 	bl	80025e8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04c      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e66:	4b28      	ldr	r3, [pc, #160]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e72:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	4924      	ldr	r1, [pc, #144]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e78:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <HAL_RCC_OscConfig+0x620>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
 8003e7e:	e03e      	b.n	8003efe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e039      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0203 	and.w	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d12c      	bne.n	8003efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d123      	bne.n	8003efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d11b      	bne.n	8003efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d113      	bne.n	8003efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	019f800c 	.word	0x019f800c
 8003f10:	feeefffc 	.word	0xfeeefffc

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e11e      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b91      	ldr	r3, [pc, #580]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d910      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b8e      	ldr	r3, [pc, #568]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 020f 	bic.w	r2, r3, #15
 8003f42:	498c      	ldr	r1, [pc, #560]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b8a      	ldr	r3, [pc, #552]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e106      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d073      	beq.n	8004050 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d129      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f70:	4b81      	ldr	r3, [pc, #516]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0f4      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f80:	f000 f99e 	bl	80042c0 <RCC_GetSysClockFreqFromPLLSource>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4a7c      	ldr	r2, [pc, #496]	@ (800417c <HAL_RCC_ClockConfig+0x268>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d93f      	bls.n	800400e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d033      	beq.n	800400e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d12f      	bne.n	800400e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fae:	4b72      	ldr	r3, [pc, #456]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fb6:	4a70      	ldr	r2, [pc, #448]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e024      	b.n	800400e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0c6      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fdc:	4b66      	ldr	r3, [pc, #408]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0be      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fec:	f000 f8ce 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4a61      	ldr	r2, [pc, #388]	@ (800417c <HAL_RCC_ClockConfig+0x268>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d909      	bls.n	800400e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004002:	4a5d      	ldr	r2, [pc, #372]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004008:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b5a      	ldr	r3, [pc, #360]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4957      	ldr	r1, [pc, #348]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fe fae2 	bl	80025e8 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7fe fade 	bl	80025e8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e095      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b4e      	ldr	r3, [pc, #312]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a42      	ldr	r2, [pc, #264]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800406e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004072:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004080:	4b3d      	ldr	r3, [pc, #244]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004088:	4a3b      	ldr	r2, [pc, #236]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800408a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800408e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4936      	ldr	r1, [pc, #216]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040aa:	4b33      	ldr	r3, [pc, #204]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4a32      	ldr	r2, [pc, #200]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 80040b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d21d      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 020f 	bic.w	r2, r3, #15
 80040cc:	4929      	ldr	r1, [pc, #164]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040d4:	f7fe fa88 	bl	80025e8 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fe fa84 	bl	80025e8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e03b      	b.n	800416a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	@ (8004174 <HAL_RCC_ClockConfig+0x260>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1ed      	bne.n	80040dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4917      	ldr	r1, [pc, #92]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b13      	ldr	r3, [pc, #76]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490f      	ldr	r1, [pc, #60]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800413e:	f000 f825 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <HAL_RCC_ClockConfig+0x264>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490c      	ldr	r1, [pc, #48]	@ (8004180 <HAL_RCC_ClockConfig+0x26c>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a0a      	ldr	r2, [pc, #40]	@ (8004184 <HAL_RCC_ClockConfig+0x270>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800415e:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <HAL_RCC_ClockConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f9f4 	bl	8002550 <HAL_InitTick>
 8004168:	4603      	mov	r3, r0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40022000 	.word	0x40022000
 8004178:	40021000 	.word	0x40021000
 800417c:	04c4b400 	.word	0x04c4b400
 8004180:	08008464 	.word	0x08008464
 8004184:	20000000 	.word	0x20000000
 8004188:	20000004 	.word	0x20000004

0800418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004192:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800419e:	4b2a      	ldr	r3, [pc, #168]	@ (8004248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e047      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041b0:	4b26      	ldr	r3, [pc, #152]	@ (800424c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e03e      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041b6:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d136      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3301      	adds	r3, #1
 80041d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d10c      	bne.n	80041fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ea:	68d2      	ldr	r2, [r2, #12]
 80041ec:	0a12      	lsrs	r2, r2, #8
 80041ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
      break;
 80041f8:	e00c      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fa:	4a13      	ldr	r2, [pc, #76]	@ (8004248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	4a10      	ldr	r2, [pc, #64]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	0a12      	lsrs	r2, r2, #8
 8004208:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
      break;
 8004212:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0e5b      	lsrs	r3, r3, #25
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e001      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004234:	693b      	ldr	r3, [r7, #16]
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	00f42400 	.word	0x00f42400
 800424c:	007a1200 	.word	0x007a1200

08004250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x14>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000000 	.word	0x20000000

08004268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800426c:	f7ff fff0 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4904      	ldr	r1, [pc, #16]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	08008474 	.word	0x08008474

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004298:	f7ff ffda 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0adb      	lsrs	r3, r3, #11
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4904      	ldr	r1, [pc, #16]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08008474 	.word	0x08008474

080042c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d10c      	bne.n	80042fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042e4:	4a17      	ldr	r2, [pc, #92]	@ (8004344 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ee:	68d2      	ldr	r2, [r2, #12]
 80042f0:	0a12      	lsrs	r2, r2, #8
 80042f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
    break;
 80042fc:	e00c      	b.n	8004318 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	4a0e      	ldr	r2, [pc, #56]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	0a12      	lsrs	r2, r2, #8
 800430c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
    break;
 8004316:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004318:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	0e5b      	lsrs	r3, r3, #25
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004332:	687b      	ldr	r3, [r7, #4]
}
 8004334:	4618      	mov	r0, r3
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40021000 	.word	0x40021000
 8004344:	007a1200 	.word	0x007a1200
 8004348:	00f42400 	.word	0x00f42400

0800434c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004354:	2300      	movs	r3, #0
 8004356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004358:	2300      	movs	r3, #0
 800435a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8098 	beq.w	800449a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436a:	2300      	movs	r3, #0
 800436c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436e:	4b43      	ldr	r3, [pc, #268]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	4b40      	ldr	r3, [pc, #256]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	4a3f      	ldr	r2, [pc, #252]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
 8004386:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004396:	4b3a      	ldr	r3, [pc, #232]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a39      	ldr	r2, [pc, #228]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a2:	f7fe f921 	bl	80025e8 <HAL_GetTick>
 80043a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a8:	e009      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fe f91d 	bl	80025e8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	74fb      	strb	r3, [r7, #19]
        break;
 80043bc:	e005      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043be:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ef      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d159      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d0:	4b2a      	ldr	r3, [pc, #168]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d019      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ec:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004408:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004418:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe f8dd 	bl	80025e8 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	e00b      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe f8d9 	bl	80025e8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d902      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	74fb      	strb	r3, [r7, #19]
            break;
 8004448:	e006      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444a:	4b0c      	ldr	r3, [pc, #48]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ec      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445e:	4b07      	ldr	r3, [pc, #28]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446c:	4903      	ldr	r1, [pc, #12]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	74bb      	strb	r3, [r7, #18]
 800447a:	e005      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800447c:	40021000 	.word	0x40021000
 8004480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004488:	7c7b      	ldrb	r3, [r7, #17]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4ba7      	ldr	r3, [pc, #668]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	4aa6      	ldr	r2, [pc, #664]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004498:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044a6:	4ba1      	ldr	r3, [pc, #644]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f023 0203 	bic.w	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	499d      	ldr	r1, [pc, #628]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044c8:	4b98      	ldr	r3, [pc, #608]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f023 020c 	bic.w	r2, r3, #12
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4995      	ldr	r1, [pc, #596]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ea:	4b90      	ldr	r3, [pc, #576]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	498c      	ldr	r1, [pc, #560]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800450c:	4b87      	ldr	r3, [pc, #540]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4984      	ldr	r1, [pc, #528]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800452e:	4b7f      	ldr	r3, [pc, #508]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	497b      	ldr	r1, [pc, #492]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004550:	4b76      	ldr	r3, [pc, #472]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	4973      	ldr	r1, [pc, #460]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004572:	4b6e      	ldr	r3, [pc, #440]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	496a      	ldr	r1, [pc, #424]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004594:	4b65      	ldr	r3, [pc, #404]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4962      	ldr	r1, [pc, #392]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045b6:	4b5d      	ldr	r3, [pc, #372]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	4959      	ldr	r1, [pc, #356]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d8:	4b54      	ldr	r3, [pc, #336]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	4951      	ldr	r1, [pc, #324]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fa:	4b4c      	ldr	r3, [pc, #304]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004600:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4948      	ldr	r1, [pc, #288]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004618:	d105      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461a:	4b44      	ldr	r3, [pc, #272]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4a43      	ldr	r2, [pc, #268]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004624:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800462e:	2b00      	cmp	r3, #0
 8004630:	d015      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004632:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	493a      	ldr	r1, [pc, #232]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004650:	d105      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004652:	4b36      	ldr	r3, [pc, #216]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a35      	ldr	r2, [pc, #212]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d015      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800466a:	4b30      	ldr	r3, [pc, #192]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004678:	492c      	ldr	r1, [pc, #176]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004688:	d105      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4a27      	ldr	r2, [pc, #156]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004694:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d015      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a2:	4b22      	ldr	r3, [pc, #136]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	491e      	ldr	r1, [pc, #120]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c0:	d105      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c2:	4b1a      	ldr	r3, [pc, #104]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4a19      	ldr	r2, [pc, #100]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046cc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046da:	4b14      	ldr	r3, [pc, #80]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	4910      	ldr	r1, [pc, #64]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046f8:	d105      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fa:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4a0b      	ldr	r2, [pc, #44]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004704:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	4902      	ldr	r1, [pc, #8]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	e001      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800472c:	40021000 	.word	0x40021000
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004738:	4b21      	ldr	r3, [pc, #132]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004742:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004750:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	4918      	ldr	r1, [pc, #96]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004770:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004788:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800478a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800478e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004796:	490a      	ldr	r1, [pc, #40]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e09d      	b.n	8004912 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e6:	d009      	beq.n	80047fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]
 80047ee:	e005      	b.n	80047fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd fcb6 	bl	8002188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004832:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800483c:	d902      	bls.n	8004844 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e002      	b.n	800484a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004848:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Init+0xa0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800485c:	d002      	beq.n	8004864 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	ea42 0103 	orr.w	r1, r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	0c1b      	lsrs	r3, r3, #16
 80048c0:	f003 0204 	and.w	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80048e0:	ea42 0103 	orr.w	r1, r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e042      	b.n	80049b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fc64 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	@ 0x24
 8004948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fbb3 	bl	80050d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8b4 	bl	8004ad8 <UART_SetConfig>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e01b      	b.n	80049b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004988:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004998:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fc32 	bl	8005214 <UART_CheckIdleState>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b08a      	sub	sp, #40	@ 0x28
 80049be:	af02      	add	r7, sp, #8
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d17b      	bne.n	8004acc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_UART_Transmit+0x26>
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e074      	b.n	8004ace <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2221      	movs	r2, #33	@ 0x21
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f4:	f7fd fdf8 	bl	80025e8 <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d108      	bne.n	8004a26 <HAL_UART_Transmit+0x6c>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e003      	b.n	8004a2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a2e:	e030      	b.n	8004a92 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	@ 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fc94 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e03d      	b.n	8004ace <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e007      	b.n	8004a80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1c8      	bne.n	8004a30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2140      	movs	r1, #64	@ 0x40
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 fc5d 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e006      	b.n	8004ace <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b08c      	sub	sp, #48	@ 0x30
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4baa      	ldr	r3, [pc, #680]	@ (8004db0 <UART_SetConfig+0x2d8>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a9f      	ldr	r2, [pc, #636]	@ (8004db4 <UART_SetConfig+0x2dc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b40:	4313      	orrs	r3, r2
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	f023 010f 	bic.w	r1, r3, #15
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a90      	ldr	r2, [pc, #576]	@ (8004db8 <UART_SetConfig+0x2e0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d125      	bne.n	8004bc8 <UART_SetConfig+0xf0>
 8004b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d81a      	bhi.n	8004bc0 <UART_SetConfig+0xe8>
 8004b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0xb8>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e116      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e112      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb6:	e10e      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	e10a      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e106      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc0 <UART_SetConfig+0x2e8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d138      	bne.n	8004c44 <UART_SetConfig+0x16c>
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d82d      	bhi.n	8004c3c <UART_SetConfig+0x164>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x110>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c25 	.word	0x08004c25
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c22:	e0d8      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2a:	e0d4      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c32:	e0d0      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c3a:	e0cc      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c42:	e0c8      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc4 <UART_SetConfig+0x2ec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d125      	bne.n	8004c9a <UART_SetConfig+0x1c2>
 8004c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c58:	2b30      	cmp	r3, #48	@ 0x30
 8004c5a:	d016      	beq.n	8004c8a <UART_SetConfig+0x1b2>
 8004c5c:	2b30      	cmp	r3, #48	@ 0x30
 8004c5e:	d818      	bhi.n	8004c92 <UART_SetConfig+0x1ba>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d00a      	beq.n	8004c7a <UART_SetConfig+0x1a2>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d814      	bhi.n	8004c92 <UART_SetConfig+0x1ba>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <UART_SetConfig+0x19a>
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d008      	beq.n	8004c82 <UART_SetConfig+0x1aa>
 8004c70:	e00f      	b.n	8004c92 <UART_SetConfig+0x1ba>
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c78:	e0ad      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c80:	e0a9      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c82:	2304      	movs	r3, #4
 8004c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c88:	e0a5      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c90:	e0a1      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c92:	2310      	movs	r3, #16
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c98:	e09d      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc8 <UART_SetConfig+0x2f0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d125      	bne.n	8004cf0 <UART_SetConfig+0x218>
 8004ca4:	4b45      	ldr	r3, [pc, #276]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb0:	d016      	beq.n	8004ce0 <UART_SetConfig+0x208>
 8004cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb4:	d818      	bhi.n	8004ce8 <UART_SetConfig+0x210>
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d00a      	beq.n	8004cd0 <UART_SetConfig+0x1f8>
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d814      	bhi.n	8004ce8 <UART_SetConfig+0x210>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <UART_SetConfig+0x1f0>
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x200>
 8004cc6:	e00f      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e082      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd6:	e07e      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cde:	e07a      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce6:	e076      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cee:	e072      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a35      	ldr	r2, [pc, #212]	@ (8004dcc <UART_SetConfig+0x2f4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d12a      	bne.n	8004d50 <UART_SetConfig+0x278>
 8004cfa:	4b30      	ldr	r3, [pc, #192]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d08:	d01a      	beq.n	8004d40 <UART_SetConfig+0x268>
 8004d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0e:	d81b      	bhi.n	8004d48 <UART_SetConfig+0x270>
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d14:	d00c      	beq.n	8004d30 <UART_SetConfig+0x258>
 8004d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1a:	d815      	bhi.n	8004d48 <UART_SetConfig+0x270>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x250>
 8004d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d24:	d008      	beq.n	8004d38 <UART_SetConfig+0x260>
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x270>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2e:	e052      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d36:	e04e      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3e:	e04a      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d46:	e046      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4e:	e042      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a17      	ldr	r2, [pc, #92]	@ (8004db4 <UART_SetConfig+0x2dc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d13a      	bne.n	8004dd0 <UART_SetConfig+0x2f8>
 8004d5a:	4b18      	ldr	r3, [pc, #96]	@ (8004dbc <UART_SetConfig+0x2e4>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d68:	d01a      	beq.n	8004da0 <UART_SetConfig+0x2c8>
 8004d6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d6e:	d81b      	bhi.n	8004da8 <UART_SetConfig+0x2d0>
 8004d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d74:	d00c      	beq.n	8004d90 <UART_SetConfig+0x2b8>
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7a:	d815      	bhi.n	8004da8 <UART_SetConfig+0x2d0>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <UART_SetConfig+0x2b0>
 8004d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d84:	d008      	beq.n	8004d98 <UART_SetConfig+0x2c0>
 8004d86:	e00f      	b.n	8004da8 <UART_SetConfig+0x2d0>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e022      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e01e      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	e01a      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	e016      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dae:	e012      	b.n	8004dd6 <UART_SetConfig+0x2fe>
 8004db0:	cfff69f3 	.word	0xcfff69f3
 8004db4:	40008000 	.word	0x40008000
 8004db8:	40013800 	.word	0x40013800
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40004400 	.word	0x40004400
 8004dc4:	40004800 	.word	0x40004800
 8004dc8:	40004c00 	.word	0x40004c00
 8004dcc:	40005000 	.word	0x40005000
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4aae      	ldr	r2, [pc, #696]	@ (8005094 <UART_SetConfig+0x5bc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	f040 8097 	bne.w	8004f10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004de2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d823      	bhi.n	8004e32 <UART_SetConfig+0x35a>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <UART_SetConfig+0x318>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e33 	.word	0x08004e33
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e33 	.word	0x08004e33
 8004e00:	08004e23 	.word	0x08004e23
 8004e04:	08004e33 	.word	0x08004e33
 8004e08:	08004e33 	.word	0x08004e33
 8004e0c:	08004e33 	.word	0x08004e33
 8004e10:	08004e2b 	.word	0x08004e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7ff fa28 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8004e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e1a:	e010      	b.n	8004e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8005098 <UART_SetConfig+0x5c0>)
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e20:	e00d      	b.n	8004e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e22:	f7ff f9b3 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8004e26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e28:	e009      	b.n	8004e3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e30:	e005      	b.n	8004e3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8130 	beq.w	80050a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	4a94      	ldr	r2, [pc, #592]	@ (800509c <UART_SetConfig+0x5c4>)
 8004e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d305      	bcc.n	8004e76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d903      	bls.n	8004e7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e7c:	e113      	b.n	80050a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	2200      	movs	r2, #0
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	60fa      	str	r2, [r7, #12]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	4a84      	ldr	r2, [pc, #528]	@ (800509c <UART_SetConfig+0x5c4>)
 8004e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ea0:	f7fb fefa 	bl	8000c98 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	020b      	lsls	r3, r1, #8
 8004eb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eba:	0202      	lsls	r2, r0, #8
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	6849      	ldr	r1, [r1, #4]
 8004ec0:	0849      	lsrs	r1, r1, #1
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	eb12 0804 	adds.w	r8, r2, r4
 8004ecc:	eb43 0905 	adc.w	r9, r3, r5
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	469a      	mov	sl, r3
 8004ed8:	4693      	mov	fp, r2
 8004eda:	4652      	mov	r2, sl
 8004edc:	465b      	mov	r3, fp
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb fed9 	bl	8000c98 <__aeabi_uldivmod>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4613      	mov	r3, r2
 8004eec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef4:	d308      	bcc.n	8004f08 <UART_SetConfig+0x430>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004efc:	d204      	bcs.n	8004f08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	e0ce      	b.n	80050a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f0e:	e0ca      	b.n	80050a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f18:	d166      	bne.n	8004fe8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d827      	bhi.n	8004f72 <UART_SetConfig+0x49a>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0x450>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f63 	.word	0x08004f63
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7ff f98c 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f52:	e014      	b.n	8004f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7ff f99e 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f5a:	e010      	b.n	8004f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005098 <UART_SetConfig+0x5c0>)
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f60:	e00d      	b.n	8004f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7ff f913 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8004f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f68:	e009      	b.n	8004f7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f70:	e005      	b.n	8004f7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8090 	beq.w	80050a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	4a44      	ldr	r2, [pc, #272]	@ (800509c <UART_SetConfig+0x5c4>)
 8004f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f98:	005a      	lsls	r2, r3, #1
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	441a      	add	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d916      	bls.n	8004fe0 <UART_SetConfig+0x508>
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb8:	d212      	bcs.n	8004fe0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f023 030f 	bic.w	r3, r3, #15
 8004fc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	8bfa      	ldrh	r2, [r7, #30]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e062      	b.n	80050a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fe6:	e05e      	b.n	80050a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d828      	bhi.n	8005042 <UART_SetConfig+0x56a>
 8004ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <UART_SetConfig+0x520>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7ff f924 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005022:	e014      	b.n	800504e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7ff f936 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8005028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800502a:	e010      	b.n	800504e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <UART_SetConfig+0x5c0>)
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005030:	e00d      	b.n	800504e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7ff f8ab 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8005036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005038:	e009      	b.n	800504e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005040:	e005      	b.n	800504e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800504c:	bf00      	nop
    }

    if (pclk != 0U)
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d028      	beq.n	80050a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	4a10      	ldr	r2, [pc, #64]	@ (800509c <UART_SetConfig+0x5c4>)
 800505a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505e:	461a      	mov	r2, r3
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	fbb3 f2f2 	udiv	r2, r3, r2
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	441a      	add	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d910      	bls.n	80050a0 <UART_SetConfig+0x5c8>
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005084:	d20c      	bcs.n	80050a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	b29a      	uxth	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0x5ce>
 8005092:	bf00      	nop
 8005094:	40008000 	.word	0x40008000
 8005098:	00f42400 	.word	0x00f42400
 800509c:	0800847c 	.word	0x0800847c
      }
      else
      {
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3730      	adds	r7, #48	@ 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ce:	d10a      	bne.n	80051e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b098      	sub	sp, #96	@ 0x60
 8005218:	af02      	add	r7, sp, #8
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005224:	f7fd f9e0 	bl	80025e8 <HAL_GetTick>
 8005228:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b08      	cmp	r3, #8
 8005236:	d12f      	bne.n	8005298 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f88e 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d022      	beq.n	8005298 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005266:	653b      	str	r3, [r7, #80]	@ 0x50
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
 8005272:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800527e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e063      	b.n	8005360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d149      	bne.n	800533a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ae:	2200      	movs	r2, #0
 80052b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f857 	bl	8005368 <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d03c      	beq.n	800533a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	623b      	str	r3, [r7, #32]
   return(result);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052de:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e6      	bne.n	80052c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	60fb      	str	r3, [r7, #12]
   return(result);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005312:	61fa      	str	r2, [r7, #28]
 8005314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	69b9      	ldr	r1, [r7, #24]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	617b      	str	r3, [r7, #20]
   return(result);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e012      	b.n	8005360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3758      	adds	r7, #88	@ 0x58
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	e04f      	b.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d04b      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fd f931 	bl	80025e8 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <UART_WaitOnFlagUntilTimeout+0x30>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e04e      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d037      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b80      	cmp	r3, #128	@ 0x80
 80053ae:	d034      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b40      	cmp	r3, #64	@ 0x40
 80053b4:	d031      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d110      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2208      	movs	r2, #8
 80053ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f838 	bl	8005442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2208      	movs	r2, #8
 80053d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e029      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f4:	d111      	bne.n	800541a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f81e 	bl	8005442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e00f      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	429a      	cmp	r2, r3
 8005436:	d0a0      	beq.n	800537a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005442:	b480      	push	{r7}
 8005444:	b095      	sub	sp, #84	@ 0x54
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005468:	643b      	str	r3, [r7, #64]	@ 0x40
 800546a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800546e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	61fb      	str	r3, [r7, #28]
   return(result);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e3      	bne.n	800547c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d118      	bne.n	80054ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005502:	bf00      	nop
 8005504:	3754      	adds	r7, #84	@ 0x54
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UARTEx_DisableFifoMode+0x16>
 8005520:	2302      	movs	r3, #2
 8005522:	e027      	b.n	8005574 <HAL_UARTEx_DisableFifoMode+0x66>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005552:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e02d      	b.n	80055f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2224      	movs	r2, #36	@ 0x24
 80055a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f84f 	bl	8005678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e02d      	b.n	8005670 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	@ 0x24
 8005620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f811 	bl	8005678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005698:	e031      	b.n	80056fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800569a:	2308      	movs	r3, #8
 800569c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800569e:	2308      	movs	r3, #8
 80056a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	0e5b      	lsrs	r3, r3, #25
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	0f5b      	lsrs	r3, r3, #29
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	7b3a      	ldrb	r2, [r7, #12]
 80056c6:	4911      	ldr	r1, [pc, #68]	@ (800570c <UARTEx_SetNbDataToProcess+0x94>)
 80056c8:	5c8a      	ldrb	r2, [r1, r2]
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ce:	7b3a      	ldrb	r2, [r7, #12]
 80056d0:	490f      	ldr	r1, [pc, #60]	@ (8005710 <UARTEx_SetNbDataToProcess+0x98>)
 80056d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056d8:	b29a      	uxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	7b7a      	ldrb	r2, [r7, #13]
 80056e4:	4909      	ldr	r1, [pc, #36]	@ (800570c <UARTEx_SetNbDataToProcess+0x94>)
 80056e6:	5c8a      	ldrb	r2, [r1, r2]
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056ec:	7b7a      	ldrb	r2, [r7, #13]
 80056ee:	4908      	ldr	r1, [pc, #32]	@ (8005710 <UARTEx_SetNbDataToProcess+0x98>)
 80056f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	08008494 	.word	0x08008494
 8005710:	0800849c 	.word	0x0800849c

08005714 <__cvt>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	ec57 6b10 	vmov	r6, r7, d0
 800571c:	2f00      	cmp	r7, #0
 800571e:	460c      	mov	r4, r1
 8005720:	4619      	mov	r1, r3
 8005722:	463b      	mov	r3, r7
 8005724:	bfbb      	ittet	lt
 8005726:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800572a:	461f      	movlt	r7, r3
 800572c:	2300      	movge	r3, #0
 800572e:	232d      	movlt	r3, #45	@ 0x2d
 8005730:	700b      	strb	r3, [r1, #0]
 8005732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005734:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005738:	4691      	mov	r9, r2
 800573a:	f023 0820 	bic.w	r8, r3, #32
 800573e:	bfbc      	itt	lt
 8005740:	4632      	movlt	r2, r6
 8005742:	4616      	movlt	r6, r2
 8005744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005748:	d005      	beq.n	8005756 <__cvt+0x42>
 800574a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800574e:	d100      	bne.n	8005752 <__cvt+0x3e>
 8005750:	3401      	adds	r4, #1
 8005752:	2102      	movs	r1, #2
 8005754:	e000      	b.n	8005758 <__cvt+0x44>
 8005756:	2103      	movs	r1, #3
 8005758:	ab03      	add	r3, sp, #12
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	ab02      	add	r3, sp, #8
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	ec47 6b10 	vmov	d0, r6, r7
 8005764:	4653      	mov	r3, sl
 8005766:	4622      	mov	r2, r4
 8005768:	f000 fe5a 	bl	8006420 <_dtoa_r>
 800576c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005770:	4605      	mov	r5, r0
 8005772:	d119      	bne.n	80057a8 <__cvt+0x94>
 8005774:	f019 0f01 	tst.w	r9, #1
 8005778:	d00e      	beq.n	8005798 <__cvt+0x84>
 800577a:	eb00 0904 	add.w	r9, r0, r4
 800577e:	2200      	movs	r2, #0
 8005780:	2300      	movs	r3, #0
 8005782:	4630      	mov	r0, r6
 8005784:	4639      	mov	r1, r7
 8005786:	f7fb f9c7 	bl	8000b18 <__aeabi_dcmpeq>
 800578a:	b108      	cbz	r0, 8005790 <__cvt+0x7c>
 800578c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005790:	2230      	movs	r2, #48	@ 0x30
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	454b      	cmp	r3, r9
 8005796:	d31e      	bcc.n	80057d6 <__cvt+0xc2>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800579c:	1b5b      	subs	r3, r3, r5
 800579e:	4628      	mov	r0, r5
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	b004      	add	sp, #16
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057ac:	eb00 0904 	add.w	r9, r0, r4
 80057b0:	d1e5      	bne.n	800577e <__cvt+0x6a>
 80057b2:	7803      	ldrb	r3, [r0, #0]
 80057b4:	2b30      	cmp	r3, #48	@ 0x30
 80057b6:	d10a      	bne.n	80057ce <__cvt+0xba>
 80057b8:	2200      	movs	r2, #0
 80057ba:	2300      	movs	r3, #0
 80057bc:	4630      	mov	r0, r6
 80057be:	4639      	mov	r1, r7
 80057c0:	f7fb f9aa 	bl	8000b18 <__aeabi_dcmpeq>
 80057c4:	b918      	cbnz	r0, 80057ce <__cvt+0xba>
 80057c6:	f1c4 0401 	rsb	r4, r4, #1
 80057ca:	f8ca 4000 	str.w	r4, [sl]
 80057ce:	f8da 3000 	ldr.w	r3, [sl]
 80057d2:	4499      	add	r9, r3
 80057d4:	e7d3      	b.n	800577e <__cvt+0x6a>
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	9103      	str	r1, [sp, #12]
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e7d9      	b.n	8005792 <__cvt+0x7e>

080057de <__exponent>:
 80057de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e0:	2900      	cmp	r1, #0
 80057e2:	bfba      	itte	lt
 80057e4:	4249      	neglt	r1, r1
 80057e6:	232d      	movlt	r3, #45	@ 0x2d
 80057e8:	232b      	movge	r3, #43	@ 0x2b
 80057ea:	2909      	cmp	r1, #9
 80057ec:	7002      	strb	r2, [r0, #0]
 80057ee:	7043      	strb	r3, [r0, #1]
 80057f0:	dd29      	ble.n	8005846 <__exponent+0x68>
 80057f2:	f10d 0307 	add.w	r3, sp, #7
 80057f6:	461d      	mov	r5, r3
 80057f8:	270a      	movs	r7, #10
 80057fa:	461a      	mov	r2, r3
 80057fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005800:	fb07 1416 	mls	r4, r7, r6, r1
 8005804:	3430      	adds	r4, #48	@ 0x30
 8005806:	f802 4c01 	strb.w	r4, [r2, #-1]
 800580a:	460c      	mov	r4, r1
 800580c:	2c63      	cmp	r4, #99	@ 0x63
 800580e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005812:	4631      	mov	r1, r6
 8005814:	dcf1      	bgt.n	80057fa <__exponent+0x1c>
 8005816:	3130      	adds	r1, #48	@ 0x30
 8005818:	1e94      	subs	r4, r2, #2
 800581a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800581e:	1c41      	adds	r1, r0, #1
 8005820:	4623      	mov	r3, r4
 8005822:	42ab      	cmp	r3, r5
 8005824:	d30a      	bcc.n	800583c <__exponent+0x5e>
 8005826:	f10d 0309 	add.w	r3, sp, #9
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	42ac      	cmp	r4, r5
 800582e:	bf88      	it	hi
 8005830:	2300      	movhi	r3, #0
 8005832:	3302      	adds	r3, #2
 8005834:	4403      	add	r3, r0
 8005836:	1a18      	subs	r0, r3, r0
 8005838:	b003      	add	sp, #12
 800583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005840:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005844:	e7ed      	b.n	8005822 <__exponent+0x44>
 8005846:	2330      	movs	r3, #48	@ 0x30
 8005848:	3130      	adds	r1, #48	@ 0x30
 800584a:	7083      	strb	r3, [r0, #2]
 800584c:	70c1      	strb	r1, [r0, #3]
 800584e:	1d03      	adds	r3, r0, #4
 8005850:	e7f1      	b.n	8005836 <__exponent+0x58>
	...

08005854 <_printf_float>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	b08d      	sub	sp, #52	@ 0x34
 800585a:	460c      	mov	r4, r1
 800585c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005860:	4616      	mov	r6, r2
 8005862:	461f      	mov	r7, r3
 8005864:	4605      	mov	r5, r0
 8005866:	f000 fcdb 	bl	8006220 <_localeconv_r>
 800586a:	6803      	ldr	r3, [r0, #0]
 800586c:	9304      	str	r3, [sp, #16]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fd26 	bl	80002c0 <strlen>
 8005874:	2300      	movs	r3, #0
 8005876:	930a      	str	r3, [sp, #40]	@ 0x28
 8005878:	f8d8 3000 	ldr.w	r3, [r8]
 800587c:	9005      	str	r0, [sp, #20]
 800587e:	3307      	adds	r3, #7
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	f103 0208 	add.w	r2, r3, #8
 8005888:	f894 a018 	ldrb.w	sl, [r4, #24]
 800588c:	f8d4 b000 	ldr.w	fp, [r4]
 8005890:	f8c8 2000 	str.w	r2, [r8]
 8005894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005898:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800589c:	9307      	str	r3, [sp, #28]
 800589e:	f8cd 8018 	str.w	r8, [sp, #24]
 80058a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058aa:	4b9c      	ldr	r3, [pc, #624]	@ (8005b1c <_printf_float+0x2c8>)
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	f7fb f964 	bl	8000b7c <__aeabi_dcmpun>
 80058b4:	bb70      	cbnz	r0, 8005914 <_printf_float+0xc0>
 80058b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ba:	4b98      	ldr	r3, [pc, #608]	@ (8005b1c <_printf_float+0x2c8>)
 80058bc:	f04f 32ff 	mov.w	r2, #4294967295
 80058c0:	f7fb f93e 	bl	8000b40 <__aeabi_dcmple>
 80058c4:	bb30      	cbnz	r0, 8005914 <_printf_float+0xc0>
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	4640      	mov	r0, r8
 80058cc:	4649      	mov	r1, r9
 80058ce:	f7fb f92d 	bl	8000b2c <__aeabi_dcmplt>
 80058d2:	b110      	cbz	r0, 80058da <_printf_float+0x86>
 80058d4:	232d      	movs	r3, #45	@ 0x2d
 80058d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058da:	4a91      	ldr	r2, [pc, #580]	@ (8005b20 <_printf_float+0x2cc>)
 80058dc:	4b91      	ldr	r3, [pc, #580]	@ (8005b24 <_printf_float+0x2d0>)
 80058de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058e2:	bf94      	ite	ls
 80058e4:	4690      	movls	r8, r2
 80058e6:	4698      	movhi	r8, r3
 80058e8:	2303      	movs	r3, #3
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	f02b 0304 	bic.w	r3, fp, #4
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	9700      	str	r7, [sp, #0]
 80058f8:	4633      	mov	r3, r6
 80058fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f9d2 	bl	8005ca8 <_printf_common>
 8005904:	3001      	adds	r0, #1
 8005906:	f040 808d 	bne.w	8005a24 <_printf_float+0x1d0>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	b00d      	add	sp, #52	@ 0x34
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	4640      	mov	r0, r8
 800591a:	4649      	mov	r1, r9
 800591c:	f7fb f92e 	bl	8000b7c <__aeabi_dcmpun>
 8005920:	b140      	cbz	r0, 8005934 <_printf_float+0xe0>
 8005922:	464b      	mov	r3, r9
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfbc      	itt	lt
 8005928:	232d      	movlt	r3, #45	@ 0x2d
 800592a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800592e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b28 <_printf_float+0x2d4>)
 8005930:	4b7e      	ldr	r3, [pc, #504]	@ (8005b2c <_printf_float+0x2d8>)
 8005932:	e7d4      	b.n	80058de <_printf_float+0x8a>
 8005934:	6863      	ldr	r3, [r4, #4]
 8005936:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800593a:	9206      	str	r2, [sp, #24]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	d13b      	bne.n	80059b8 <_printf_float+0x164>
 8005940:	2306      	movs	r3, #6
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005948:	2300      	movs	r3, #0
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005950:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005954:	ab09      	add	r3, sp, #36	@ 0x24
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	6861      	ldr	r1, [r4, #4]
 800595a:	ec49 8b10 	vmov	d0, r8, r9
 800595e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005962:	4628      	mov	r0, r5
 8005964:	f7ff fed6 	bl	8005714 <__cvt>
 8005968:	9b06      	ldr	r3, [sp, #24]
 800596a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800596c:	2b47      	cmp	r3, #71	@ 0x47
 800596e:	4680      	mov	r8, r0
 8005970:	d129      	bne.n	80059c6 <_printf_float+0x172>
 8005972:	1cc8      	adds	r0, r1, #3
 8005974:	db02      	blt.n	800597c <_printf_float+0x128>
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	4299      	cmp	r1, r3
 800597a:	dd41      	ble.n	8005a00 <_printf_float+0x1ac>
 800597c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005980:	fa5f fa8a 	uxtb.w	sl, sl
 8005984:	3901      	subs	r1, #1
 8005986:	4652      	mov	r2, sl
 8005988:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800598c:	9109      	str	r1, [sp, #36]	@ 0x24
 800598e:	f7ff ff26 	bl	80057de <__exponent>
 8005992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005994:	1813      	adds	r3, r2, r0
 8005996:	2a01      	cmp	r2, #1
 8005998:	4681      	mov	r9, r0
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	dc02      	bgt.n	80059a4 <_printf_float+0x150>
 800599e:	6822      	ldr	r2, [r4, #0]
 80059a0:	07d2      	lsls	r2, r2, #31
 80059a2:	d501      	bpl.n	80059a8 <_printf_float+0x154>
 80059a4:	3301      	adds	r3, #1
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0a2      	beq.n	80058f6 <_printf_float+0xa2>
 80059b0:	232d      	movs	r3, #45	@ 0x2d
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059b6:	e79e      	b.n	80058f6 <_printf_float+0xa2>
 80059b8:	9a06      	ldr	r2, [sp, #24]
 80059ba:	2a47      	cmp	r2, #71	@ 0x47
 80059bc:	d1c2      	bne.n	8005944 <_printf_float+0xf0>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1c0      	bne.n	8005944 <_printf_float+0xf0>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7bd      	b.n	8005942 <_printf_float+0xee>
 80059c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059ca:	d9db      	bls.n	8005984 <_printf_float+0x130>
 80059cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059d0:	d118      	bne.n	8005a04 <_printf_float+0x1b0>
 80059d2:	2900      	cmp	r1, #0
 80059d4:	6863      	ldr	r3, [r4, #4]
 80059d6:	dd0b      	ble.n	80059f0 <_printf_float+0x19c>
 80059d8:	6121      	str	r1, [r4, #16]
 80059da:	b913      	cbnz	r3, 80059e2 <_printf_float+0x18e>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	07d0      	lsls	r0, r2, #31
 80059e0:	d502      	bpl.n	80059e8 <_printf_float+0x194>
 80059e2:	3301      	adds	r3, #1
 80059e4:	440b      	add	r3, r1
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059ea:	f04f 0900 	mov.w	r9, #0
 80059ee:	e7db      	b.n	80059a8 <_printf_float+0x154>
 80059f0:	b913      	cbnz	r3, 80059f8 <_printf_float+0x1a4>
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	07d2      	lsls	r2, r2, #31
 80059f6:	d501      	bpl.n	80059fc <_printf_float+0x1a8>
 80059f8:	3302      	adds	r3, #2
 80059fa:	e7f4      	b.n	80059e6 <_printf_float+0x192>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e7f2      	b.n	80059e6 <_printf_float+0x192>
 8005a00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a06:	4299      	cmp	r1, r3
 8005a08:	db05      	blt.n	8005a16 <_printf_float+0x1c2>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	6121      	str	r1, [r4, #16]
 8005a0e:	07d8      	lsls	r0, r3, #31
 8005a10:	d5ea      	bpl.n	80059e8 <_printf_float+0x194>
 8005a12:	1c4b      	adds	r3, r1, #1
 8005a14:	e7e7      	b.n	80059e6 <_printf_float+0x192>
 8005a16:	2900      	cmp	r1, #0
 8005a18:	bfd4      	ite	le
 8005a1a:	f1c1 0202 	rsble	r2, r1, #2
 8005a1e:	2201      	movgt	r2, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	e7e0      	b.n	80059e6 <_printf_float+0x192>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	055a      	lsls	r2, r3, #21
 8005a28:	d407      	bmi.n	8005a3a <_printf_float+0x1e6>
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4628      	mov	r0, r5
 8005a32:	47b8      	blx	r7
 8005a34:	3001      	adds	r0, #1
 8005a36:	d12b      	bne.n	8005a90 <_printf_float+0x23c>
 8005a38:	e767      	b.n	800590a <_printf_float+0xb6>
 8005a3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a3e:	f240 80dd 	bls.w	8005bfc <_printf_float+0x3a8>
 8005a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f7fb f865 	bl	8000b18 <__aeabi_dcmpeq>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d033      	beq.n	8005aba <_printf_float+0x266>
 8005a52:	4a37      	ldr	r2, [pc, #220]	@ (8005b30 <_printf_float+0x2dc>)
 8005a54:	2301      	movs	r3, #1
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f af54 	beq.w	800590a <_printf_float+0xb6>
 8005a62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a66:	4543      	cmp	r3, r8
 8005a68:	db02      	blt.n	8005a70 <_printf_float+0x21c>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	07d8      	lsls	r0, r3, #31
 8005a6e:	d50f      	bpl.n	8005a90 <_printf_float+0x23c>
 8005a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f af45 	beq.w	800590a <_printf_float+0xb6>
 8005a80:	f04f 0900 	mov.w	r9, #0
 8005a84:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a88:	f104 0a1a 	add.w	sl, r4, #26
 8005a8c:	45c8      	cmp	r8, r9
 8005a8e:	dc09      	bgt.n	8005aa4 <_printf_float+0x250>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	079b      	lsls	r3, r3, #30
 8005a94:	f100 8103 	bmi.w	8005c9e <_printf_float+0x44a>
 8005a98:	68e0      	ldr	r0, [r4, #12]
 8005a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a9c:	4298      	cmp	r0, r3
 8005a9e:	bfb8      	it	lt
 8005aa0:	4618      	movlt	r0, r3
 8005aa2:	e734      	b.n	800590e <_printf_float+0xba>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af2b 	beq.w	800590a <_printf_float+0xb6>
 8005ab4:	f109 0901 	add.w	r9, r9, #1
 8005ab8:	e7e8      	b.n	8005a8c <_printf_float+0x238>
 8005aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dc39      	bgt.n	8005b34 <_printf_float+0x2e0>
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b30 <_printf_float+0x2dc>)
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f af1d 	beq.w	800590a <_printf_float+0xb6>
 8005ad0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ad4:	ea59 0303 	orrs.w	r3, r9, r3
 8005ad8:	d102      	bne.n	8005ae0 <_printf_float+0x28c>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	07d9      	lsls	r1, r3, #31
 8005ade:	d5d7      	bpl.n	8005a90 <_printf_float+0x23c>
 8005ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af0d 	beq.w	800590a <_printf_float+0xb6>
 8005af0:	f04f 0a00 	mov.w	sl, #0
 8005af4:	f104 0b1a 	add.w	fp, r4, #26
 8005af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afa:	425b      	negs	r3, r3
 8005afc:	4553      	cmp	r3, sl
 8005afe:	dc01      	bgt.n	8005b04 <_printf_float+0x2b0>
 8005b00:	464b      	mov	r3, r9
 8005b02:	e793      	b.n	8005a2c <_printf_float+0x1d8>
 8005b04:	2301      	movs	r3, #1
 8005b06:	465a      	mov	r2, fp
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f aefb 	beq.w	800590a <_printf_float+0xb6>
 8005b14:	f10a 0a01 	add.w	sl, sl, #1
 8005b18:	e7ee      	b.n	8005af8 <_printf_float+0x2a4>
 8005b1a:	bf00      	nop
 8005b1c:	7fefffff 	.word	0x7fefffff
 8005b20:	080084a4 	.word	0x080084a4
 8005b24:	080084a8 	.word	0x080084a8
 8005b28:	080084ac 	.word	0x080084ac
 8005b2c:	080084b0 	.word	0x080084b0
 8005b30:	080084b4 	.word	0x080084b4
 8005b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b3a:	4553      	cmp	r3, sl
 8005b3c:	bfa8      	it	ge
 8005b3e:	4653      	movge	r3, sl
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	4699      	mov	r9, r3
 8005b44:	dc36      	bgt.n	8005bb4 <_printf_float+0x360>
 8005b46:	f04f 0b00 	mov.w	fp, #0
 8005b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b4e:	f104 021a 	add.w	r2, r4, #26
 8005b52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b54:	9306      	str	r3, [sp, #24]
 8005b56:	eba3 0309 	sub.w	r3, r3, r9
 8005b5a:	455b      	cmp	r3, fp
 8005b5c:	dc31      	bgt.n	8005bc2 <_printf_float+0x36e>
 8005b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b60:	459a      	cmp	sl, r3
 8005b62:	dc3a      	bgt.n	8005bda <_printf_float+0x386>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	07da      	lsls	r2, r3, #31
 8005b68:	d437      	bmi.n	8005bda <_printf_float+0x386>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b6c:	ebaa 0903 	sub.w	r9, sl, r3
 8005b70:	9b06      	ldr	r3, [sp, #24]
 8005b72:	ebaa 0303 	sub.w	r3, sl, r3
 8005b76:	4599      	cmp	r9, r3
 8005b78:	bfa8      	it	ge
 8005b7a:	4699      	movge	r9, r3
 8005b7c:	f1b9 0f00 	cmp.w	r9, #0
 8005b80:	dc33      	bgt.n	8005bea <_printf_float+0x396>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b8a:	f104 0b1a 	add.w	fp, r4, #26
 8005b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b90:	ebaa 0303 	sub.w	r3, sl, r3
 8005b94:	eba3 0309 	sub.w	r3, r3, r9
 8005b98:	4543      	cmp	r3, r8
 8005b9a:	f77f af79 	ble.w	8005a90 <_printf_float+0x23c>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	465a      	mov	r2, fp
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f aeae 	beq.w	800590a <_printf_float+0xb6>
 8005bae:	f108 0801 	add.w	r8, r8, #1
 8005bb2:	e7ec      	b.n	8005b8e <_printf_float+0x33a>
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d1c2      	bne.n	8005b46 <_printf_float+0x2f2>
 8005bc0:	e6a3      	b.n	800590a <_printf_float+0xb6>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	9206      	str	r2, [sp, #24]
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae9c 	beq.w	800590a <_printf_float+0xb6>
 8005bd2:	9a06      	ldr	r2, [sp, #24]
 8005bd4:	f10b 0b01 	add.w	fp, fp, #1
 8005bd8:	e7bb      	b.n	8005b52 <_printf_float+0x2fe>
 8005bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	d1c0      	bne.n	8005b6a <_printf_float+0x316>
 8005be8:	e68f      	b.n	800590a <_printf_float+0xb6>
 8005bea:	9a06      	ldr	r2, [sp, #24]
 8005bec:	464b      	mov	r3, r9
 8005bee:	4442      	add	r2, r8
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d1c3      	bne.n	8005b82 <_printf_float+0x32e>
 8005bfa:	e686      	b.n	800590a <_printf_float+0xb6>
 8005bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c00:	f1ba 0f01 	cmp.w	sl, #1
 8005c04:	dc01      	bgt.n	8005c0a <_printf_float+0x3b6>
 8005c06:	07db      	lsls	r3, r3, #31
 8005c08:	d536      	bpl.n	8005c78 <_printf_float+0x424>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f ae78 	beq.w	800590a <_printf_float+0xb6>
 8005c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae70 	beq.w	800590a <_printf_float+0xb6>
 8005c2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c36:	f7fa ff6f 	bl	8000b18 <__aeabi_dcmpeq>
 8005c3a:	b9c0      	cbnz	r0, 8005c6e <_printf_float+0x41a>
 8005c3c:	4653      	mov	r3, sl
 8005c3e:	f108 0201 	add.w	r2, r8, #1
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d10c      	bne.n	8005c66 <_printf_float+0x412>
 8005c4c:	e65d      	b.n	800590a <_printf_float+0xb6>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	465a      	mov	r2, fp
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f ae56 	beq.w	800590a <_printf_float+0xb6>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	45d0      	cmp	r8, sl
 8005c64:	dbf3      	blt.n	8005c4e <_printf_float+0x3fa>
 8005c66:	464b      	mov	r3, r9
 8005c68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c6c:	e6df      	b.n	8005a2e <_printf_float+0x1da>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	f104 0b1a 	add.w	fp, r4, #26
 8005c76:	e7f4      	b.n	8005c62 <_printf_float+0x40e>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	e7e1      	b.n	8005c42 <_printf_float+0x3ee>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	464a      	mov	r2, r9
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f ae3e 	beq.w	800590a <_printf_float+0xb6>
 8005c8e:	f108 0801 	add.w	r8, r8, #1
 8005c92:	68e3      	ldr	r3, [r4, #12]
 8005c94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c96:	1a5b      	subs	r3, r3, r1
 8005c98:	4543      	cmp	r3, r8
 8005c9a:	dcf0      	bgt.n	8005c7e <_printf_float+0x42a>
 8005c9c:	e6fc      	b.n	8005a98 <_printf_float+0x244>
 8005c9e:	f04f 0800 	mov.w	r8, #0
 8005ca2:	f104 0919 	add.w	r9, r4, #25
 8005ca6:	e7f4      	b.n	8005c92 <_printf_float+0x43e>

08005ca8 <_printf_common>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	4616      	mov	r6, r2
 8005cae:	4698      	mov	r8, r3
 8005cb0:	688a      	ldr	r2, [r1, #8]
 8005cb2:	690b      	ldr	r3, [r1, #16]
 8005cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	bfb8      	it	lt
 8005cbc:	4613      	movlt	r3, r2
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b10a      	cbz	r2, 8005cce <_printf_common+0x26>
 8005cca:	3301      	adds	r3, #1
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	0699      	lsls	r1, r3, #26
 8005cd2:	bf42      	ittt	mi
 8005cd4:	6833      	ldrmi	r3, [r6, #0]
 8005cd6:	3302      	addmi	r3, #2
 8005cd8:	6033      	strmi	r3, [r6, #0]
 8005cda:	6825      	ldr	r5, [r4, #0]
 8005cdc:	f015 0506 	ands.w	r5, r5, #6
 8005ce0:	d106      	bne.n	8005cf0 <_printf_common+0x48>
 8005ce2:	f104 0a19 	add.w	sl, r4, #25
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	6832      	ldr	r2, [r6, #0]
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dc26      	bgt.n	8005d3e <_printf_common+0x96>
 8005cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	3b00      	subs	r3, #0
 8005cf8:	bf18      	it	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	0692      	lsls	r2, r2, #26
 8005cfe:	d42b      	bmi.n	8005d58 <_printf_common+0xb0>
 8005d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d04:	4641      	mov	r1, r8
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c8      	blx	r9
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d01e      	beq.n	8005d4c <_printf_common+0xa4>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6922      	ldr	r2, [r4, #16]
 8005d12:	f003 0306 	and.w	r3, r3, #6
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	bf02      	ittt	eq
 8005d1a:	68e5      	ldreq	r5, [r4, #12]
 8005d1c:	6833      	ldreq	r3, [r6, #0]
 8005d1e:	1aed      	subeq	r5, r5, r3
 8005d20:	68a3      	ldr	r3, [r4, #8]
 8005d22:	bf0c      	ite	eq
 8005d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d28:	2500      	movne	r5, #0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	bfc4      	itt	gt
 8005d2e:	1a9b      	subgt	r3, r3, r2
 8005d30:	18ed      	addgt	r5, r5, r3
 8005d32:	2600      	movs	r6, #0
 8005d34:	341a      	adds	r4, #26
 8005d36:	42b5      	cmp	r5, r6
 8005d38:	d11a      	bne.n	8005d70 <_printf_common+0xc8>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e008      	b.n	8005d50 <_printf_common+0xa8>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4652      	mov	r2, sl
 8005d42:	4641      	mov	r1, r8
 8005d44:	4638      	mov	r0, r7
 8005d46:	47c8      	blx	r9
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d103      	bne.n	8005d54 <_printf_common+0xac>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	3501      	adds	r5, #1
 8005d56:	e7c6      	b.n	8005ce6 <_printf_common+0x3e>
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	2030      	movs	r0, #48	@ 0x30
 8005d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d62:	4422      	add	r2, r4
 8005d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	e7c7      	b.n	8005d00 <_printf_common+0x58>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4622      	mov	r2, r4
 8005d74:	4641      	mov	r1, r8
 8005d76:	4638      	mov	r0, r7
 8005d78:	47c8      	blx	r9
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d0e6      	beq.n	8005d4c <_printf_common+0xa4>
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7d9      	b.n	8005d36 <_printf_common+0x8e>
	...

08005d84 <_printf_i>:
 8005d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	7e0f      	ldrb	r7, [r1, #24]
 8005d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d8c:	2f78      	cmp	r7, #120	@ 0x78
 8005d8e:	4691      	mov	r9, r2
 8005d90:	4680      	mov	r8, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	469a      	mov	sl, r3
 8005d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d9a:	d807      	bhi.n	8005dac <_printf_i+0x28>
 8005d9c:	2f62      	cmp	r7, #98	@ 0x62
 8005d9e:	d80a      	bhi.n	8005db6 <_printf_i+0x32>
 8005da0:	2f00      	cmp	r7, #0
 8005da2:	f000 80d2 	beq.w	8005f4a <_printf_i+0x1c6>
 8005da6:	2f58      	cmp	r7, #88	@ 0x58
 8005da8:	f000 80b9 	beq.w	8005f1e <_printf_i+0x19a>
 8005dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005db4:	e03a      	b.n	8005e2c <_printf_i+0xa8>
 8005db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dba:	2b15      	cmp	r3, #21
 8005dbc:	d8f6      	bhi.n	8005dac <_printf_i+0x28>
 8005dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8005dc4 <_printf_i+0x40>)
 8005dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dc4:	08005e1d 	.word	0x08005e1d
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005dad 	.word	0x08005dad
 8005dd0:	08005dad 	.word	0x08005dad
 8005dd4:	08005dad 	.word	0x08005dad
 8005dd8:	08005dad 	.word	0x08005dad
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005dad 	.word	0x08005dad
 8005de4:	08005dad 	.word	0x08005dad
 8005de8:	08005dad 	.word	0x08005dad
 8005dec:	08005dad 	.word	0x08005dad
 8005df0:	08005f31 	.word	0x08005f31
 8005df4:	08005e5b 	.word	0x08005e5b
 8005df8:	08005eeb 	.word	0x08005eeb
 8005dfc:	08005dad 	.word	0x08005dad
 8005e00:	08005dad 	.word	0x08005dad
 8005e04:	08005f53 	.word	0x08005f53
 8005e08:	08005dad 	.word	0x08005dad
 8005e0c:	08005e5b 	.word	0x08005e5b
 8005e10:	08005dad 	.word	0x08005dad
 8005e14:	08005dad 	.word	0x08005dad
 8005e18:	08005ef3 	.word	0x08005ef3
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6032      	str	r2, [r6, #0]
 8005e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e09d      	b.n	8005f6c <_printf_i+0x1e8>
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6031      	str	r1, [r6, #0]
 8005e38:	0606      	lsls	r6, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xbc>
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	e003      	b.n	8005e48 <_printf_i+0xc4>
 8005e40:	0645      	lsls	r5, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xb8>
 8005e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	da03      	bge.n	8005e54 <_printf_i+0xd0>
 8005e4c:	232d      	movs	r3, #45	@ 0x2d
 8005e4e:	426d      	negs	r5, r5
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e54:	4859      	ldr	r0, [pc, #356]	@ (8005fbc <_printf_i+0x238>)
 8005e56:	230a      	movs	r3, #10
 8005e58:	e011      	b.n	8005e7e <_printf_i+0xfa>
 8005e5a:	6821      	ldr	r1, [r4, #0]
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	0608      	lsls	r0, r1, #24
 8005e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e64:	d402      	bmi.n	8005e6c <_printf_i+0xe8>
 8005e66:	0649      	lsls	r1, r1, #25
 8005e68:	bf48      	it	mi
 8005e6a:	b2ad      	uxthmi	r5, r5
 8005e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e6e:	4853      	ldr	r0, [pc, #332]	@ (8005fbc <_printf_i+0x238>)
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	bf14      	ite	ne
 8005e74:	230a      	movne	r3, #10
 8005e76:	2308      	moveq	r3, #8
 8005e78:	2100      	movs	r1, #0
 8005e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e7e:	6866      	ldr	r6, [r4, #4]
 8005e80:	60a6      	str	r6, [r4, #8]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	bfa2      	ittt	ge
 8005e86:	6821      	ldrge	r1, [r4, #0]
 8005e88:	f021 0104 	bicge.w	r1, r1, #4
 8005e8c:	6021      	strge	r1, [r4, #0]
 8005e8e:	b90d      	cbnz	r5, 8005e94 <_printf_i+0x110>
 8005e90:	2e00      	cmp	r6, #0
 8005e92:	d04b      	beq.n	8005f2c <_printf_i+0x1a8>
 8005e94:	4616      	mov	r6, r2
 8005e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e9e:	5dc7      	ldrb	r7, [r0, r7]
 8005ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ea4:	462f      	mov	r7, r5
 8005ea6:	42bb      	cmp	r3, r7
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	d9f4      	bls.n	8005e96 <_printf_i+0x112>
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d10b      	bne.n	8005ec8 <_printf_i+0x144>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	07df      	lsls	r7, r3, #31
 8005eb4:	d508      	bpl.n	8005ec8 <_printf_i+0x144>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	6861      	ldr	r1, [r4, #4]
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	bfde      	ittt	le
 8005ebe:	2330      	movle	r3, #48	@ 0x30
 8005ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ec8:	1b92      	subs	r2, r2, r6
 8005eca:	6122      	str	r2, [r4, #16]
 8005ecc:	f8cd a000 	str.w	sl, [sp]
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	aa03      	add	r2, sp, #12
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f7ff fee6 	bl	8005ca8 <_printf_common>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d14a      	bne.n	8005f76 <_printf_i+0x1f2>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	b004      	add	sp, #16
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f043 0320 	orr.w	r3, r3, #32
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	4833      	ldr	r0, [pc, #204]	@ (8005fc0 <_printf_i+0x23c>)
 8005ef4:	2778      	movs	r7, #120	@ 0x78
 8005ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6831      	ldr	r1, [r6, #0]
 8005efe:	061f      	lsls	r7, r3, #24
 8005f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f04:	d402      	bmi.n	8005f0c <_printf_i+0x188>
 8005f06:	065f      	lsls	r7, r3, #25
 8005f08:	bf48      	it	mi
 8005f0a:	b2ad      	uxthmi	r5, r5
 8005f0c:	6031      	str	r1, [r6, #0]
 8005f0e:	07d9      	lsls	r1, r3, #31
 8005f10:	bf44      	itt	mi
 8005f12:	f043 0320 	orrmi.w	r3, r3, #32
 8005f16:	6023      	strmi	r3, [r4, #0]
 8005f18:	b11d      	cbz	r5, 8005f22 <_printf_i+0x19e>
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	e7ac      	b.n	8005e78 <_printf_i+0xf4>
 8005f1e:	4827      	ldr	r0, [pc, #156]	@ (8005fbc <_printf_i+0x238>)
 8005f20:	e7e9      	b.n	8005ef6 <_printf_i+0x172>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f023 0320 	bic.w	r3, r3, #32
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	e7f6      	b.n	8005f1a <_printf_i+0x196>
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	e7bd      	b.n	8005eac <_printf_i+0x128>
 8005f30:	6833      	ldr	r3, [r6, #0]
 8005f32:	6825      	ldr	r5, [r4, #0]
 8005f34:	6961      	ldr	r1, [r4, #20]
 8005f36:	1d18      	adds	r0, r3, #4
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	062e      	lsls	r6, r5, #24
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	d501      	bpl.n	8005f44 <_printf_i+0x1c0>
 8005f40:	6019      	str	r1, [r3, #0]
 8005f42:	e002      	b.n	8005f4a <_printf_i+0x1c6>
 8005f44:	0668      	lsls	r0, r5, #25
 8005f46:	d5fb      	bpl.n	8005f40 <_printf_i+0x1bc>
 8005f48:	8019      	strh	r1, [r3, #0]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	4616      	mov	r6, r2
 8005f50:	e7bc      	b.n	8005ecc <_printf_i+0x148>
 8005f52:	6833      	ldr	r3, [r6, #0]
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	6032      	str	r2, [r6, #0]
 8005f58:	681e      	ldr	r6, [r3, #0]
 8005f5a:	6862      	ldr	r2, [r4, #4]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7fa f95e 	bl	8000220 <memchr>
 8005f64:	b108      	cbz	r0, 8005f6a <_printf_i+0x1e6>
 8005f66:	1b80      	subs	r0, r0, r6
 8005f68:	6060      	str	r0, [r4, #4]
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	6123      	str	r3, [r4, #16]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f74:	e7aa      	b.n	8005ecc <_printf_i+0x148>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d0ad      	beq.n	8005ee0 <_printf_i+0x15c>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	079b      	lsls	r3, r3, #30
 8005f88:	d413      	bmi.n	8005fb2 <_printf_i+0x22e>
 8005f8a:	68e0      	ldr	r0, [r4, #12]
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	4298      	cmp	r0, r3
 8005f90:	bfb8      	it	lt
 8005f92:	4618      	movlt	r0, r3
 8005f94:	e7a6      	b.n	8005ee4 <_printf_i+0x160>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4632      	mov	r2, r6
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	47d0      	blx	sl
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d09d      	beq.n	8005ee0 <_printf_i+0x15c>
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	9903      	ldr	r1, [sp, #12]
 8005faa:	1a5b      	subs	r3, r3, r1
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	dcf2      	bgt.n	8005f96 <_printf_i+0x212>
 8005fb0:	e7eb      	b.n	8005f8a <_printf_i+0x206>
 8005fb2:	2500      	movs	r5, #0
 8005fb4:	f104 0619 	add.w	r6, r4, #25
 8005fb8:	e7f5      	b.n	8005fa6 <_printf_i+0x222>
 8005fba:	bf00      	nop
 8005fbc:	080084b6 	.word	0x080084b6
 8005fc0:	080084c7 	.word	0x080084c7

08005fc4 <std>:
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	4604      	mov	r4, r0
 8005fca:	e9c0 3300 	strd	r3, r3, [r0]
 8005fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fd2:	6083      	str	r3, [r0, #8]
 8005fd4:	8181      	strh	r1, [r0, #12]
 8005fd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fd8:	81c2      	strh	r2, [r0, #14]
 8005fda:	6183      	str	r3, [r0, #24]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	2208      	movs	r2, #8
 8005fe0:	305c      	adds	r0, #92	@ 0x5c
 8005fe2:	f000 f914 	bl	800620e <memset>
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <std+0x58>)
 8005fe8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fea:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <std+0x5c>)
 8005fec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fee:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <std+0x60>)
 8005ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <std+0x64>)
 8005ff4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <std+0x68>)
 8005ff8:	6224      	str	r4, [r4, #32]
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d006      	beq.n	800600c <std+0x48>
 8005ffe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006002:	4294      	cmp	r4, r2
 8006004:	d002      	beq.n	800600c <std+0x48>
 8006006:	33d0      	adds	r3, #208	@ 0xd0
 8006008:	429c      	cmp	r4, r3
 800600a:	d105      	bne.n	8006018 <std+0x54>
 800600c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f000 b978 	b.w	8006308 <__retarget_lock_init_recursive>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	08006189 	.word	0x08006189
 8006020:	080061ab 	.word	0x080061ab
 8006024:	080061e3 	.word	0x080061e3
 8006028:	08006207 	.word	0x08006207
 800602c:	20000488 	.word	0x20000488

08006030 <stdio_exit_handler>:
 8006030:	4a02      	ldr	r2, [pc, #8]	@ (800603c <stdio_exit_handler+0xc>)
 8006032:	4903      	ldr	r1, [pc, #12]	@ (8006040 <stdio_exit_handler+0x10>)
 8006034:	4803      	ldr	r0, [pc, #12]	@ (8006044 <stdio_exit_handler+0x14>)
 8006036:	f000 b869 	b.w	800610c <_fwalk_sglue>
 800603a:	bf00      	nop
 800603c:	2000000c 	.word	0x2000000c
 8006040:	08007c65 	.word	0x08007c65
 8006044:	2000001c 	.word	0x2000001c

08006048 <cleanup_stdio>:
 8006048:	6841      	ldr	r1, [r0, #4]
 800604a:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <cleanup_stdio+0x34>)
 800604c:	4299      	cmp	r1, r3
 800604e:	b510      	push	{r4, lr}
 8006050:	4604      	mov	r4, r0
 8006052:	d001      	beq.n	8006058 <cleanup_stdio+0x10>
 8006054:	f001 fe06 	bl	8007c64 <_fflush_r>
 8006058:	68a1      	ldr	r1, [r4, #8]
 800605a:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <cleanup_stdio+0x38>)
 800605c:	4299      	cmp	r1, r3
 800605e:	d002      	beq.n	8006066 <cleanup_stdio+0x1e>
 8006060:	4620      	mov	r0, r4
 8006062:	f001 fdff 	bl	8007c64 <_fflush_r>
 8006066:	68e1      	ldr	r1, [r4, #12]
 8006068:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <cleanup_stdio+0x3c>)
 800606a:	4299      	cmp	r1, r3
 800606c:	d004      	beq.n	8006078 <cleanup_stdio+0x30>
 800606e:	4620      	mov	r0, r4
 8006070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006074:	f001 bdf6 	b.w	8007c64 <_fflush_r>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	20000488 	.word	0x20000488
 8006080:	200004f0 	.word	0x200004f0
 8006084:	20000558 	.word	0x20000558

08006088 <global_stdio_init.part.0>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <global_stdio_init.part.0+0x30>)
 800608c:	4c0b      	ldr	r4, [pc, #44]	@ (80060bc <global_stdio_init.part.0+0x34>)
 800608e:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <global_stdio_init.part.0+0x38>)
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4620      	mov	r0, r4
 8006094:	2200      	movs	r2, #0
 8006096:	2104      	movs	r1, #4
 8006098:	f7ff ff94 	bl	8005fc4 <std>
 800609c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060a0:	2201      	movs	r2, #1
 80060a2:	2109      	movs	r1, #9
 80060a4:	f7ff ff8e 	bl	8005fc4 <std>
 80060a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060ac:	2202      	movs	r2, #2
 80060ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b2:	2112      	movs	r1, #18
 80060b4:	f7ff bf86 	b.w	8005fc4 <std>
 80060b8:	200005c0 	.word	0x200005c0
 80060bc:	20000488 	.word	0x20000488
 80060c0:	08006031 	.word	0x08006031

080060c4 <__sfp_lock_acquire>:
 80060c4:	4801      	ldr	r0, [pc, #4]	@ (80060cc <__sfp_lock_acquire+0x8>)
 80060c6:	f000 b920 	b.w	800630a <__retarget_lock_acquire_recursive>
 80060ca:	bf00      	nop
 80060cc:	200005c9 	.word	0x200005c9

080060d0 <__sfp_lock_release>:
 80060d0:	4801      	ldr	r0, [pc, #4]	@ (80060d8 <__sfp_lock_release+0x8>)
 80060d2:	f000 b91b 	b.w	800630c <__retarget_lock_release_recursive>
 80060d6:	bf00      	nop
 80060d8:	200005c9 	.word	0x200005c9

080060dc <__sinit>:
 80060dc:	b510      	push	{r4, lr}
 80060de:	4604      	mov	r4, r0
 80060e0:	f7ff fff0 	bl	80060c4 <__sfp_lock_acquire>
 80060e4:	6a23      	ldr	r3, [r4, #32]
 80060e6:	b11b      	cbz	r3, 80060f0 <__sinit+0x14>
 80060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ec:	f7ff bff0 	b.w	80060d0 <__sfp_lock_release>
 80060f0:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <__sinit+0x28>)
 80060f2:	6223      	str	r3, [r4, #32]
 80060f4:	4b04      	ldr	r3, [pc, #16]	@ (8006108 <__sinit+0x2c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f5      	bne.n	80060e8 <__sinit+0xc>
 80060fc:	f7ff ffc4 	bl	8006088 <global_stdio_init.part.0>
 8006100:	e7f2      	b.n	80060e8 <__sinit+0xc>
 8006102:	bf00      	nop
 8006104:	08006049 	.word	0x08006049
 8006108:	200005c0 	.word	0x200005c0

0800610c <_fwalk_sglue>:
 800610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006110:	4607      	mov	r7, r0
 8006112:	4688      	mov	r8, r1
 8006114:	4614      	mov	r4, r2
 8006116:	2600      	movs	r6, #0
 8006118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800611c:	f1b9 0901 	subs.w	r9, r9, #1
 8006120:	d505      	bpl.n	800612e <_fwalk_sglue+0x22>
 8006122:	6824      	ldr	r4, [r4, #0]
 8006124:	2c00      	cmp	r4, #0
 8006126:	d1f7      	bne.n	8006118 <_fwalk_sglue+0xc>
 8006128:	4630      	mov	r0, r6
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d907      	bls.n	8006144 <_fwalk_sglue+0x38>
 8006134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006138:	3301      	adds	r3, #1
 800613a:	d003      	beq.n	8006144 <_fwalk_sglue+0x38>
 800613c:	4629      	mov	r1, r5
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	4306      	orrs	r6, r0
 8006144:	3568      	adds	r5, #104	@ 0x68
 8006146:	e7e9      	b.n	800611c <_fwalk_sglue+0x10>

08006148 <siprintf>:
 8006148:	b40e      	push	{r1, r2, r3}
 800614a:	b500      	push	{lr}
 800614c:	b09c      	sub	sp, #112	@ 0x70
 800614e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006158:	4809      	ldr	r0, [pc, #36]	@ (8006180 <siprintf+0x38>)
 800615a:	9107      	str	r1, [sp, #28]
 800615c:	9104      	str	r1, [sp, #16]
 800615e:	4909      	ldr	r1, [pc, #36]	@ (8006184 <siprintf+0x3c>)
 8006160:	f853 2b04 	ldr.w	r2, [r3], #4
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	a902      	add	r1, sp, #8
 800616c:	f001 fbfa 	bl	8007964 <_svfiprintf_r>
 8006170:	9b02      	ldr	r3, [sp, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	b01c      	add	sp, #112	@ 0x70
 8006178:	f85d eb04 	ldr.w	lr, [sp], #4
 800617c:	b003      	add	sp, #12
 800617e:	4770      	bx	lr
 8006180:	20000018 	.word	0x20000018
 8006184:	ffff0208 	.word	0xffff0208

08006188 <__sread>:
 8006188:	b510      	push	{r4, lr}
 800618a:	460c      	mov	r4, r1
 800618c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006190:	f000 f86c 	bl	800626c <_read_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	bfab      	itete	ge
 8006198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800619a:	89a3      	ldrhlt	r3, [r4, #12]
 800619c:	181b      	addge	r3, r3, r0
 800619e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061a2:	bfac      	ite	ge
 80061a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061a6:	81a3      	strhlt	r3, [r4, #12]
 80061a8:	bd10      	pop	{r4, pc}

080061aa <__swrite>:
 80061aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	461f      	mov	r7, r3
 80061b0:	898b      	ldrh	r3, [r1, #12]
 80061b2:	05db      	lsls	r3, r3, #23
 80061b4:	4605      	mov	r5, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	4616      	mov	r6, r2
 80061ba:	d505      	bpl.n	80061c8 <__swrite+0x1e>
 80061bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c0:	2302      	movs	r3, #2
 80061c2:	2200      	movs	r2, #0
 80061c4:	f000 f840 	bl	8006248 <_lseek_r>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	4632      	mov	r2, r6
 80061d6:	463b      	mov	r3, r7
 80061d8:	4628      	mov	r0, r5
 80061da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061de:	f000 b857 	b.w	8006290 <_write_r>

080061e2 <__sseek>:
 80061e2:	b510      	push	{r4, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ea:	f000 f82d 	bl	8006248 <_lseek_r>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	bf15      	itete	ne
 80061f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061fe:	81a3      	strheq	r3, [r4, #12]
 8006200:	bf18      	it	ne
 8006202:	81a3      	strhne	r3, [r4, #12]
 8006204:	bd10      	pop	{r4, pc}

08006206 <__sclose>:
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 b80d 	b.w	8006228 <_close_r>

0800620e <memset>:
 800620e:	4402      	add	r2, r0
 8006210:	4603      	mov	r3, r0
 8006212:	4293      	cmp	r3, r2
 8006214:	d100      	bne.n	8006218 <memset+0xa>
 8006216:	4770      	bx	lr
 8006218:	f803 1b01 	strb.w	r1, [r3], #1
 800621c:	e7f9      	b.n	8006212 <memset+0x4>
	...

08006220 <_localeconv_r>:
 8006220:	4800      	ldr	r0, [pc, #0]	@ (8006224 <_localeconv_r+0x4>)
 8006222:	4770      	bx	lr
 8006224:	20000158 	.word	0x20000158

08006228 <_close_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_close_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fc f8cd 	bl	80023d2 <_close>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_close_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_close_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200005c4 	.word	0x200005c4

08006248 <_lseek_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	@ (8006268 <_lseek_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fc f8e2 	bl	8002420 <_lseek>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_lseek_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_lseek_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	200005c4 	.word	0x200005c4

0800626c <_read_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	@ (800628c <_read_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fc f870 	bl	8002360 <_read>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_read_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_read_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	200005c4 	.word	0x200005c4

08006290 <_write_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_write_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fc f87b 	bl	800239a <_write>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_write_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_write_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	200005c4 	.word	0x200005c4

080062b4 <__errno>:
 80062b4:	4b01      	ldr	r3, [pc, #4]	@ (80062bc <__errno+0x8>)
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000018 	.word	0x20000018

080062c0 <__libc_init_array>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4d0d      	ldr	r5, [pc, #52]	@ (80062f8 <__libc_init_array+0x38>)
 80062c4:	4c0d      	ldr	r4, [pc, #52]	@ (80062fc <__libc_init_array+0x3c>)
 80062c6:	1b64      	subs	r4, r4, r5
 80062c8:	10a4      	asrs	r4, r4, #2
 80062ca:	2600      	movs	r6, #0
 80062cc:	42a6      	cmp	r6, r4
 80062ce:	d109      	bne.n	80062e4 <__libc_init_array+0x24>
 80062d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006300 <__libc_init_array+0x40>)
 80062d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006304 <__libc_init_array+0x44>)
 80062d4:	f002 f864 	bl	80083a0 <_init>
 80062d8:	1b64      	subs	r4, r4, r5
 80062da:	10a4      	asrs	r4, r4, #2
 80062dc:	2600      	movs	r6, #0
 80062de:	42a6      	cmp	r6, r4
 80062e0:	d105      	bne.n	80062ee <__libc_init_array+0x2e>
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e8:	4798      	blx	r3
 80062ea:	3601      	adds	r6, #1
 80062ec:	e7ee      	b.n	80062cc <__libc_init_array+0xc>
 80062ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f2:	4798      	blx	r3
 80062f4:	3601      	adds	r6, #1
 80062f6:	e7f2      	b.n	80062de <__libc_init_array+0x1e>
 80062f8:	08008820 	.word	0x08008820
 80062fc:	08008820 	.word	0x08008820
 8006300:	08008820 	.word	0x08008820
 8006304:	08008824 	.word	0x08008824

08006308 <__retarget_lock_init_recursive>:
 8006308:	4770      	bx	lr

0800630a <__retarget_lock_acquire_recursive>:
 800630a:	4770      	bx	lr

0800630c <__retarget_lock_release_recursive>:
 800630c:	4770      	bx	lr

0800630e <quorem>:
 800630e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006312:	6903      	ldr	r3, [r0, #16]
 8006314:	690c      	ldr	r4, [r1, #16]
 8006316:	42a3      	cmp	r3, r4
 8006318:	4607      	mov	r7, r0
 800631a:	db7e      	blt.n	800641a <quorem+0x10c>
 800631c:	3c01      	subs	r4, #1
 800631e:	f101 0814 	add.w	r8, r1, #20
 8006322:	00a3      	lsls	r3, r4, #2
 8006324:	f100 0514 	add.w	r5, r0, #20
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006338:	3301      	adds	r3, #1
 800633a:	429a      	cmp	r2, r3
 800633c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006340:	fbb2 f6f3 	udiv	r6, r2, r3
 8006344:	d32e      	bcc.n	80063a4 <quorem+0x96>
 8006346:	f04f 0a00 	mov.w	sl, #0
 800634a:	46c4      	mov	ip, r8
 800634c:	46ae      	mov	lr, r5
 800634e:	46d3      	mov	fp, sl
 8006350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006354:	b298      	uxth	r0, r3
 8006356:	fb06 a000 	mla	r0, r6, r0, sl
 800635a:	0c02      	lsrs	r2, r0, #16
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	fb06 2303 	mla	r3, r6, r3, r2
 8006362:	f8de 2000 	ldr.w	r2, [lr]
 8006366:	b280      	uxth	r0, r0
 8006368:	b292      	uxth	r2, r2
 800636a:	1a12      	subs	r2, r2, r0
 800636c:	445a      	add	r2, fp
 800636e:	f8de 0000 	ldr.w	r0, [lr]
 8006372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006376:	b29b      	uxth	r3, r3
 8006378:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800637c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006380:	b292      	uxth	r2, r2
 8006382:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006386:	45e1      	cmp	r9, ip
 8006388:	f84e 2b04 	str.w	r2, [lr], #4
 800638c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006390:	d2de      	bcs.n	8006350 <quorem+0x42>
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	58eb      	ldr	r3, [r5, r3]
 8006396:	b92b      	cbnz	r3, 80063a4 <quorem+0x96>
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	3b04      	subs	r3, #4
 800639c:	429d      	cmp	r5, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	d32f      	bcc.n	8006402 <quorem+0xf4>
 80063a2:	613c      	str	r4, [r7, #16]
 80063a4:	4638      	mov	r0, r7
 80063a6:	f001 f979 	bl	800769c <__mcmp>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	db25      	blt.n	80063fa <quorem+0xec>
 80063ae:	4629      	mov	r1, r5
 80063b0:	2000      	movs	r0, #0
 80063b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80063b6:	f8d1 c000 	ldr.w	ip, [r1]
 80063ba:	fa1f fe82 	uxth.w	lr, r2
 80063be:	fa1f f38c 	uxth.w	r3, ip
 80063c2:	eba3 030e 	sub.w	r3, r3, lr
 80063c6:	4403      	add	r3, r0
 80063c8:	0c12      	lsrs	r2, r2, #16
 80063ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d8:	45c1      	cmp	r9, r8
 80063da:	f841 3b04 	str.w	r3, [r1], #4
 80063de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063e2:	d2e6      	bcs.n	80063b2 <quorem+0xa4>
 80063e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ec:	b922      	cbnz	r2, 80063f8 <quorem+0xea>
 80063ee:	3b04      	subs	r3, #4
 80063f0:	429d      	cmp	r5, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	d30b      	bcc.n	800640e <quorem+0x100>
 80063f6:	613c      	str	r4, [r7, #16]
 80063f8:	3601      	adds	r6, #1
 80063fa:	4630      	mov	r0, r6
 80063fc:	b003      	add	sp, #12
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	3b04      	subs	r3, #4
 8006406:	2a00      	cmp	r2, #0
 8006408:	d1cb      	bne.n	80063a2 <quorem+0x94>
 800640a:	3c01      	subs	r4, #1
 800640c:	e7c6      	b.n	800639c <quorem+0x8e>
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	3b04      	subs	r3, #4
 8006412:	2a00      	cmp	r2, #0
 8006414:	d1ef      	bne.n	80063f6 <quorem+0xe8>
 8006416:	3c01      	subs	r4, #1
 8006418:	e7ea      	b.n	80063f0 <quorem+0xe2>
 800641a:	2000      	movs	r0, #0
 800641c:	e7ee      	b.n	80063fc <quorem+0xee>
	...

08006420 <_dtoa_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	69c7      	ldr	r7, [r0, #28]
 8006426:	b099      	sub	sp, #100	@ 0x64
 8006428:	ed8d 0b02 	vstr	d0, [sp, #8]
 800642c:	ec55 4b10 	vmov	r4, r5, d0
 8006430:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006432:	9109      	str	r1, [sp, #36]	@ 0x24
 8006434:	4683      	mov	fp, r0
 8006436:	920e      	str	r2, [sp, #56]	@ 0x38
 8006438:	9313      	str	r3, [sp, #76]	@ 0x4c
 800643a:	b97f      	cbnz	r7, 800645c <_dtoa_r+0x3c>
 800643c:	2010      	movs	r0, #16
 800643e:	f000 fdfd 	bl	800703c <malloc>
 8006442:	4602      	mov	r2, r0
 8006444:	f8cb 001c 	str.w	r0, [fp, #28]
 8006448:	b920      	cbnz	r0, 8006454 <_dtoa_r+0x34>
 800644a:	4ba7      	ldr	r3, [pc, #668]	@ (80066e8 <_dtoa_r+0x2c8>)
 800644c:	21ef      	movs	r1, #239	@ 0xef
 800644e:	48a7      	ldr	r0, [pc, #668]	@ (80066ec <_dtoa_r+0x2cc>)
 8006450:	f001 fc68 	bl	8007d24 <__assert_func>
 8006454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006458:	6007      	str	r7, [r0, #0]
 800645a:	60c7      	str	r7, [r0, #12]
 800645c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	b159      	cbz	r1, 800647c <_dtoa_r+0x5c>
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	604a      	str	r2, [r1, #4]
 8006468:	2301      	movs	r3, #1
 800646a:	4093      	lsls	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
 800646e:	4658      	mov	r0, fp
 8006470:	f000 feda 	bl	8007228 <_Bfree>
 8006474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	1e2b      	subs	r3, r5, #0
 800647e:	bfb9      	ittee	lt
 8006480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006484:	9303      	strlt	r3, [sp, #12]
 8006486:	2300      	movge	r3, #0
 8006488:	6033      	strge	r3, [r6, #0]
 800648a:	9f03      	ldr	r7, [sp, #12]
 800648c:	4b98      	ldr	r3, [pc, #608]	@ (80066f0 <_dtoa_r+0x2d0>)
 800648e:	bfbc      	itt	lt
 8006490:	2201      	movlt	r2, #1
 8006492:	6032      	strlt	r2, [r6, #0]
 8006494:	43bb      	bics	r3, r7
 8006496:	d112      	bne.n	80064be <_dtoa_r+0x9e>
 8006498:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800649a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064a4:	4323      	orrs	r3, r4
 80064a6:	f000 854d 	beq.w	8006f44 <_dtoa_r+0xb24>
 80064aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006704 <_dtoa_r+0x2e4>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 854f 	beq.w	8006f54 <_dtoa_r+0xb34>
 80064b6:	f10a 0303 	add.w	r3, sl, #3
 80064ba:	f000 bd49 	b.w	8006f50 <_dtoa_r+0xb30>
 80064be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	ec51 0b17 	vmov	r0, r1, d7
 80064c8:	2300      	movs	r3, #0
 80064ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80064ce:	f7fa fb23 	bl	8000b18 <__aeabi_dcmpeq>
 80064d2:	4680      	mov	r8, r0
 80064d4:	b158      	cbz	r0, 80064ee <_dtoa_r+0xce>
 80064d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064d8:	2301      	movs	r3, #1
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064de:	b113      	cbz	r3, 80064e6 <_dtoa_r+0xc6>
 80064e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80064e2:	4b84      	ldr	r3, [pc, #528]	@ (80066f4 <_dtoa_r+0x2d4>)
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006708 <_dtoa_r+0x2e8>
 80064ea:	f000 bd33 	b.w	8006f54 <_dtoa_r+0xb34>
 80064ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80064f2:	aa16      	add	r2, sp, #88	@ 0x58
 80064f4:	a917      	add	r1, sp, #92	@ 0x5c
 80064f6:	4658      	mov	r0, fp
 80064f8:	f001 f980 	bl	80077fc <__d2b>
 80064fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006500:	4681      	mov	r9, r0
 8006502:	2e00      	cmp	r6, #0
 8006504:	d077      	beq.n	80065f6 <_dtoa_r+0x1d6>
 8006506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006508:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800650c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800651c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006520:	4619      	mov	r1, r3
 8006522:	2200      	movs	r2, #0
 8006524:	4b74      	ldr	r3, [pc, #464]	@ (80066f8 <_dtoa_r+0x2d8>)
 8006526:	f7f9 fed7 	bl	80002d8 <__aeabi_dsub>
 800652a:	a369      	add	r3, pc, #420	@ (adr r3, 80066d0 <_dtoa_r+0x2b0>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7fa f88a 	bl	8000648 <__aeabi_dmul>
 8006534:	a368      	add	r3, pc, #416	@ (adr r3, 80066d8 <_dtoa_r+0x2b8>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fecf 	bl	80002dc <__adddf3>
 800653e:	4604      	mov	r4, r0
 8006540:	4630      	mov	r0, r6
 8006542:	460d      	mov	r5, r1
 8006544:	f7fa f816 	bl	8000574 <__aeabi_i2d>
 8006548:	a365      	add	r3, pc, #404	@ (adr r3, 80066e0 <_dtoa_r+0x2c0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7fa f87b 	bl	8000648 <__aeabi_dmul>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7f9 febf 	bl	80002dc <__adddf3>
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f7fa fb21 	bl	8000ba8 <__aeabi_d2iz>
 8006566:	2200      	movs	r2, #0
 8006568:	4607      	mov	r7, r0
 800656a:	2300      	movs	r3, #0
 800656c:	4620      	mov	r0, r4
 800656e:	4629      	mov	r1, r5
 8006570:	f7fa fadc 	bl	8000b2c <__aeabi_dcmplt>
 8006574:	b140      	cbz	r0, 8006588 <_dtoa_r+0x168>
 8006576:	4638      	mov	r0, r7
 8006578:	f7f9 fffc 	bl	8000574 <__aeabi_i2d>
 800657c:	4622      	mov	r2, r4
 800657e:	462b      	mov	r3, r5
 8006580:	f7fa faca 	bl	8000b18 <__aeabi_dcmpeq>
 8006584:	b900      	cbnz	r0, 8006588 <_dtoa_r+0x168>
 8006586:	3f01      	subs	r7, #1
 8006588:	2f16      	cmp	r7, #22
 800658a:	d851      	bhi.n	8006630 <_dtoa_r+0x210>
 800658c:	4b5b      	ldr	r3, [pc, #364]	@ (80066fc <_dtoa_r+0x2dc>)
 800658e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800659a:	f7fa fac7 	bl	8000b2c <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d048      	beq.n	8006634 <_dtoa_r+0x214>
 80065a2:	3f01      	subs	r7, #1
 80065a4:	2300      	movs	r3, #0
 80065a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80065a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065aa:	1b9b      	subs	r3, r3, r6
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	bf44      	itt	mi
 80065b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80065b4:	2300      	movmi	r3, #0
 80065b6:	9208      	str	r2, [sp, #32]
 80065b8:	bf54      	ite	pl
 80065ba:	f04f 0800 	movpl.w	r8, #0
 80065be:	9308      	strmi	r3, [sp, #32]
 80065c0:	2f00      	cmp	r7, #0
 80065c2:	db39      	blt.n	8006638 <_dtoa_r+0x218>
 80065c4:	9b08      	ldr	r3, [sp, #32]
 80065c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80065c8:	443b      	add	r3, r7
 80065ca:	9308      	str	r3, [sp, #32]
 80065cc:	2300      	movs	r3, #0
 80065ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d2:	2b09      	cmp	r3, #9
 80065d4:	d864      	bhi.n	80066a0 <_dtoa_r+0x280>
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	bfc4      	itt	gt
 80065da:	3b04      	subgt	r3, #4
 80065dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80065de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e0:	f1a3 0302 	sub.w	r3, r3, #2
 80065e4:	bfcc      	ite	gt
 80065e6:	2400      	movgt	r4, #0
 80065e8:	2401      	movle	r4, #1
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d863      	bhi.n	80066b6 <_dtoa_r+0x296>
 80065ee:	e8df f003 	tbb	[pc, r3]
 80065f2:	372a      	.short	0x372a
 80065f4:	5535      	.short	0x5535
 80065f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80065fa:	441e      	add	r6, r3
 80065fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006600:	2b20      	cmp	r3, #32
 8006602:	bfc1      	itttt	gt
 8006604:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006608:	409f      	lslgt	r7, r3
 800660a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800660e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006612:	bfd6      	itet	le
 8006614:	f1c3 0320 	rsble	r3, r3, #32
 8006618:	ea47 0003 	orrgt.w	r0, r7, r3
 800661c:	fa04 f003 	lslle.w	r0, r4, r3
 8006620:	f7f9 ff98 	bl	8000554 <__aeabi_ui2d>
 8006624:	2201      	movs	r2, #1
 8006626:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800662a:	3e01      	subs	r6, #1
 800662c:	9214      	str	r2, [sp, #80]	@ 0x50
 800662e:	e777      	b.n	8006520 <_dtoa_r+0x100>
 8006630:	2301      	movs	r3, #1
 8006632:	e7b8      	b.n	80065a6 <_dtoa_r+0x186>
 8006634:	9012      	str	r0, [sp, #72]	@ 0x48
 8006636:	e7b7      	b.n	80065a8 <_dtoa_r+0x188>
 8006638:	427b      	negs	r3, r7
 800663a:	930a      	str	r3, [sp, #40]	@ 0x28
 800663c:	2300      	movs	r3, #0
 800663e:	eba8 0807 	sub.w	r8, r8, r7
 8006642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006644:	e7c4      	b.n	80065d0 <_dtoa_r+0x1b0>
 8006646:	2300      	movs	r3, #0
 8006648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800664a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	dc35      	bgt.n	80066bc <_dtoa_r+0x29c>
 8006650:	2301      	movs	r3, #1
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	9307      	str	r3, [sp, #28]
 8006656:	461a      	mov	r2, r3
 8006658:	920e      	str	r2, [sp, #56]	@ 0x38
 800665a:	e00b      	b.n	8006674 <_dtoa_r+0x254>
 800665c:	2301      	movs	r3, #1
 800665e:	e7f3      	b.n	8006648 <_dtoa_r+0x228>
 8006660:	2300      	movs	r3, #0
 8006662:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	2b01      	cmp	r3, #1
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	bfb8      	it	lt
 8006672:	2301      	movlt	r3, #1
 8006674:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006678:	2100      	movs	r1, #0
 800667a:	2204      	movs	r2, #4
 800667c:	f102 0514 	add.w	r5, r2, #20
 8006680:	429d      	cmp	r5, r3
 8006682:	d91f      	bls.n	80066c4 <_dtoa_r+0x2a4>
 8006684:	6041      	str	r1, [r0, #4]
 8006686:	4658      	mov	r0, fp
 8006688:	f000 fd8e 	bl	80071a8 <_Balloc>
 800668c:	4682      	mov	sl, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d13c      	bne.n	800670c <_dtoa_r+0x2ec>
 8006692:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <_dtoa_r+0x2e0>)
 8006694:	4602      	mov	r2, r0
 8006696:	f240 11af 	movw	r1, #431	@ 0x1af
 800669a:	e6d8      	b.n	800644e <_dtoa_r+0x2e>
 800669c:	2301      	movs	r3, #1
 800669e:	e7e0      	b.n	8006662 <_dtoa_r+0x242>
 80066a0:	2401      	movs	r4, #1
 80066a2:	2300      	movs	r3, #0
 80066a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2312      	movs	r3, #18
 80066b4:	e7d0      	b.n	8006658 <_dtoa_r+0x238>
 80066b6:	2301      	movs	r3, #1
 80066b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ba:	e7f5      	b.n	80066a8 <_dtoa_r+0x288>
 80066bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	e7d7      	b.n	8006674 <_dtoa_r+0x254>
 80066c4:	3101      	adds	r1, #1
 80066c6:	0052      	lsls	r2, r2, #1
 80066c8:	e7d8      	b.n	800667c <_dtoa_r+0x25c>
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w
 80066d0:	636f4361 	.word	0x636f4361
 80066d4:	3fd287a7 	.word	0x3fd287a7
 80066d8:	8b60c8b3 	.word	0x8b60c8b3
 80066dc:	3fc68a28 	.word	0x3fc68a28
 80066e0:	509f79fb 	.word	0x509f79fb
 80066e4:	3fd34413 	.word	0x3fd34413
 80066e8:	080084e5 	.word	0x080084e5
 80066ec:	080084fc 	.word	0x080084fc
 80066f0:	7ff00000 	.word	0x7ff00000
 80066f4:	080084b5 	.word	0x080084b5
 80066f8:	3ff80000 	.word	0x3ff80000
 80066fc:	080085f8 	.word	0x080085f8
 8006700:	08008554 	.word	0x08008554
 8006704:	080084e1 	.word	0x080084e1
 8006708:	080084b4 	.word	0x080084b4
 800670c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006710:	6018      	str	r0, [r3, #0]
 8006712:	9b07      	ldr	r3, [sp, #28]
 8006714:	2b0e      	cmp	r3, #14
 8006716:	f200 80a4 	bhi.w	8006862 <_dtoa_r+0x442>
 800671a:	2c00      	cmp	r4, #0
 800671c:	f000 80a1 	beq.w	8006862 <_dtoa_r+0x442>
 8006720:	2f00      	cmp	r7, #0
 8006722:	dd33      	ble.n	800678c <_dtoa_r+0x36c>
 8006724:	4bad      	ldr	r3, [pc, #692]	@ (80069dc <_dtoa_r+0x5bc>)
 8006726:	f007 020f 	and.w	r2, r7, #15
 800672a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800672e:	ed93 7b00 	vldr	d7, [r3]
 8006732:	05f8      	lsls	r0, r7, #23
 8006734:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006738:	ea4f 1427 	mov.w	r4, r7, asr #4
 800673c:	d516      	bpl.n	800676c <_dtoa_r+0x34c>
 800673e:	4ba8      	ldr	r3, [pc, #672]	@ (80069e0 <_dtoa_r+0x5c0>)
 8006740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006748:	f7fa f8a8 	bl	800089c <__aeabi_ddiv>
 800674c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006750:	f004 040f 	and.w	r4, r4, #15
 8006754:	2603      	movs	r6, #3
 8006756:	4da2      	ldr	r5, [pc, #648]	@ (80069e0 <_dtoa_r+0x5c0>)
 8006758:	b954      	cbnz	r4, 8006770 <_dtoa_r+0x350>
 800675a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800675e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006762:	f7fa f89b 	bl	800089c <__aeabi_ddiv>
 8006766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676a:	e028      	b.n	80067be <_dtoa_r+0x39e>
 800676c:	2602      	movs	r6, #2
 800676e:	e7f2      	b.n	8006756 <_dtoa_r+0x336>
 8006770:	07e1      	lsls	r1, r4, #31
 8006772:	d508      	bpl.n	8006786 <_dtoa_r+0x366>
 8006774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006778:	e9d5 2300 	ldrd	r2, r3, [r5]
 800677c:	f7f9 ff64 	bl	8000648 <__aeabi_dmul>
 8006780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006784:	3601      	adds	r6, #1
 8006786:	1064      	asrs	r4, r4, #1
 8006788:	3508      	adds	r5, #8
 800678a:	e7e5      	b.n	8006758 <_dtoa_r+0x338>
 800678c:	f000 80d2 	beq.w	8006934 <_dtoa_r+0x514>
 8006790:	427c      	negs	r4, r7
 8006792:	4b92      	ldr	r3, [pc, #584]	@ (80069dc <_dtoa_r+0x5bc>)
 8006794:	4d92      	ldr	r5, [pc, #584]	@ (80069e0 <_dtoa_r+0x5c0>)
 8006796:	f004 020f 	and.w	r2, r4, #15
 800679a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067a6:	f7f9 ff4f 	bl	8000648 <__aeabi_dmul>
 80067aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ae:	1124      	asrs	r4, r4, #4
 80067b0:	2300      	movs	r3, #0
 80067b2:	2602      	movs	r6, #2
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	f040 80b2 	bne.w	800691e <_dtoa_r+0x4fe>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1d3      	bne.n	8006766 <_dtoa_r+0x346>
 80067be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80b7 	beq.w	8006938 <_dtoa_r+0x518>
 80067ca:	4b86      	ldr	r3, [pc, #536]	@ (80069e4 <_dtoa_r+0x5c4>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f9ab 	bl	8000b2c <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f000 80ae 	beq.w	8006938 <_dtoa_r+0x518>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80aa 	beq.w	8006938 <_dtoa_r+0x518>
 80067e4:	9b00      	ldr	r3, [sp, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dd37      	ble.n	800685a <_dtoa_r+0x43a>
 80067ea:	1e7b      	subs	r3, r7, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	4620      	mov	r0, r4
 80067f0:	4b7d      	ldr	r3, [pc, #500]	@ (80069e8 <_dtoa_r+0x5c8>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 ff27 	bl	8000648 <__aeabi_dmul>
 80067fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067fe:	9c00      	ldr	r4, [sp, #0]
 8006800:	3601      	adds	r6, #1
 8006802:	4630      	mov	r0, r6
 8006804:	f7f9 feb6 	bl	8000574 <__aeabi_i2d>
 8006808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800680c:	f7f9 ff1c 	bl	8000648 <__aeabi_dmul>
 8006810:	4b76      	ldr	r3, [pc, #472]	@ (80069ec <_dtoa_r+0x5cc>)
 8006812:	2200      	movs	r2, #0
 8006814:	f7f9 fd62 	bl	80002dc <__adddf3>
 8006818:	4605      	mov	r5, r0
 800681a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800681e:	2c00      	cmp	r4, #0
 8006820:	f040 808d 	bne.w	800693e <_dtoa_r+0x51e>
 8006824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006828:	4b71      	ldr	r3, [pc, #452]	@ (80069f0 <_dtoa_r+0x5d0>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd54 	bl	80002d8 <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006838:	462a      	mov	r2, r5
 800683a:	4633      	mov	r3, r6
 800683c:	f7fa f994 	bl	8000b68 <__aeabi_dcmpgt>
 8006840:	2800      	cmp	r0, #0
 8006842:	f040 828b 	bne.w	8006d5c <_dtoa_r+0x93c>
 8006846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800684a:	462a      	mov	r2, r5
 800684c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006850:	f7fa f96c 	bl	8000b2c <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f040 8128 	bne.w	8006aaa <_dtoa_r+0x68a>
 800685a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800685e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f2c0 815a 	blt.w	8006b1e <_dtoa_r+0x6fe>
 800686a:	2f0e      	cmp	r7, #14
 800686c:	f300 8157 	bgt.w	8006b1e <_dtoa_r+0x6fe>
 8006870:	4b5a      	ldr	r3, [pc, #360]	@ (80069dc <_dtoa_r+0x5bc>)
 8006872:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006876:	ed93 7b00 	vldr	d7, [r3]
 800687a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	ed8d 7b00 	vstr	d7, [sp]
 8006882:	da03      	bge.n	800688c <_dtoa_r+0x46c>
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f340 8101 	ble.w	8006a8e <_dtoa_r+0x66e>
 800688c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006890:	4656      	mov	r6, sl
 8006892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006896:	4620      	mov	r0, r4
 8006898:	4629      	mov	r1, r5
 800689a:	f7f9 ffff 	bl	800089c <__aeabi_ddiv>
 800689e:	f7fa f983 	bl	8000ba8 <__aeabi_d2iz>
 80068a2:	4680      	mov	r8, r0
 80068a4:	f7f9 fe66 	bl	8000574 <__aeabi_i2d>
 80068a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ac:	f7f9 fecc 	bl	8000648 <__aeabi_dmul>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068bc:	f7f9 fd0c 	bl	80002d8 <__aeabi_dsub>
 80068c0:	f806 4b01 	strb.w	r4, [r6], #1
 80068c4:	9d07      	ldr	r5, [sp, #28]
 80068c6:	eba6 040a 	sub.w	r4, r6, sl
 80068ca:	42a5      	cmp	r5, r4
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	f040 8117 	bne.w	8006b02 <_dtoa_r+0x6e2>
 80068d4:	f7f9 fd02 	bl	80002dc <__adddf3>
 80068d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068dc:	4604      	mov	r4, r0
 80068de:	460d      	mov	r5, r1
 80068e0:	f7fa f942 	bl	8000b68 <__aeabi_dcmpgt>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f040 80f9 	bne.w	8006adc <_dtoa_r+0x6bc>
 80068ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7fa f911 	bl	8000b18 <__aeabi_dcmpeq>
 80068f6:	b118      	cbz	r0, 8006900 <_dtoa_r+0x4e0>
 80068f8:	f018 0f01 	tst.w	r8, #1
 80068fc:	f040 80ee 	bne.w	8006adc <_dtoa_r+0x6bc>
 8006900:	4649      	mov	r1, r9
 8006902:	4658      	mov	r0, fp
 8006904:	f000 fc90 	bl	8007228 <_Bfree>
 8006908:	2300      	movs	r3, #0
 800690a:	7033      	strb	r3, [r6, #0]
 800690c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800690e:	3701      	adds	r7, #1
 8006910:	601f      	str	r7, [r3, #0]
 8006912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 831d 	beq.w	8006f54 <_dtoa_r+0xb34>
 800691a:	601e      	str	r6, [r3, #0]
 800691c:	e31a      	b.n	8006f54 <_dtoa_r+0xb34>
 800691e:	07e2      	lsls	r2, r4, #31
 8006920:	d505      	bpl.n	800692e <_dtoa_r+0x50e>
 8006922:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006926:	f7f9 fe8f 	bl	8000648 <__aeabi_dmul>
 800692a:	3601      	adds	r6, #1
 800692c:	2301      	movs	r3, #1
 800692e:	1064      	asrs	r4, r4, #1
 8006930:	3508      	adds	r5, #8
 8006932:	e73f      	b.n	80067b4 <_dtoa_r+0x394>
 8006934:	2602      	movs	r6, #2
 8006936:	e742      	b.n	80067be <_dtoa_r+0x39e>
 8006938:	9c07      	ldr	r4, [sp, #28]
 800693a:	9704      	str	r7, [sp, #16]
 800693c:	e761      	b.n	8006802 <_dtoa_r+0x3e2>
 800693e:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <_dtoa_r+0x5bc>)
 8006940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800694a:	4454      	add	r4, sl
 800694c:	2900      	cmp	r1, #0
 800694e:	d053      	beq.n	80069f8 <_dtoa_r+0x5d8>
 8006950:	4928      	ldr	r1, [pc, #160]	@ (80069f4 <_dtoa_r+0x5d4>)
 8006952:	2000      	movs	r0, #0
 8006954:	f7f9 ffa2 	bl	800089c <__aeabi_ddiv>
 8006958:	4633      	mov	r3, r6
 800695a:	462a      	mov	r2, r5
 800695c:	f7f9 fcbc 	bl	80002d8 <__aeabi_dsub>
 8006960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006964:	4656      	mov	r6, sl
 8006966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800696a:	f7fa f91d 	bl	8000ba8 <__aeabi_d2iz>
 800696e:	4605      	mov	r5, r0
 8006970:	f7f9 fe00 	bl	8000574 <__aeabi_i2d>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697c:	f7f9 fcac 	bl	80002d8 <__aeabi_dsub>
 8006980:	3530      	adds	r5, #48	@ 0x30
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800698a:	f806 5b01 	strb.w	r5, [r6], #1
 800698e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006992:	f7fa f8cb 	bl	8000b2c <__aeabi_dcmplt>
 8006996:	2800      	cmp	r0, #0
 8006998:	d171      	bne.n	8006a7e <_dtoa_r+0x65e>
 800699a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800699e:	4911      	ldr	r1, [pc, #68]	@ (80069e4 <_dtoa_r+0x5c4>)
 80069a0:	2000      	movs	r0, #0
 80069a2:	f7f9 fc99 	bl	80002d8 <__aeabi_dsub>
 80069a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069aa:	f7fa f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f040 8095 	bne.w	8006ade <_dtoa_r+0x6be>
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	f43f af50 	beq.w	800685a <_dtoa_r+0x43a>
 80069ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069be:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <_dtoa_r+0x5c8>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	f7f9 fe41 	bl	8000648 <__aeabi_dmul>
 80069c6:	4b08      	ldr	r3, [pc, #32]	@ (80069e8 <_dtoa_r+0x5c8>)
 80069c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069cc:	2200      	movs	r2, #0
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	f7f9 fe39 	bl	8000648 <__aeabi_dmul>
 80069d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069da:	e7c4      	b.n	8006966 <_dtoa_r+0x546>
 80069dc:	080085f8 	.word	0x080085f8
 80069e0:	080085d0 	.word	0x080085d0
 80069e4:	3ff00000 	.word	0x3ff00000
 80069e8:	40240000 	.word	0x40240000
 80069ec:	401c0000 	.word	0x401c0000
 80069f0:	40140000 	.word	0x40140000
 80069f4:	3fe00000 	.word	0x3fe00000
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7f9 fe24 	bl	8000648 <__aeabi_dmul>
 8006a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a04:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a06:	4656      	mov	r6, sl
 8006a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0c:	f7fa f8cc 	bl	8000ba8 <__aeabi_d2iz>
 8006a10:	4605      	mov	r5, r0
 8006a12:	f7f9 fdaf 	bl	8000574 <__aeabi_i2d>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1e:	f7f9 fc5b 	bl	80002d8 <__aeabi_dsub>
 8006a22:	3530      	adds	r5, #48	@ 0x30
 8006a24:	f806 5b01 	strb.w	r5, [r6], #1
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	d124      	bne.n	8006a82 <_dtoa_r+0x662>
 8006a38:	4bac      	ldr	r3, [pc, #688]	@ (8006cec <_dtoa_r+0x8cc>)
 8006a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a3e:	f7f9 fc4d 	bl	80002dc <__adddf3>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4a:	f7fa f88d 	bl	8000b68 <__aeabi_dcmpgt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d145      	bne.n	8006ade <_dtoa_r+0x6be>
 8006a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a56:	49a5      	ldr	r1, [pc, #660]	@ (8006cec <_dtoa_r+0x8cc>)
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7f9 fc3d 	bl	80002d8 <__aeabi_dsub>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a66:	f7fa f861 	bl	8000b2c <__aeabi_dcmplt>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f43f aef5 	beq.w	800685a <_dtoa_r+0x43a>
 8006a70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a72:	1e73      	subs	r3, r6, #1
 8006a74:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a7a:	2b30      	cmp	r3, #48	@ 0x30
 8006a7c:	d0f8      	beq.n	8006a70 <_dtoa_r+0x650>
 8006a7e:	9f04      	ldr	r7, [sp, #16]
 8006a80:	e73e      	b.n	8006900 <_dtoa_r+0x4e0>
 8006a82:	4b9b      	ldr	r3, [pc, #620]	@ (8006cf0 <_dtoa_r+0x8d0>)
 8006a84:	f7f9 fde0 	bl	8000648 <__aeabi_dmul>
 8006a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8c:	e7bc      	b.n	8006a08 <_dtoa_r+0x5e8>
 8006a8e:	d10c      	bne.n	8006aaa <_dtoa_r+0x68a>
 8006a90:	4b98      	ldr	r3, [pc, #608]	@ (8006cf4 <_dtoa_r+0x8d4>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a98:	f7f9 fdd6 	bl	8000648 <__aeabi_dmul>
 8006a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa0:	f7fa f858 	bl	8000b54 <__aeabi_dcmpge>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f000 8157 	beq.w	8006d58 <_dtoa_r+0x938>
 8006aaa:	2400      	movs	r4, #0
 8006aac:	4625      	mov	r5, r4
 8006aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	4656      	mov	r6, sl
 8006ab6:	2700      	movs	r7, #0
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4658      	mov	r0, fp
 8006abc:	f000 fbb4 	bl	8007228 <_Bfree>
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	d0dc      	beq.n	8006a7e <_dtoa_r+0x65e>
 8006ac4:	b12f      	cbz	r7, 8006ad2 <_dtoa_r+0x6b2>
 8006ac6:	42af      	cmp	r7, r5
 8006ac8:	d003      	beq.n	8006ad2 <_dtoa_r+0x6b2>
 8006aca:	4639      	mov	r1, r7
 8006acc:	4658      	mov	r0, fp
 8006ace:	f000 fbab 	bl	8007228 <_Bfree>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4658      	mov	r0, fp
 8006ad6:	f000 fba7 	bl	8007228 <_Bfree>
 8006ada:	e7d0      	b.n	8006a7e <_dtoa_r+0x65e>
 8006adc:	9704      	str	r7, [sp, #16]
 8006ade:	4633      	mov	r3, r6
 8006ae0:	461e      	mov	r6, r3
 8006ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ae6:	2a39      	cmp	r2, #57	@ 0x39
 8006ae8:	d107      	bne.n	8006afa <_dtoa_r+0x6da>
 8006aea:	459a      	cmp	sl, r3
 8006aec:	d1f8      	bne.n	8006ae0 <_dtoa_r+0x6c0>
 8006aee:	9a04      	ldr	r2, [sp, #16]
 8006af0:	3201      	adds	r2, #1
 8006af2:	9204      	str	r2, [sp, #16]
 8006af4:	2230      	movs	r2, #48	@ 0x30
 8006af6:	f88a 2000 	strb.w	r2, [sl]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	3201      	adds	r2, #1
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	e7bd      	b.n	8006a7e <_dtoa_r+0x65e>
 8006b02:	4b7b      	ldr	r3, [pc, #492]	@ (8006cf0 <_dtoa_r+0x8d0>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	f7f9 fd9f 	bl	8000648 <__aeabi_dmul>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	f7fa f801 	bl	8000b18 <__aeabi_dcmpeq>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aebb 	beq.w	8006892 <_dtoa_r+0x472>
 8006b1c:	e6f0      	b.n	8006900 <_dtoa_r+0x4e0>
 8006b1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	f000 80db 	beq.w	8006cdc <_dtoa_r+0x8bc>
 8006b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b28:	2a01      	cmp	r2, #1
 8006b2a:	f300 80bf 	bgt.w	8006cac <_dtoa_r+0x88c>
 8006b2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	f000 80b7 	beq.w	8006ca4 <_dtoa_r+0x884>
 8006b36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b3c:	4646      	mov	r6, r8
 8006b3e:	9a08      	ldr	r2, [sp, #32]
 8006b40:	2101      	movs	r1, #1
 8006b42:	441a      	add	r2, r3
 8006b44:	4658      	mov	r0, fp
 8006b46:	4498      	add	r8, r3
 8006b48:	9208      	str	r2, [sp, #32]
 8006b4a:	f000 fc21 	bl	8007390 <__i2b>
 8006b4e:	4605      	mov	r5, r0
 8006b50:	b15e      	cbz	r6, 8006b6a <_dtoa_r+0x74a>
 8006b52:	9b08      	ldr	r3, [sp, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd08      	ble.n	8006b6a <_dtoa_r+0x74a>
 8006b58:	42b3      	cmp	r3, r6
 8006b5a:	9a08      	ldr	r2, [sp, #32]
 8006b5c:	bfa8      	it	ge
 8006b5e:	4633      	movge	r3, r6
 8006b60:	eba8 0803 	sub.w	r8, r8, r3
 8006b64:	1af6      	subs	r6, r6, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	9308      	str	r3, [sp, #32]
 8006b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6c:	b1f3      	cbz	r3, 8006bac <_dtoa_r+0x78c>
 8006b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80b7 	beq.w	8006ce4 <_dtoa_r+0x8c4>
 8006b76:	b18c      	cbz	r4, 8006b9c <_dtoa_r+0x77c>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 fcc7 	bl	8007510 <__pow5mult>
 8006b82:	464a      	mov	r2, r9
 8006b84:	4601      	mov	r1, r0
 8006b86:	4605      	mov	r5, r0
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f000 fc17 	bl	80073bc <__multiply>
 8006b8e:	4649      	mov	r1, r9
 8006b90:	9004      	str	r0, [sp, #16]
 8006b92:	4658      	mov	r0, fp
 8006b94:	f000 fb48 	bl	8007228 <_Bfree>
 8006b98:	9b04      	ldr	r3, [sp, #16]
 8006b9a:	4699      	mov	r9, r3
 8006b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9e:	1b1a      	subs	r2, r3, r4
 8006ba0:	d004      	beq.n	8006bac <_dtoa_r+0x78c>
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 fcb3 	bl	8007510 <__pow5mult>
 8006baa:	4681      	mov	r9, r0
 8006bac:	2101      	movs	r1, #1
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f000 fbee 	bl	8007390 <__i2b>
 8006bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 81cf 	beq.w	8006f5c <_dtoa_r+0xb3c>
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f000 fca4 	bl	8007510 <__pow5mult>
 8006bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	4604      	mov	r4, r0
 8006bce:	f300 8095 	bgt.w	8006cfc <_dtoa_r+0x8dc>
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 8087 	bne.w	8006ce8 <_dtoa_r+0x8c8>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f040 8089 	bne.w	8006cf8 <_dtoa_r+0x8d8>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bec:	0d1b      	lsrs	r3, r3, #20
 8006bee:	051b      	lsls	r3, r3, #20
 8006bf0:	b12b      	cbz	r3, 8006bfe <_dtoa_r+0x7de>
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	9308      	str	r3, [sp, #32]
 8006bf8:	f108 0801 	add.w	r8, r8, #1
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 81b0 	beq.w	8006f68 <_dtoa_r+0xb48>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c0e:	6918      	ldr	r0, [r3, #16]
 8006c10:	f000 fb72 	bl	80072f8 <__hi0bits>
 8006c14:	f1c0 0020 	rsb	r0, r0, #32
 8006c18:	9b08      	ldr	r3, [sp, #32]
 8006c1a:	4418      	add	r0, r3
 8006c1c:	f010 001f 	ands.w	r0, r0, #31
 8006c20:	d077      	beq.n	8006d12 <_dtoa_r+0x8f2>
 8006c22:	f1c0 0320 	rsb	r3, r0, #32
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	dd6b      	ble.n	8006d02 <_dtoa_r+0x8e2>
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	f1c0 001c 	rsb	r0, r0, #28
 8006c30:	4403      	add	r3, r0
 8006c32:	4480      	add	r8, r0
 8006c34:	4406      	add	r6, r0
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	f1b8 0f00 	cmp.w	r8, #0
 8006c3c:	dd05      	ble.n	8006c4a <_dtoa_r+0x82a>
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4642      	mov	r2, r8
 8006c42:	4658      	mov	r0, fp
 8006c44:	f000 fcbe 	bl	80075c4 <__lshift>
 8006c48:	4681      	mov	r9, r0
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd05      	ble.n	8006c5c <_dtoa_r+0x83c>
 8006c50:	4621      	mov	r1, r4
 8006c52:	461a      	mov	r2, r3
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 fcb5 	bl	80075c4 <__lshift>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d059      	beq.n	8006d16 <_dtoa_r+0x8f6>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4648      	mov	r0, r9
 8006c66:	f000 fd19 	bl	800769c <__mcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	da53      	bge.n	8006d16 <_dtoa_r+0x8f6>
 8006c6e:	1e7b      	subs	r3, r7, #1
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	4649      	mov	r1, r9
 8006c74:	2300      	movs	r3, #0
 8006c76:	220a      	movs	r2, #10
 8006c78:	4658      	mov	r0, fp
 8006c7a:	f000 faf7 	bl	800726c <__multadd>
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c80:	4681      	mov	r9, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8172 	beq.w	8006f6c <_dtoa_r+0xb4c>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 faec 	bl	800726c <__multadd>
 8006c94:	9b00      	ldr	r3, [sp, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	4605      	mov	r5, r0
 8006c9a:	dc67      	bgt.n	8006d6c <_dtoa_r+0x94c>
 8006c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	dc41      	bgt.n	8006d26 <_dtoa_r+0x906>
 8006ca2:	e063      	b.n	8006d6c <_dtoa_r+0x94c>
 8006ca4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006caa:	e746      	b.n	8006b3a <_dtoa_r+0x71a>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	1e5c      	subs	r4, r3, #1
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	bfbf      	itttt	lt
 8006cb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006cb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006cba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cbc:	1ae3      	sublt	r3, r4, r3
 8006cbe:	bfb4      	ite	lt
 8006cc0:	18d2      	addlt	r2, r2, r3
 8006cc2:	1b1c      	subge	r4, r3, r4
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	bfbc      	itt	lt
 8006cc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006cca:	2400      	movlt	r4, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bfb5      	itete	lt
 8006cd0:	eba8 0603 	sublt.w	r6, r8, r3
 8006cd4:	9b07      	ldrge	r3, [sp, #28]
 8006cd6:	2300      	movlt	r3, #0
 8006cd8:	4646      	movge	r6, r8
 8006cda:	e730      	b.n	8006b3e <_dtoa_r+0x71e>
 8006cdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006cde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ce0:	4646      	mov	r6, r8
 8006ce2:	e735      	b.n	8006b50 <_dtoa_r+0x730>
 8006ce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ce6:	e75c      	b.n	8006ba2 <_dtoa_r+0x782>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e788      	b.n	8006bfe <_dtoa_r+0x7de>
 8006cec:	3fe00000 	.word	0x3fe00000
 8006cf0:	40240000 	.word	0x40240000
 8006cf4:	40140000 	.word	0x40140000
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	e780      	b.n	8006bfe <_dtoa_r+0x7de>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d00:	e782      	b.n	8006c08 <_dtoa_r+0x7e8>
 8006d02:	d099      	beq.n	8006c38 <_dtoa_r+0x818>
 8006d04:	9a08      	ldr	r2, [sp, #32]
 8006d06:	331c      	adds	r3, #28
 8006d08:	441a      	add	r2, r3
 8006d0a:	4498      	add	r8, r3
 8006d0c:	441e      	add	r6, r3
 8006d0e:	9208      	str	r2, [sp, #32]
 8006d10:	e792      	b.n	8006c38 <_dtoa_r+0x818>
 8006d12:	4603      	mov	r3, r0
 8006d14:	e7f6      	b.n	8006d04 <_dtoa_r+0x8e4>
 8006d16:	9b07      	ldr	r3, [sp, #28]
 8006d18:	9704      	str	r7, [sp, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc20      	bgt.n	8006d60 <_dtoa_r+0x940>
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	dd1e      	ble.n	8006d64 <_dtoa_r+0x944>
 8006d26:	9b00      	ldr	r3, [sp, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f aec0 	bne.w	8006aae <_dtoa_r+0x68e>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	2205      	movs	r2, #5
 8006d32:	4658      	mov	r0, fp
 8006d34:	f000 fa9a 	bl	800726c <__multadd>
 8006d38:	4601      	mov	r1, r0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4648      	mov	r0, r9
 8006d3e:	f000 fcad 	bl	800769c <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f77f aeb3 	ble.w	8006aae <_dtoa_r+0x68e>
 8006d48:	4656      	mov	r6, sl
 8006d4a:	2331      	movs	r3, #49	@ 0x31
 8006d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d50:	9b04      	ldr	r3, [sp, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	e6ae      	b.n	8006ab6 <_dtoa_r+0x696>
 8006d58:	9c07      	ldr	r4, [sp, #28]
 8006d5a:	9704      	str	r7, [sp, #16]
 8006d5c:	4625      	mov	r5, r4
 8006d5e:	e7f3      	b.n	8006d48 <_dtoa_r+0x928>
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8104 	beq.w	8006f74 <_dtoa_r+0xb54>
 8006d6c:	2e00      	cmp	r6, #0
 8006d6e:	dd05      	ble.n	8006d7c <_dtoa_r+0x95c>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4632      	mov	r2, r6
 8006d74:	4658      	mov	r0, fp
 8006d76:	f000 fc25 	bl	80075c4 <__lshift>
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d05a      	beq.n	8006e38 <_dtoa_r+0xa18>
 8006d82:	6869      	ldr	r1, [r5, #4]
 8006d84:	4658      	mov	r0, fp
 8006d86:	f000 fa0f 	bl	80071a8 <_Balloc>
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	b928      	cbnz	r0, 8006d9a <_dtoa_r+0x97a>
 8006d8e:	4b84      	ldr	r3, [pc, #528]	@ (8006fa0 <_dtoa_r+0xb80>)
 8006d90:	4602      	mov	r2, r0
 8006d92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d96:	f7ff bb5a 	b.w	800644e <_dtoa_r+0x2e>
 8006d9a:	692a      	ldr	r2, [r5, #16]
 8006d9c:	3202      	adds	r2, #2
 8006d9e:	0092      	lsls	r2, r2, #2
 8006da0:	f105 010c 	add.w	r1, r5, #12
 8006da4:	300c      	adds	r0, #12
 8006da6:	f000 ffaf 	bl	8007d08 <memcpy>
 8006daa:	2201      	movs	r2, #1
 8006dac:	4631      	mov	r1, r6
 8006dae:	4658      	mov	r0, fp
 8006db0:	f000 fc08 	bl	80075c4 <__lshift>
 8006db4:	f10a 0301 	add.w	r3, sl, #1
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	4453      	add	r3, sl
 8006dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dc0:	9b02      	ldr	r3, [sp, #8]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	462f      	mov	r7, r5
 8006dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dca:	4605      	mov	r5, r0
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	4621      	mov	r1, r4
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	4648      	mov	r0, r9
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	f7ff fa9a 	bl	800630e <quorem>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	9002      	str	r0, [sp, #8]
 8006dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006de2:	4648      	mov	r0, r9
 8006de4:	f000 fc5a 	bl	800769c <__mcmp>
 8006de8:	462a      	mov	r2, r5
 8006dea:	9008      	str	r0, [sp, #32]
 8006dec:	4621      	mov	r1, r4
 8006dee:	4658      	mov	r0, fp
 8006df0:	f000 fc70 	bl	80076d4 <__mdiff>
 8006df4:	68c2      	ldr	r2, [r0, #12]
 8006df6:	4606      	mov	r6, r0
 8006df8:	bb02      	cbnz	r2, 8006e3c <_dtoa_r+0xa1c>
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	4648      	mov	r0, r9
 8006dfe:	f000 fc4d 	bl	800769c <__mcmp>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4631      	mov	r1, r6
 8006e06:	4658      	mov	r0, fp
 8006e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e0a:	f000 fa0d 	bl	8007228 <_Bfree>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e12:	9e07      	ldr	r6, [sp, #28]
 8006e14:	ea43 0102 	orr.w	r1, r3, r2
 8006e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e1a:	4319      	orrs	r1, r3
 8006e1c:	d110      	bne.n	8006e40 <_dtoa_r+0xa20>
 8006e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e22:	d029      	beq.n	8006e78 <_dtoa_r+0xa58>
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd02      	ble.n	8006e30 <_dtoa_r+0xa10>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e30:	9b00      	ldr	r3, [sp, #0]
 8006e32:	f883 8000 	strb.w	r8, [r3]
 8006e36:	e63f      	b.n	8006ab8 <_dtoa_r+0x698>
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e7bb      	b.n	8006db4 <_dtoa_r+0x994>
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	e7e1      	b.n	8006e04 <_dtoa_r+0x9e4>
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db04      	blt.n	8006e50 <_dtoa_r+0xa30>
 8006e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	d120      	bne.n	8006e92 <_dtoa_r+0xa72>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dded      	ble.n	8006e30 <_dtoa_r+0xa10>
 8006e54:	4649      	mov	r1, r9
 8006e56:	2201      	movs	r2, #1
 8006e58:	4658      	mov	r0, fp
 8006e5a:	f000 fbb3 	bl	80075c4 <__lshift>
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4681      	mov	r9, r0
 8006e62:	f000 fc1b 	bl	800769c <__mcmp>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	dc03      	bgt.n	8006e72 <_dtoa_r+0xa52>
 8006e6a:	d1e1      	bne.n	8006e30 <_dtoa_r+0xa10>
 8006e6c:	f018 0f01 	tst.w	r8, #1
 8006e70:	d0de      	beq.n	8006e30 <_dtoa_r+0xa10>
 8006e72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e76:	d1d8      	bne.n	8006e2a <_dtoa_r+0xa0a>
 8006e78:	9a00      	ldr	r2, [sp, #0]
 8006e7a:	2339      	movs	r3, #57	@ 0x39
 8006e7c:	7013      	strb	r3, [r2, #0]
 8006e7e:	4633      	mov	r3, r6
 8006e80:	461e      	mov	r6, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e88:	2a39      	cmp	r2, #57	@ 0x39
 8006e8a:	d052      	beq.n	8006f32 <_dtoa_r+0xb12>
 8006e8c:	3201      	adds	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e612      	b.n	8006ab8 <_dtoa_r+0x698>
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	dd07      	ble.n	8006ea6 <_dtoa_r+0xa86>
 8006e96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e9a:	d0ed      	beq.n	8006e78 <_dtoa_r+0xa58>
 8006e9c:	9a00      	ldr	r2, [sp, #0]
 8006e9e:	f108 0301 	add.w	r3, r8, #1
 8006ea2:	7013      	strb	r3, [r2, #0]
 8006ea4:	e608      	b.n	8006ab8 <_dtoa_r+0x698>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	9a07      	ldr	r2, [sp, #28]
 8006eaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d028      	beq.n	8006f06 <_dtoa_r+0xae6>
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	220a      	movs	r2, #10
 8006eba:	4658      	mov	r0, fp
 8006ebc:	f000 f9d6 	bl	800726c <__multadd>
 8006ec0:	42af      	cmp	r7, r5
 8006ec2:	4681      	mov	r9, r0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	f04f 020a 	mov.w	r2, #10
 8006ecc:	4639      	mov	r1, r7
 8006ece:	4658      	mov	r0, fp
 8006ed0:	d107      	bne.n	8006ee2 <_dtoa_r+0xac2>
 8006ed2:	f000 f9cb 	bl	800726c <__multadd>
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	4605      	mov	r5, r0
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	3301      	adds	r3, #1
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	e774      	b.n	8006dcc <_dtoa_r+0x9ac>
 8006ee2:	f000 f9c3 	bl	800726c <__multadd>
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4607      	mov	r7, r0
 8006eea:	2300      	movs	r3, #0
 8006eec:	220a      	movs	r2, #10
 8006eee:	4658      	mov	r0, fp
 8006ef0:	f000 f9bc 	bl	800726c <__multadd>
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	e7f0      	b.n	8006eda <_dtoa_r+0xaba>
 8006ef8:	9b00      	ldr	r3, [sp, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfcc      	ite	gt
 8006efe:	461e      	movgt	r6, r3
 8006f00:	2601      	movle	r6, #1
 8006f02:	4456      	add	r6, sl
 8006f04:	2700      	movs	r7, #0
 8006f06:	4649      	mov	r1, r9
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fb5a 	bl	80075c4 <__lshift>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4681      	mov	r9, r0
 8006f14:	f000 fbc2 	bl	800769c <__mcmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	dcb0      	bgt.n	8006e7e <_dtoa_r+0xa5e>
 8006f1c:	d102      	bne.n	8006f24 <_dtoa_r+0xb04>
 8006f1e:	f018 0f01 	tst.w	r8, #1
 8006f22:	d1ac      	bne.n	8006e7e <_dtoa_r+0xa5e>
 8006f24:	4633      	mov	r3, r6
 8006f26:	461e      	mov	r6, r3
 8006f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f2c:	2a30      	cmp	r2, #48	@ 0x30
 8006f2e:	d0fa      	beq.n	8006f26 <_dtoa_r+0xb06>
 8006f30:	e5c2      	b.n	8006ab8 <_dtoa_r+0x698>
 8006f32:	459a      	cmp	sl, r3
 8006f34:	d1a4      	bne.n	8006e80 <_dtoa_r+0xa60>
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	2331      	movs	r3, #49	@ 0x31
 8006f3e:	f88a 3000 	strb.w	r3, [sl]
 8006f42:	e5b9      	b.n	8006ab8 <_dtoa_r+0x698>
 8006f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fa4 <_dtoa_r+0xb84>
 8006f4a:	b11b      	cbz	r3, 8006f54 <_dtoa_r+0xb34>
 8006f4c:	f10a 0308 	add.w	r3, sl, #8
 8006f50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4650      	mov	r0, sl
 8006f56:	b019      	add	sp, #100	@ 0x64
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	f77f ae37 	ble.w	8006bd2 <_dtoa_r+0x7b2>
 8006f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e655      	b.n	8006c18 <_dtoa_r+0x7f8>
 8006f6c:	9b00      	ldr	r3, [sp, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f77f aed6 	ble.w	8006d20 <_dtoa_r+0x900>
 8006f74:	4656      	mov	r6, sl
 8006f76:	4621      	mov	r1, r4
 8006f78:	4648      	mov	r0, r9
 8006f7a:	f7ff f9c8 	bl	800630e <quorem>
 8006f7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f82:	f806 8b01 	strb.w	r8, [r6], #1
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	eba6 020a 	sub.w	r2, r6, sl
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	ddb3      	ble.n	8006ef8 <_dtoa_r+0xad8>
 8006f90:	4649      	mov	r1, r9
 8006f92:	2300      	movs	r3, #0
 8006f94:	220a      	movs	r2, #10
 8006f96:	4658      	mov	r0, fp
 8006f98:	f000 f968 	bl	800726c <__multadd>
 8006f9c:	4681      	mov	r9, r0
 8006f9e:	e7ea      	b.n	8006f76 <_dtoa_r+0xb56>
 8006fa0:	08008554 	.word	0x08008554
 8006fa4:	080084d8 	.word	0x080084d8

08006fa8 <_free_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4605      	mov	r5, r0
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d041      	beq.n	8007034 <_free_r+0x8c>
 8006fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb4:	1f0c      	subs	r4, r1, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfb8      	it	lt
 8006fba:	18e4      	addlt	r4, r4, r3
 8006fbc:	f000 f8e8 	bl	8007190 <__malloc_lock>
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <_free_r+0x90>)
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	b933      	cbnz	r3, 8006fd4 <_free_r+0x2c>
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	4628      	mov	r0, r5
 8006fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd0:	f000 b8e4 	b.w	800719c <__malloc_unlock>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d908      	bls.n	8006fea <_free_r+0x42>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	1821      	adds	r1, r4, r0
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf01      	itttt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	1809      	addeq	r1, r1, r0
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	e7ed      	b.n	8006fc6 <_free_r+0x1e>
 8006fea:	461a      	mov	r2, r3
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b10b      	cbz	r3, 8006ff4 <_free_r+0x4c>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d9fa      	bls.n	8006fea <_free_r+0x42>
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	1850      	adds	r0, r2, r1
 8006ff8:	42a0      	cmp	r0, r4
 8006ffa:	d10b      	bne.n	8007014 <_free_r+0x6c>
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	4401      	add	r1, r0
 8007000:	1850      	adds	r0, r2, r1
 8007002:	4283      	cmp	r3, r0
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	d1e0      	bne.n	8006fca <_free_r+0x22>
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	6053      	str	r3, [r2, #4]
 800700e:	4408      	add	r0, r1
 8007010:	6010      	str	r0, [r2, #0]
 8007012:	e7da      	b.n	8006fca <_free_r+0x22>
 8007014:	d902      	bls.n	800701c <_free_r+0x74>
 8007016:	230c      	movs	r3, #12
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	e7d6      	b.n	8006fca <_free_r+0x22>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	1821      	adds	r1, r4, r0
 8007020:	428b      	cmp	r3, r1
 8007022:	bf04      	itt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	bf04      	itt	eq
 800702c:	1809      	addeq	r1, r1, r0
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	6054      	str	r4, [r2, #4]
 8007032:	e7ca      	b.n	8006fca <_free_r+0x22>
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	200005d0 	.word	0x200005d0

0800703c <malloc>:
 800703c:	4b02      	ldr	r3, [pc, #8]	@ (8007048 <malloc+0xc>)
 800703e:	4601      	mov	r1, r0
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f000 b825 	b.w	8007090 <_malloc_r>
 8007046:	bf00      	nop
 8007048:	20000018 	.word	0x20000018

0800704c <sbrk_aligned>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4e0f      	ldr	r6, [pc, #60]	@ (800708c <sbrk_aligned+0x40>)
 8007050:	460c      	mov	r4, r1
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	4605      	mov	r5, r0
 8007056:	b911      	cbnz	r1, 800705e <sbrk_aligned+0x12>
 8007058:	f000 fe46 	bl	8007ce8 <_sbrk_r>
 800705c:	6030      	str	r0, [r6, #0]
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 fe41 	bl	8007ce8 <_sbrk_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d103      	bne.n	8007072 <sbrk_aligned+0x26>
 800706a:	f04f 34ff 	mov.w	r4, #4294967295
 800706e:	4620      	mov	r0, r4
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d0f8      	beq.n	800706e <sbrk_aligned+0x22>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4628      	mov	r0, r5
 8007080:	f000 fe32 	bl	8007ce8 <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d1f2      	bne.n	800706e <sbrk_aligned+0x22>
 8007088:	e7ef      	b.n	800706a <sbrk_aligned+0x1e>
 800708a:	bf00      	nop
 800708c:	200005cc 	.word	0x200005cc

08007090 <_malloc_r>:
 8007090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007094:	1ccd      	adds	r5, r1, #3
 8007096:	f025 0503 	bic.w	r5, r5, #3
 800709a:	3508      	adds	r5, #8
 800709c:	2d0c      	cmp	r5, #12
 800709e:	bf38      	it	cc
 80070a0:	250c      	movcc	r5, #12
 80070a2:	2d00      	cmp	r5, #0
 80070a4:	4606      	mov	r6, r0
 80070a6:	db01      	blt.n	80070ac <_malloc_r+0x1c>
 80070a8:	42a9      	cmp	r1, r5
 80070aa:	d904      	bls.n	80070b6 <_malloc_r+0x26>
 80070ac:	230c      	movs	r3, #12
 80070ae:	6033      	str	r3, [r6, #0]
 80070b0:	2000      	movs	r0, #0
 80070b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800718c <_malloc_r+0xfc>
 80070ba:	f000 f869 	bl	8007190 <__malloc_lock>
 80070be:	f8d8 3000 	ldr.w	r3, [r8]
 80070c2:	461c      	mov	r4, r3
 80070c4:	bb44      	cbnz	r4, 8007118 <_malloc_r+0x88>
 80070c6:	4629      	mov	r1, r5
 80070c8:	4630      	mov	r0, r6
 80070ca:	f7ff ffbf 	bl	800704c <sbrk_aligned>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	4604      	mov	r4, r0
 80070d2:	d158      	bne.n	8007186 <_malloc_r+0xf6>
 80070d4:	f8d8 4000 	ldr.w	r4, [r8]
 80070d8:	4627      	mov	r7, r4
 80070da:	2f00      	cmp	r7, #0
 80070dc:	d143      	bne.n	8007166 <_malloc_r+0xd6>
 80070de:	2c00      	cmp	r4, #0
 80070e0:	d04b      	beq.n	800717a <_malloc_r+0xea>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	4639      	mov	r1, r7
 80070e6:	4630      	mov	r0, r6
 80070e8:	eb04 0903 	add.w	r9, r4, r3
 80070ec:	f000 fdfc 	bl	8007ce8 <_sbrk_r>
 80070f0:	4581      	cmp	r9, r0
 80070f2:	d142      	bne.n	800717a <_malloc_r+0xea>
 80070f4:	6821      	ldr	r1, [r4, #0]
 80070f6:	1a6d      	subs	r5, r5, r1
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffa6 	bl	800704c <sbrk_aligned>
 8007100:	3001      	adds	r0, #1
 8007102:	d03a      	beq.n	800717a <_malloc_r+0xea>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	442b      	add	r3, r5
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	f8d8 3000 	ldr.w	r3, [r8]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	bb62      	cbnz	r2, 800716c <_malloc_r+0xdc>
 8007112:	f8c8 7000 	str.w	r7, [r8]
 8007116:	e00f      	b.n	8007138 <_malloc_r+0xa8>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	1b52      	subs	r2, r2, r5
 800711c:	d420      	bmi.n	8007160 <_malloc_r+0xd0>
 800711e:	2a0b      	cmp	r2, #11
 8007120:	d917      	bls.n	8007152 <_malloc_r+0xc2>
 8007122:	1961      	adds	r1, r4, r5
 8007124:	42a3      	cmp	r3, r4
 8007126:	6025      	str	r5, [r4, #0]
 8007128:	bf18      	it	ne
 800712a:	6059      	strne	r1, [r3, #4]
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	bf08      	it	eq
 8007130:	f8c8 1000 	streq.w	r1, [r8]
 8007134:	5162      	str	r2, [r4, r5]
 8007136:	604b      	str	r3, [r1, #4]
 8007138:	4630      	mov	r0, r6
 800713a:	f000 f82f 	bl	800719c <__malloc_unlock>
 800713e:	f104 000b 	add.w	r0, r4, #11
 8007142:	1d23      	adds	r3, r4, #4
 8007144:	f020 0007 	bic.w	r0, r0, #7
 8007148:	1ac2      	subs	r2, r0, r3
 800714a:	bf1c      	itt	ne
 800714c:	1a1b      	subne	r3, r3, r0
 800714e:	50a3      	strne	r3, [r4, r2]
 8007150:	e7af      	b.n	80070b2 <_malloc_r+0x22>
 8007152:	6862      	ldr	r2, [r4, #4]
 8007154:	42a3      	cmp	r3, r4
 8007156:	bf0c      	ite	eq
 8007158:	f8c8 2000 	streq.w	r2, [r8]
 800715c:	605a      	strne	r2, [r3, #4]
 800715e:	e7eb      	b.n	8007138 <_malloc_r+0xa8>
 8007160:	4623      	mov	r3, r4
 8007162:	6864      	ldr	r4, [r4, #4]
 8007164:	e7ae      	b.n	80070c4 <_malloc_r+0x34>
 8007166:	463c      	mov	r4, r7
 8007168:	687f      	ldr	r7, [r7, #4]
 800716a:	e7b6      	b.n	80070da <_malloc_r+0x4a>
 800716c:	461a      	mov	r2, r3
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	42a3      	cmp	r3, r4
 8007172:	d1fb      	bne.n	800716c <_malloc_r+0xdc>
 8007174:	2300      	movs	r3, #0
 8007176:	6053      	str	r3, [r2, #4]
 8007178:	e7de      	b.n	8007138 <_malloc_r+0xa8>
 800717a:	230c      	movs	r3, #12
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	4630      	mov	r0, r6
 8007180:	f000 f80c 	bl	800719c <__malloc_unlock>
 8007184:	e794      	b.n	80070b0 <_malloc_r+0x20>
 8007186:	6005      	str	r5, [r0, #0]
 8007188:	e7d6      	b.n	8007138 <_malloc_r+0xa8>
 800718a:	bf00      	nop
 800718c:	200005d0 	.word	0x200005d0

08007190 <__malloc_lock>:
 8007190:	4801      	ldr	r0, [pc, #4]	@ (8007198 <__malloc_lock+0x8>)
 8007192:	f7ff b8ba 	b.w	800630a <__retarget_lock_acquire_recursive>
 8007196:	bf00      	nop
 8007198:	200005c8 	.word	0x200005c8

0800719c <__malloc_unlock>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__malloc_unlock+0x8>)
 800719e:	f7ff b8b5 	b.w	800630c <__retarget_lock_release_recursive>
 80071a2:	bf00      	nop
 80071a4:	200005c8 	.word	0x200005c8

080071a8 <_Balloc>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	69c6      	ldr	r6, [r0, #28]
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	b976      	cbnz	r6, 80071d0 <_Balloc+0x28>
 80071b2:	2010      	movs	r0, #16
 80071b4:	f7ff ff42 	bl	800703c <malloc>
 80071b8:	4602      	mov	r2, r0
 80071ba:	61e0      	str	r0, [r4, #28]
 80071bc:	b920      	cbnz	r0, 80071c8 <_Balloc+0x20>
 80071be:	4b18      	ldr	r3, [pc, #96]	@ (8007220 <_Balloc+0x78>)
 80071c0:	4818      	ldr	r0, [pc, #96]	@ (8007224 <_Balloc+0x7c>)
 80071c2:	216b      	movs	r1, #107	@ 0x6b
 80071c4:	f000 fdae 	bl	8007d24 <__assert_func>
 80071c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071cc:	6006      	str	r6, [r0, #0]
 80071ce:	60c6      	str	r6, [r0, #12]
 80071d0:	69e6      	ldr	r6, [r4, #28]
 80071d2:	68f3      	ldr	r3, [r6, #12]
 80071d4:	b183      	cbz	r3, 80071f8 <_Balloc+0x50>
 80071d6:	69e3      	ldr	r3, [r4, #28]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071de:	b9b8      	cbnz	r0, 8007210 <_Balloc+0x68>
 80071e0:	2101      	movs	r1, #1
 80071e2:	fa01 f605 	lsl.w	r6, r1, r5
 80071e6:	1d72      	adds	r2, r6, #5
 80071e8:	0092      	lsls	r2, r2, #2
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fdb8 	bl	8007d60 <_calloc_r>
 80071f0:	b160      	cbz	r0, 800720c <_Balloc+0x64>
 80071f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071f6:	e00e      	b.n	8007216 <_Balloc+0x6e>
 80071f8:	2221      	movs	r2, #33	@ 0x21
 80071fa:	2104      	movs	r1, #4
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fdaf 	bl	8007d60 <_calloc_r>
 8007202:	69e3      	ldr	r3, [r4, #28]
 8007204:	60f0      	str	r0, [r6, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e4      	bne.n	80071d6 <_Balloc+0x2e>
 800720c:	2000      	movs	r0, #0
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	6802      	ldr	r2, [r0, #0]
 8007212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007216:	2300      	movs	r3, #0
 8007218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800721c:	e7f7      	b.n	800720e <_Balloc+0x66>
 800721e:	bf00      	nop
 8007220:	080084e5 	.word	0x080084e5
 8007224:	08008565 	.word	0x08008565

08007228 <_Bfree>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	69c6      	ldr	r6, [r0, #28]
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b976      	cbnz	r6, 8007250 <_Bfree+0x28>
 8007232:	2010      	movs	r0, #16
 8007234:	f7ff ff02 	bl	800703c <malloc>
 8007238:	4602      	mov	r2, r0
 800723a:	61e8      	str	r0, [r5, #28]
 800723c:	b920      	cbnz	r0, 8007248 <_Bfree+0x20>
 800723e:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <_Bfree+0x3c>)
 8007240:	4809      	ldr	r0, [pc, #36]	@ (8007268 <_Bfree+0x40>)
 8007242:	218f      	movs	r1, #143	@ 0x8f
 8007244:	f000 fd6e 	bl	8007d24 <__assert_func>
 8007248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800724c:	6006      	str	r6, [r0, #0]
 800724e:	60c6      	str	r6, [r0, #12]
 8007250:	b13c      	cbz	r4, 8007262 <_Bfree+0x3a>
 8007252:	69eb      	ldr	r3, [r5, #28]
 8007254:	6862      	ldr	r2, [r4, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800725c:	6021      	str	r1, [r4, #0]
 800725e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	080084e5 	.word	0x080084e5
 8007268:	08008565 	.word	0x08008565

0800726c <__multadd>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	690d      	ldr	r5, [r1, #16]
 8007272:	4607      	mov	r7, r0
 8007274:	460c      	mov	r4, r1
 8007276:	461e      	mov	r6, r3
 8007278:	f101 0c14 	add.w	ip, r1, #20
 800727c:	2000      	movs	r0, #0
 800727e:	f8dc 3000 	ldr.w	r3, [ip]
 8007282:	b299      	uxth	r1, r3
 8007284:	fb02 6101 	mla	r1, r2, r1, r6
 8007288:	0c1e      	lsrs	r6, r3, #16
 800728a:	0c0b      	lsrs	r3, r1, #16
 800728c:	fb02 3306 	mla	r3, r2, r6, r3
 8007290:	b289      	uxth	r1, r1
 8007292:	3001      	adds	r0, #1
 8007294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007298:	4285      	cmp	r5, r0
 800729a:	f84c 1b04 	str.w	r1, [ip], #4
 800729e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072a2:	dcec      	bgt.n	800727e <__multadd+0x12>
 80072a4:	b30e      	cbz	r6, 80072ea <__multadd+0x7e>
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dc19      	bgt.n	80072e0 <__multadd+0x74>
 80072ac:	6861      	ldr	r1, [r4, #4]
 80072ae:	4638      	mov	r0, r7
 80072b0:	3101      	adds	r1, #1
 80072b2:	f7ff ff79 	bl	80071a8 <_Balloc>
 80072b6:	4680      	mov	r8, r0
 80072b8:	b928      	cbnz	r0, 80072c6 <__multadd+0x5a>
 80072ba:	4602      	mov	r2, r0
 80072bc:	4b0c      	ldr	r3, [pc, #48]	@ (80072f0 <__multadd+0x84>)
 80072be:	480d      	ldr	r0, [pc, #52]	@ (80072f4 <__multadd+0x88>)
 80072c0:	21ba      	movs	r1, #186	@ 0xba
 80072c2:	f000 fd2f 	bl	8007d24 <__assert_func>
 80072c6:	6922      	ldr	r2, [r4, #16]
 80072c8:	3202      	adds	r2, #2
 80072ca:	f104 010c 	add.w	r1, r4, #12
 80072ce:	0092      	lsls	r2, r2, #2
 80072d0:	300c      	adds	r0, #12
 80072d2:	f000 fd19 	bl	8007d08 <memcpy>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff ffa5 	bl	8007228 <_Bfree>
 80072de:	4644      	mov	r4, r8
 80072e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072e4:	3501      	adds	r5, #1
 80072e6:	615e      	str	r6, [r3, #20]
 80072e8:	6125      	str	r5, [r4, #16]
 80072ea:	4620      	mov	r0, r4
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	08008554 	.word	0x08008554
 80072f4:	08008565 	.word	0x08008565

080072f8 <__hi0bits>:
 80072f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072fc:	4603      	mov	r3, r0
 80072fe:	bf36      	itet	cc
 8007300:	0403      	lslcc	r3, r0, #16
 8007302:	2000      	movcs	r0, #0
 8007304:	2010      	movcc	r0, #16
 8007306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800730a:	bf3c      	itt	cc
 800730c:	021b      	lslcc	r3, r3, #8
 800730e:	3008      	addcc	r0, #8
 8007310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007314:	bf3c      	itt	cc
 8007316:	011b      	lslcc	r3, r3, #4
 8007318:	3004      	addcc	r0, #4
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731e:	bf3c      	itt	cc
 8007320:	009b      	lslcc	r3, r3, #2
 8007322:	3002      	addcc	r0, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	db05      	blt.n	8007334 <__hi0bits+0x3c>
 8007328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800732c:	f100 0001 	add.w	r0, r0, #1
 8007330:	bf08      	it	eq
 8007332:	2020      	moveq	r0, #32
 8007334:	4770      	bx	lr

08007336 <__lo0bits>:
 8007336:	6803      	ldr	r3, [r0, #0]
 8007338:	4602      	mov	r2, r0
 800733a:	f013 0007 	ands.w	r0, r3, #7
 800733e:	d00b      	beq.n	8007358 <__lo0bits+0x22>
 8007340:	07d9      	lsls	r1, r3, #31
 8007342:	d421      	bmi.n	8007388 <__lo0bits+0x52>
 8007344:	0798      	lsls	r0, r3, #30
 8007346:	bf49      	itett	mi
 8007348:	085b      	lsrmi	r3, r3, #1
 800734a:	089b      	lsrpl	r3, r3, #2
 800734c:	2001      	movmi	r0, #1
 800734e:	6013      	strmi	r3, [r2, #0]
 8007350:	bf5c      	itt	pl
 8007352:	6013      	strpl	r3, [r2, #0]
 8007354:	2002      	movpl	r0, #2
 8007356:	4770      	bx	lr
 8007358:	b299      	uxth	r1, r3
 800735a:	b909      	cbnz	r1, 8007360 <__lo0bits+0x2a>
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	2010      	movs	r0, #16
 8007360:	b2d9      	uxtb	r1, r3
 8007362:	b909      	cbnz	r1, 8007368 <__lo0bits+0x32>
 8007364:	3008      	adds	r0, #8
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	0719      	lsls	r1, r3, #28
 800736a:	bf04      	itt	eq
 800736c:	091b      	lsreq	r3, r3, #4
 800736e:	3004      	addeq	r0, #4
 8007370:	0799      	lsls	r1, r3, #30
 8007372:	bf04      	itt	eq
 8007374:	089b      	lsreq	r3, r3, #2
 8007376:	3002      	addeq	r0, #2
 8007378:	07d9      	lsls	r1, r3, #31
 800737a:	d403      	bmi.n	8007384 <__lo0bits+0x4e>
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	f100 0001 	add.w	r0, r0, #1
 8007382:	d003      	beq.n	800738c <__lo0bits+0x56>
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	4770      	bx	lr
 8007388:	2000      	movs	r0, #0
 800738a:	4770      	bx	lr
 800738c:	2020      	movs	r0, #32
 800738e:	4770      	bx	lr

08007390 <__i2b>:
 8007390:	b510      	push	{r4, lr}
 8007392:	460c      	mov	r4, r1
 8007394:	2101      	movs	r1, #1
 8007396:	f7ff ff07 	bl	80071a8 <_Balloc>
 800739a:	4602      	mov	r2, r0
 800739c:	b928      	cbnz	r0, 80073aa <__i2b+0x1a>
 800739e:	4b05      	ldr	r3, [pc, #20]	@ (80073b4 <__i2b+0x24>)
 80073a0:	4805      	ldr	r0, [pc, #20]	@ (80073b8 <__i2b+0x28>)
 80073a2:	f240 1145 	movw	r1, #325	@ 0x145
 80073a6:	f000 fcbd 	bl	8007d24 <__assert_func>
 80073aa:	2301      	movs	r3, #1
 80073ac:	6144      	str	r4, [r0, #20]
 80073ae:	6103      	str	r3, [r0, #16]
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	08008554 	.word	0x08008554
 80073b8:	08008565 	.word	0x08008565

080073bc <__multiply>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	4614      	mov	r4, r2
 80073c2:	690a      	ldr	r2, [r1, #16]
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	bfa8      	it	ge
 80073ca:	4623      	movge	r3, r4
 80073cc:	460f      	mov	r7, r1
 80073ce:	bfa4      	itt	ge
 80073d0:	460c      	movge	r4, r1
 80073d2:	461f      	movge	r7, r3
 80073d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	6861      	ldr	r1, [r4, #4]
 80073e0:	eb0a 0609 	add.w	r6, sl, r9
 80073e4:	42b3      	cmp	r3, r6
 80073e6:	b085      	sub	sp, #20
 80073e8:	bfb8      	it	lt
 80073ea:	3101      	addlt	r1, #1
 80073ec:	f7ff fedc 	bl	80071a8 <_Balloc>
 80073f0:	b930      	cbnz	r0, 8007400 <__multiply+0x44>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b44      	ldr	r3, [pc, #272]	@ (8007508 <__multiply+0x14c>)
 80073f6:	4845      	ldr	r0, [pc, #276]	@ (800750c <__multiply+0x150>)
 80073f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073fc:	f000 fc92 	bl	8007d24 <__assert_func>
 8007400:	f100 0514 	add.w	r5, r0, #20
 8007404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007408:	462b      	mov	r3, r5
 800740a:	2200      	movs	r2, #0
 800740c:	4543      	cmp	r3, r8
 800740e:	d321      	bcc.n	8007454 <__multiply+0x98>
 8007410:	f107 0114 	add.w	r1, r7, #20
 8007414:	f104 0214 	add.w	r2, r4, #20
 8007418:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800741c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007420:	9302      	str	r3, [sp, #8]
 8007422:	1b13      	subs	r3, r2, r4
 8007424:	3b15      	subs	r3, #21
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	3304      	adds	r3, #4
 800742c:	f104 0715 	add.w	r7, r4, #21
 8007430:	42ba      	cmp	r2, r7
 8007432:	bf38      	it	cc
 8007434:	2304      	movcc	r3, #4
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	9103      	str	r1, [sp, #12]
 800743c:	428b      	cmp	r3, r1
 800743e:	d80c      	bhi.n	800745a <__multiply+0x9e>
 8007440:	2e00      	cmp	r6, #0
 8007442:	dd03      	ble.n	800744c <__multiply+0x90>
 8007444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007448:	2b00      	cmp	r3, #0
 800744a:	d05b      	beq.n	8007504 <__multiply+0x148>
 800744c:	6106      	str	r6, [r0, #16]
 800744e:	b005      	add	sp, #20
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	f843 2b04 	str.w	r2, [r3], #4
 8007458:	e7d8      	b.n	800740c <__multiply+0x50>
 800745a:	f8b1 a000 	ldrh.w	sl, [r1]
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	d024      	beq.n	80074ae <__multiply+0xf2>
 8007464:	f104 0e14 	add.w	lr, r4, #20
 8007468:	46a9      	mov	r9, r5
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007472:	f8d9 3000 	ldr.w	r3, [r9]
 8007476:	fa1f fb87 	uxth.w	fp, r7
 800747a:	b29b      	uxth	r3, r3
 800747c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007480:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007484:	f8d9 7000 	ldr.w	r7, [r9]
 8007488:	4463      	add	r3, ip
 800748a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800748e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007496:	b29b      	uxth	r3, r3
 8007498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800749c:	4572      	cmp	r2, lr
 800749e:	f849 3b04 	str.w	r3, [r9], #4
 80074a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074a6:	d8e2      	bhi.n	800746e <__multiply+0xb2>
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	f845 c003 	str.w	ip, [r5, r3]
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074b4:	3104      	adds	r1, #4
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d021      	beq.n	8007500 <__multiply+0x144>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	f104 0c14 	add.w	ip, r4, #20
 80074c2:	46ae      	mov	lr, r5
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	f8bc b000 	ldrh.w	fp, [ip]
 80074cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074d0:	fb09 770b 	mla	r7, r9, fp, r7
 80074d4:	4457      	add	r7, sl
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074dc:	f84e 3b04 	str.w	r3, [lr], #4
 80074e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074e8:	f8be 3000 	ldrh.w	r3, [lr]
 80074ec:	fb09 330a 	mla	r3, r9, sl, r3
 80074f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074f4:	4562      	cmp	r2, ip
 80074f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074fa:	d8e5      	bhi.n	80074c8 <__multiply+0x10c>
 80074fc:	9f01      	ldr	r7, [sp, #4]
 80074fe:	51eb      	str	r3, [r5, r7]
 8007500:	3504      	adds	r5, #4
 8007502:	e799      	b.n	8007438 <__multiply+0x7c>
 8007504:	3e01      	subs	r6, #1
 8007506:	e79b      	b.n	8007440 <__multiply+0x84>
 8007508:	08008554 	.word	0x08008554
 800750c:	08008565 	.word	0x08008565

08007510 <__pow5mult>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4615      	mov	r5, r2
 8007516:	f012 0203 	ands.w	r2, r2, #3
 800751a:	4607      	mov	r7, r0
 800751c:	460e      	mov	r6, r1
 800751e:	d007      	beq.n	8007530 <__pow5mult+0x20>
 8007520:	4c25      	ldr	r4, [pc, #148]	@ (80075b8 <__pow5mult+0xa8>)
 8007522:	3a01      	subs	r2, #1
 8007524:	2300      	movs	r3, #0
 8007526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800752a:	f7ff fe9f 	bl	800726c <__multadd>
 800752e:	4606      	mov	r6, r0
 8007530:	10ad      	asrs	r5, r5, #2
 8007532:	d03d      	beq.n	80075b0 <__pow5mult+0xa0>
 8007534:	69fc      	ldr	r4, [r7, #28]
 8007536:	b97c      	cbnz	r4, 8007558 <__pow5mult+0x48>
 8007538:	2010      	movs	r0, #16
 800753a:	f7ff fd7f 	bl	800703c <malloc>
 800753e:	4602      	mov	r2, r0
 8007540:	61f8      	str	r0, [r7, #28]
 8007542:	b928      	cbnz	r0, 8007550 <__pow5mult+0x40>
 8007544:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <__pow5mult+0xac>)
 8007546:	481e      	ldr	r0, [pc, #120]	@ (80075c0 <__pow5mult+0xb0>)
 8007548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800754c:	f000 fbea 	bl	8007d24 <__assert_func>
 8007550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007554:	6004      	str	r4, [r0, #0]
 8007556:	60c4      	str	r4, [r0, #12]
 8007558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800755c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007560:	b94c      	cbnz	r4, 8007576 <__pow5mult+0x66>
 8007562:	f240 2171 	movw	r1, #625	@ 0x271
 8007566:	4638      	mov	r0, r7
 8007568:	f7ff ff12 	bl	8007390 <__i2b>
 800756c:	2300      	movs	r3, #0
 800756e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007572:	4604      	mov	r4, r0
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	07eb      	lsls	r3, r5, #31
 800757c:	d50a      	bpl.n	8007594 <__pow5mult+0x84>
 800757e:	4631      	mov	r1, r6
 8007580:	4622      	mov	r2, r4
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff1a 	bl	80073bc <__multiply>
 8007588:	4631      	mov	r1, r6
 800758a:	4680      	mov	r8, r0
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff fe4b 	bl	8007228 <_Bfree>
 8007592:	4646      	mov	r6, r8
 8007594:	106d      	asrs	r5, r5, #1
 8007596:	d00b      	beq.n	80075b0 <__pow5mult+0xa0>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	b938      	cbnz	r0, 80075ac <__pow5mult+0x9c>
 800759c:	4622      	mov	r2, r4
 800759e:	4621      	mov	r1, r4
 80075a0:	4638      	mov	r0, r7
 80075a2:	f7ff ff0b 	bl	80073bc <__multiply>
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	f8c0 9000 	str.w	r9, [r0]
 80075ac:	4604      	mov	r4, r0
 80075ae:	e7e4      	b.n	800757a <__pow5mult+0x6a>
 80075b0:	4630      	mov	r0, r6
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	bf00      	nop
 80075b8:	080085c0 	.word	0x080085c0
 80075bc:	080084e5 	.word	0x080084e5
 80075c0:	08008565 	.word	0x08008565

080075c4 <__lshift>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	6849      	ldr	r1, [r1, #4]
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075d2:	68a3      	ldr	r3, [r4, #8]
 80075d4:	4607      	mov	r7, r0
 80075d6:	4691      	mov	r9, r2
 80075d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075dc:	f108 0601 	add.w	r6, r8, #1
 80075e0:	42b3      	cmp	r3, r6
 80075e2:	db0b      	blt.n	80075fc <__lshift+0x38>
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff fddf 	bl	80071a8 <_Balloc>
 80075ea:	4605      	mov	r5, r0
 80075ec:	b948      	cbnz	r0, 8007602 <__lshift+0x3e>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b28      	ldr	r3, [pc, #160]	@ (8007694 <__lshift+0xd0>)
 80075f2:	4829      	ldr	r0, [pc, #164]	@ (8007698 <__lshift+0xd4>)
 80075f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075f8:	f000 fb94 	bl	8007d24 <__assert_func>
 80075fc:	3101      	adds	r1, #1
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	e7ee      	b.n	80075e0 <__lshift+0x1c>
 8007602:	2300      	movs	r3, #0
 8007604:	f100 0114 	add.w	r1, r0, #20
 8007608:	f100 0210 	add.w	r2, r0, #16
 800760c:	4618      	mov	r0, r3
 800760e:	4553      	cmp	r3, sl
 8007610:	db33      	blt.n	800767a <__lshift+0xb6>
 8007612:	6920      	ldr	r0, [r4, #16]
 8007614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007618:	f104 0314 	add.w	r3, r4, #20
 800761c:	f019 091f 	ands.w	r9, r9, #31
 8007620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007628:	d02b      	beq.n	8007682 <__lshift+0xbe>
 800762a:	f1c9 0e20 	rsb	lr, r9, #32
 800762e:	468a      	mov	sl, r1
 8007630:	2200      	movs	r2, #0
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	fa00 f009 	lsl.w	r0, r0, r9
 8007638:	4310      	orrs	r0, r2
 800763a:	f84a 0b04 	str.w	r0, [sl], #4
 800763e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007642:	459c      	cmp	ip, r3
 8007644:	fa22 f20e 	lsr.w	r2, r2, lr
 8007648:	d8f3      	bhi.n	8007632 <__lshift+0x6e>
 800764a:	ebac 0304 	sub.w	r3, ip, r4
 800764e:	3b15      	subs	r3, #21
 8007650:	f023 0303 	bic.w	r3, r3, #3
 8007654:	3304      	adds	r3, #4
 8007656:	f104 0015 	add.w	r0, r4, #21
 800765a:	4584      	cmp	ip, r0
 800765c:	bf38      	it	cc
 800765e:	2304      	movcc	r3, #4
 8007660:	50ca      	str	r2, [r1, r3]
 8007662:	b10a      	cbz	r2, 8007668 <__lshift+0xa4>
 8007664:	f108 0602 	add.w	r6, r8, #2
 8007668:	3e01      	subs	r6, #1
 800766a:	4638      	mov	r0, r7
 800766c:	612e      	str	r6, [r5, #16]
 800766e:	4621      	mov	r1, r4
 8007670:	f7ff fdda 	bl	8007228 <_Bfree>
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	f842 0f04 	str.w	r0, [r2, #4]!
 800767e:	3301      	adds	r3, #1
 8007680:	e7c5      	b.n	800760e <__lshift+0x4a>
 8007682:	3904      	subs	r1, #4
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	f841 2f04 	str.w	r2, [r1, #4]!
 800768c:	459c      	cmp	ip, r3
 800768e:	d8f9      	bhi.n	8007684 <__lshift+0xc0>
 8007690:	e7ea      	b.n	8007668 <__lshift+0xa4>
 8007692:	bf00      	nop
 8007694:	08008554 	.word	0x08008554
 8007698:	08008565 	.word	0x08008565

0800769c <__mcmp>:
 800769c:	690a      	ldr	r2, [r1, #16]
 800769e:	4603      	mov	r3, r0
 80076a0:	6900      	ldr	r0, [r0, #16]
 80076a2:	1a80      	subs	r0, r0, r2
 80076a4:	b530      	push	{r4, r5, lr}
 80076a6:	d10e      	bne.n	80076c6 <__mcmp+0x2a>
 80076a8:	3314      	adds	r3, #20
 80076aa:	3114      	adds	r1, #20
 80076ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076bc:	4295      	cmp	r5, r2
 80076be:	d003      	beq.n	80076c8 <__mcmp+0x2c>
 80076c0:	d205      	bcs.n	80076ce <__mcmp+0x32>
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d3f3      	bcc.n	80076b4 <__mcmp+0x18>
 80076cc:	e7fb      	b.n	80076c6 <__mcmp+0x2a>
 80076ce:	2001      	movs	r0, #1
 80076d0:	e7f9      	b.n	80076c6 <__mcmp+0x2a>
	...

080076d4 <__mdiff>:
 80076d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4689      	mov	r9, r1
 80076da:	4606      	mov	r6, r0
 80076dc:	4611      	mov	r1, r2
 80076de:	4648      	mov	r0, r9
 80076e0:	4614      	mov	r4, r2
 80076e2:	f7ff ffdb 	bl	800769c <__mcmp>
 80076e6:	1e05      	subs	r5, r0, #0
 80076e8:	d112      	bne.n	8007710 <__mdiff+0x3c>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff fd5b 	bl	80071a8 <_Balloc>
 80076f2:	4602      	mov	r2, r0
 80076f4:	b928      	cbnz	r0, 8007702 <__mdiff+0x2e>
 80076f6:	4b3f      	ldr	r3, [pc, #252]	@ (80077f4 <__mdiff+0x120>)
 80076f8:	f240 2137 	movw	r1, #567	@ 0x237
 80076fc:	483e      	ldr	r0, [pc, #248]	@ (80077f8 <__mdiff+0x124>)
 80076fe:	f000 fb11 	bl	8007d24 <__assert_func>
 8007702:	2301      	movs	r3, #1
 8007704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007708:	4610      	mov	r0, r2
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007710:	bfbc      	itt	lt
 8007712:	464b      	movlt	r3, r9
 8007714:	46a1      	movlt	r9, r4
 8007716:	4630      	mov	r0, r6
 8007718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800771c:	bfba      	itte	lt
 800771e:	461c      	movlt	r4, r3
 8007720:	2501      	movlt	r5, #1
 8007722:	2500      	movge	r5, #0
 8007724:	f7ff fd40 	bl	80071a8 <_Balloc>
 8007728:	4602      	mov	r2, r0
 800772a:	b918      	cbnz	r0, 8007734 <__mdiff+0x60>
 800772c:	4b31      	ldr	r3, [pc, #196]	@ (80077f4 <__mdiff+0x120>)
 800772e:	f240 2145 	movw	r1, #581	@ 0x245
 8007732:	e7e3      	b.n	80076fc <__mdiff+0x28>
 8007734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007738:	6926      	ldr	r6, [r4, #16]
 800773a:	60c5      	str	r5, [r0, #12]
 800773c:	f109 0310 	add.w	r3, r9, #16
 8007740:	f109 0514 	add.w	r5, r9, #20
 8007744:	f104 0e14 	add.w	lr, r4, #20
 8007748:	f100 0b14 	add.w	fp, r0, #20
 800774c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007750:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	46d9      	mov	r9, fp
 8007758:	f04f 0c00 	mov.w	ip, #0
 800775c:	9b01      	ldr	r3, [sp, #4]
 800775e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007762:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	fa1f f38a 	uxth.w	r3, sl
 800776c:	4619      	mov	r1, r3
 800776e:	b283      	uxth	r3, r0
 8007770:	1acb      	subs	r3, r1, r3
 8007772:	0c00      	lsrs	r0, r0, #16
 8007774:	4463      	add	r3, ip
 8007776:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800777a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800777e:	b29b      	uxth	r3, r3
 8007780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007784:	4576      	cmp	r6, lr
 8007786:	f849 3b04 	str.w	r3, [r9], #4
 800778a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800778e:	d8e5      	bhi.n	800775c <__mdiff+0x88>
 8007790:	1b33      	subs	r3, r6, r4
 8007792:	3b15      	subs	r3, #21
 8007794:	f023 0303 	bic.w	r3, r3, #3
 8007798:	3415      	adds	r4, #21
 800779a:	3304      	adds	r3, #4
 800779c:	42a6      	cmp	r6, r4
 800779e:	bf38      	it	cc
 80077a0:	2304      	movcc	r3, #4
 80077a2:	441d      	add	r5, r3
 80077a4:	445b      	add	r3, fp
 80077a6:	461e      	mov	r6, r3
 80077a8:	462c      	mov	r4, r5
 80077aa:	4544      	cmp	r4, r8
 80077ac:	d30e      	bcc.n	80077cc <__mdiff+0xf8>
 80077ae:	f108 0103 	add.w	r1, r8, #3
 80077b2:	1b49      	subs	r1, r1, r5
 80077b4:	f021 0103 	bic.w	r1, r1, #3
 80077b8:	3d03      	subs	r5, #3
 80077ba:	45a8      	cmp	r8, r5
 80077bc:	bf38      	it	cc
 80077be:	2100      	movcc	r1, #0
 80077c0:	440b      	add	r3, r1
 80077c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077c6:	b191      	cbz	r1, 80077ee <__mdiff+0x11a>
 80077c8:	6117      	str	r7, [r2, #16]
 80077ca:	e79d      	b.n	8007708 <__mdiff+0x34>
 80077cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80077d0:	46e6      	mov	lr, ip
 80077d2:	0c08      	lsrs	r0, r1, #16
 80077d4:	fa1c fc81 	uxtah	ip, ip, r1
 80077d8:	4471      	add	r1, lr
 80077da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077de:	b289      	uxth	r1, r1
 80077e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077e4:	f846 1b04 	str.w	r1, [r6], #4
 80077e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077ec:	e7dd      	b.n	80077aa <__mdiff+0xd6>
 80077ee:	3f01      	subs	r7, #1
 80077f0:	e7e7      	b.n	80077c2 <__mdiff+0xee>
 80077f2:	bf00      	nop
 80077f4:	08008554 	.word	0x08008554
 80077f8:	08008565 	.word	0x08008565

080077fc <__d2b>:
 80077fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007800:	460f      	mov	r7, r1
 8007802:	2101      	movs	r1, #1
 8007804:	ec59 8b10 	vmov	r8, r9, d0
 8007808:	4616      	mov	r6, r2
 800780a:	f7ff fccd 	bl	80071a8 <_Balloc>
 800780e:	4604      	mov	r4, r0
 8007810:	b930      	cbnz	r0, 8007820 <__d2b+0x24>
 8007812:	4602      	mov	r2, r0
 8007814:	4b23      	ldr	r3, [pc, #140]	@ (80078a4 <__d2b+0xa8>)
 8007816:	4824      	ldr	r0, [pc, #144]	@ (80078a8 <__d2b+0xac>)
 8007818:	f240 310f 	movw	r1, #783	@ 0x30f
 800781c:	f000 fa82 	bl	8007d24 <__assert_func>
 8007820:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007828:	b10d      	cbz	r5, 800782e <__d2b+0x32>
 800782a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	f1b8 0300 	subs.w	r3, r8, #0
 8007834:	d023      	beq.n	800787e <__d2b+0x82>
 8007836:	4668      	mov	r0, sp
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	f7ff fd7c 	bl	8007336 <__lo0bits>
 800783e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007842:	b1d0      	cbz	r0, 800787a <__d2b+0x7e>
 8007844:	f1c0 0320 	rsb	r3, r0, #32
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	430b      	orrs	r3, r1
 800784e:	40c2      	lsrs	r2, r0
 8007850:	6163      	str	r3, [r4, #20]
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	9b01      	ldr	r3, [sp, #4]
 8007856:	61a3      	str	r3, [r4, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2201      	moveq	r2, #1
 800785e:	2202      	movne	r2, #2
 8007860:	6122      	str	r2, [r4, #16]
 8007862:	b1a5      	cbz	r5, 800788e <__d2b+0x92>
 8007864:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007868:	4405      	add	r5, r0
 800786a:	603d      	str	r5, [r7, #0]
 800786c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007870:	6030      	str	r0, [r6, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	b003      	add	sp, #12
 8007876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800787a:	6161      	str	r1, [r4, #20]
 800787c:	e7ea      	b.n	8007854 <__d2b+0x58>
 800787e:	a801      	add	r0, sp, #4
 8007880:	f7ff fd59 	bl	8007336 <__lo0bits>
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	6163      	str	r3, [r4, #20]
 8007888:	3020      	adds	r0, #32
 800788a:	2201      	movs	r2, #1
 800788c:	e7e8      	b.n	8007860 <__d2b+0x64>
 800788e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007892:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007896:	6038      	str	r0, [r7, #0]
 8007898:	6918      	ldr	r0, [r3, #16]
 800789a:	f7ff fd2d 	bl	80072f8 <__hi0bits>
 800789e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078a2:	e7e5      	b.n	8007870 <__d2b+0x74>
 80078a4:	08008554 	.word	0x08008554
 80078a8:	08008565 	.word	0x08008565

080078ac <__ssputs_r>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	688e      	ldr	r6, [r1, #8]
 80078b2:	461f      	mov	r7, r3
 80078b4:	42be      	cmp	r6, r7
 80078b6:	680b      	ldr	r3, [r1, #0]
 80078b8:	4682      	mov	sl, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4690      	mov	r8, r2
 80078be:	d82d      	bhi.n	800791c <__ssputs_r+0x70>
 80078c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078c8:	d026      	beq.n	8007918 <__ssputs_r+0x6c>
 80078ca:	6965      	ldr	r5, [r4, #20]
 80078cc:	6909      	ldr	r1, [r1, #16]
 80078ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d2:	eba3 0901 	sub.w	r9, r3, r1
 80078d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078da:	1c7b      	adds	r3, r7, #1
 80078dc:	444b      	add	r3, r9
 80078de:	106d      	asrs	r5, r5, #1
 80078e0:	429d      	cmp	r5, r3
 80078e2:	bf38      	it	cc
 80078e4:	461d      	movcc	r5, r3
 80078e6:	0553      	lsls	r3, r2, #21
 80078e8:	d527      	bpl.n	800793a <__ssputs_r+0x8e>
 80078ea:	4629      	mov	r1, r5
 80078ec:	f7ff fbd0 	bl	8007090 <_malloc_r>
 80078f0:	4606      	mov	r6, r0
 80078f2:	b360      	cbz	r0, 800794e <__ssputs_r+0xa2>
 80078f4:	6921      	ldr	r1, [r4, #16]
 80078f6:	464a      	mov	r2, r9
 80078f8:	f000 fa06 	bl	8007d08 <memcpy>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	6126      	str	r6, [r4, #16]
 800790a:	6165      	str	r5, [r4, #20]
 800790c:	444e      	add	r6, r9
 800790e:	eba5 0509 	sub.w	r5, r5, r9
 8007912:	6026      	str	r6, [r4, #0]
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	463e      	mov	r6, r7
 8007918:	42be      	cmp	r6, r7
 800791a:	d900      	bls.n	800791e <__ssputs_r+0x72>
 800791c:	463e      	mov	r6, r7
 800791e:	6820      	ldr	r0, [r4, #0]
 8007920:	4632      	mov	r2, r6
 8007922:	4641      	mov	r1, r8
 8007924:	f000 f9c6 	bl	8007cb4 <memmove>
 8007928:	68a3      	ldr	r3, [r4, #8]
 800792a:	1b9b      	subs	r3, r3, r6
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4433      	add	r3, r6
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	2000      	movs	r0, #0
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	462a      	mov	r2, r5
 800793c:	f000 fa36 	bl	8007dac <_realloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d1e0      	bne.n	8007908 <__ssputs_r+0x5c>
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	4650      	mov	r0, sl
 800794a:	f7ff fb2d 	bl	8006fa8 <_free_r>
 800794e:	230c      	movs	r3, #12
 8007950:	f8ca 3000 	str.w	r3, [sl]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e7e9      	b.n	8007936 <__ssputs_r+0x8a>
	...

08007964 <_svfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4698      	mov	r8, r3
 800796a:	898b      	ldrh	r3, [r1, #12]
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	b09d      	sub	sp, #116	@ 0x74
 8007970:	4607      	mov	r7, r0
 8007972:	460d      	mov	r5, r1
 8007974:	4614      	mov	r4, r2
 8007976:	d510      	bpl.n	800799a <_svfiprintf_r+0x36>
 8007978:	690b      	ldr	r3, [r1, #16]
 800797a:	b973      	cbnz	r3, 800799a <_svfiprintf_r+0x36>
 800797c:	2140      	movs	r1, #64	@ 0x40
 800797e:	f7ff fb87 	bl	8007090 <_malloc_r>
 8007982:	6028      	str	r0, [r5, #0]
 8007984:	6128      	str	r0, [r5, #16]
 8007986:	b930      	cbnz	r0, 8007996 <_svfiprintf_r+0x32>
 8007988:	230c      	movs	r3, #12
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	@ 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	2340      	movs	r3, #64	@ 0x40
 8007998:	616b      	str	r3, [r5, #20]
 800799a:	2300      	movs	r3, #0
 800799c:	9309      	str	r3, [sp, #36]	@ 0x24
 800799e:	2320      	movs	r3, #32
 80079a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a8:	2330      	movs	r3, #48	@ 0x30
 80079aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b48 <_svfiprintf_r+0x1e4>
 80079ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079b2:	f04f 0901 	mov.w	r9, #1
 80079b6:	4623      	mov	r3, r4
 80079b8:	469a      	mov	sl, r3
 80079ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079be:	b10a      	cbz	r2, 80079c4 <_svfiprintf_r+0x60>
 80079c0:	2a25      	cmp	r2, #37	@ 0x25
 80079c2:	d1f9      	bne.n	80079b8 <_svfiprintf_r+0x54>
 80079c4:	ebba 0b04 	subs.w	fp, sl, r4
 80079c8:	d00b      	beq.n	80079e2 <_svfiprintf_r+0x7e>
 80079ca:	465b      	mov	r3, fp
 80079cc:	4622      	mov	r2, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff ff6b 	bl	80078ac <__ssputs_r>
 80079d6:	3001      	adds	r0, #1
 80079d8:	f000 80a7 	beq.w	8007b2a <_svfiprintf_r+0x1c6>
 80079dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079de:	445a      	add	r2, fp
 80079e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079e2:	f89a 3000 	ldrb.w	r3, [sl]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 809f 	beq.w	8007b2a <_svfiprintf_r+0x1c6>
 80079ec:	2300      	movs	r3, #0
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f6:	f10a 0a01 	add.w	sl, sl, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a04:	4654      	mov	r4, sl
 8007a06:	2205      	movs	r2, #5
 8007a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0c:	484e      	ldr	r0, [pc, #312]	@ (8007b48 <_svfiprintf_r+0x1e4>)
 8007a0e:	f7f8 fc07 	bl	8000220 <memchr>
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	b9d8      	cbnz	r0, 8007a4e <_svfiprintf_r+0xea>
 8007a16:	06d0      	lsls	r0, r2, #27
 8007a18:	bf44      	itt	mi
 8007a1a:	2320      	movmi	r3, #32
 8007a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a20:	0711      	lsls	r1, r2, #28
 8007a22:	bf44      	itt	mi
 8007a24:	232b      	movmi	r3, #43	@ 0x2b
 8007a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a30:	d015      	beq.n	8007a5e <_svfiprintf_r+0xfa>
 8007a32:	9a07      	ldr	r2, [sp, #28]
 8007a34:	4654      	mov	r4, sl
 8007a36:	2000      	movs	r0, #0
 8007a38:	f04f 0c0a 	mov.w	ip, #10
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a42:	3b30      	subs	r3, #48	@ 0x30
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d94b      	bls.n	8007ae0 <_svfiprintf_r+0x17c>
 8007a48:	b1b0      	cbz	r0, 8007a78 <_svfiprintf_r+0x114>
 8007a4a:	9207      	str	r2, [sp, #28]
 8007a4c:	e014      	b.n	8007a78 <_svfiprintf_r+0x114>
 8007a4e:	eba0 0308 	sub.w	r3, r0, r8
 8007a52:	fa09 f303 	lsl.w	r3, r9, r3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	46a2      	mov	sl, r4
 8007a5c:	e7d2      	b.n	8007a04 <_svfiprintf_r+0xa0>
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	1d19      	adds	r1, r3, #4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	9103      	str	r1, [sp, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfbb      	ittet	lt
 8007a6a:	425b      	neglt	r3, r3
 8007a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a70:	9307      	strge	r3, [sp, #28]
 8007a72:	9307      	strlt	r3, [sp, #28]
 8007a74:	bfb8      	it	lt
 8007a76:	9204      	strlt	r2, [sp, #16]
 8007a78:	7823      	ldrb	r3, [r4, #0]
 8007a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a7c:	d10a      	bne.n	8007a94 <_svfiprintf_r+0x130>
 8007a7e:	7863      	ldrb	r3, [r4, #1]
 8007a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a82:	d132      	bne.n	8007aea <_svfiprintf_r+0x186>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	1d1a      	adds	r2, r3, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	9203      	str	r2, [sp, #12]
 8007a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a90:	3402      	adds	r4, #2
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b58 <_svfiprintf_r+0x1f4>
 8007a98:	7821      	ldrb	r1, [r4, #0]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	f7f8 fbbf 	bl	8000220 <memchr>
 8007aa2:	b138      	cbz	r0, 8007ab4 <_svfiprintf_r+0x150>
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	eba0 000a 	sub.w	r0, r0, sl
 8007aaa:	2240      	movs	r2, #64	@ 0x40
 8007aac:	4082      	lsls	r2, r0
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab8:	4824      	ldr	r0, [pc, #144]	@ (8007b4c <_svfiprintf_r+0x1e8>)
 8007aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007abe:	2206      	movs	r2, #6
 8007ac0:	f7f8 fbae 	bl	8000220 <memchr>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d036      	beq.n	8007b36 <_svfiprintf_r+0x1d2>
 8007ac8:	4b21      	ldr	r3, [pc, #132]	@ (8007b50 <_svfiprintf_r+0x1ec>)
 8007aca:	bb1b      	cbnz	r3, 8007b14 <_svfiprintf_r+0x1b0>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	3307      	adds	r3, #7
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	9303      	str	r3, [sp, #12]
 8007ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ada:	4433      	add	r3, r6
 8007adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ade:	e76a      	b.n	80079b6 <_svfiprintf_r+0x52>
 8007ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	e7a8      	b.n	8007a3c <_svfiprintf_r+0xd8>
 8007aea:	2300      	movs	r3, #0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	4619      	mov	r1, r3
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4620      	mov	r0, r4
 8007af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afc:	3a30      	subs	r2, #48	@ 0x30
 8007afe:	2a09      	cmp	r2, #9
 8007b00:	d903      	bls.n	8007b0a <_svfiprintf_r+0x1a6>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c6      	beq.n	8007a94 <_svfiprintf_r+0x130>
 8007b06:	9105      	str	r1, [sp, #20]
 8007b08:	e7c4      	b.n	8007a94 <_svfiprintf_r+0x130>
 8007b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0e:	4604      	mov	r4, r0
 8007b10:	2301      	movs	r3, #1
 8007b12:	e7f0      	b.n	8007af6 <_svfiprintf_r+0x192>
 8007b14:	ab03      	add	r3, sp, #12
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b54 <_svfiprintf_r+0x1f0>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f7fd fe98 	bl	8005854 <_printf_float>
 8007b24:	1c42      	adds	r2, r0, #1
 8007b26:	4606      	mov	r6, r0
 8007b28:	d1d6      	bne.n	8007ad8 <_svfiprintf_r+0x174>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	065b      	lsls	r3, r3, #25
 8007b2e:	f53f af2d 	bmi.w	800798c <_svfiprintf_r+0x28>
 8007b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b34:	e72c      	b.n	8007990 <_svfiprintf_r+0x2c>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <_svfiprintf_r+0x1f0>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7fe f91f 	bl	8005d84 <_printf_i>
 8007b46:	e7ed      	b.n	8007b24 <_svfiprintf_r+0x1c0>
 8007b48:	080086c0 	.word	0x080086c0
 8007b4c:	080086ca 	.word	0x080086ca
 8007b50:	08005855 	.word	0x08005855
 8007b54:	080078ad 	.word	0x080078ad
 8007b58:	080086c6 	.word	0x080086c6

08007b5c <__sflush_r>:
 8007b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	0716      	lsls	r6, r2, #28
 8007b66:	4605      	mov	r5, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	d454      	bmi.n	8007c16 <__sflush_r+0xba>
 8007b6c:	684b      	ldr	r3, [r1, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dc02      	bgt.n	8007b78 <__sflush_r+0x1c>
 8007b72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dd48      	ble.n	8007c0a <__sflush_r+0xae>
 8007b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	d045      	beq.n	8007c0a <__sflush_r+0xae>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b84:	682f      	ldr	r7, [r5, #0]
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	d030      	beq.n	8007bee <__sflush_r+0x92>
 8007b8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	0759      	lsls	r1, r3, #29
 8007b92:	d505      	bpl.n	8007ba0 <__sflush_r+0x44>
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b9a:	b10b      	cbz	r3, 8007ba0 <__sflush_r+0x44>
 8007b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b0      	blx	r6
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	d106      	bne.n	8007bbe <__sflush_r+0x62>
 8007bb0:	6829      	ldr	r1, [r5, #0]
 8007bb2:	291d      	cmp	r1, #29
 8007bb4:	d82b      	bhi.n	8007c0e <__sflush_r+0xb2>
 8007bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c60 <__sflush_r+0x104>)
 8007bb8:	410a      	asrs	r2, r1
 8007bba:	07d6      	lsls	r6, r2, #31
 8007bbc:	d427      	bmi.n	8007c0e <__sflush_r+0xb2>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6062      	str	r2, [r4, #4]
 8007bc2:	04d9      	lsls	r1, r3, #19
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	d504      	bpl.n	8007bd4 <__sflush_r+0x78>
 8007bca:	1c42      	adds	r2, r0, #1
 8007bcc:	d101      	bne.n	8007bd2 <__sflush_r+0x76>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b903      	cbnz	r3, 8007bd4 <__sflush_r+0x78>
 8007bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bd6:	602f      	str	r7, [r5, #0]
 8007bd8:	b1b9      	cbz	r1, 8007c0a <__sflush_r+0xae>
 8007bda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bde:	4299      	cmp	r1, r3
 8007be0:	d002      	beq.n	8007be8 <__sflush_r+0x8c>
 8007be2:	4628      	mov	r0, r5
 8007be4:	f7ff f9e0 	bl	8006fa8 <_free_r>
 8007be8:	2300      	movs	r3, #0
 8007bea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bec:	e00d      	b.n	8007c0a <__sflush_r+0xae>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b0      	blx	r6
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	1c50      	adds	r0, r2, #1
 8007bf8:	d1c9      	bne.n	8007b8e <__sflush_r+0x32>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0c6      	beq.n	8007b8e <__sflush_r+0x32>
 8007c00:	2b1d      	cmp	r3, #29
 8007c02:	d001      	beq.n	8007c08 <__sflush_r+0xac>
 8007c04:	2b16      	cmp	r3, #22
 8007c06:	d11e      	bne.n	8007c46 <__sflush_r+0xea>
 8007c08:	602f      	str	r7, [r5, #0]
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e022      	b.n	8007c54 <__sflush_r+0xf8>
 8007c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	e01b      	b.n	8007c4e <__sflush_r+0xf2>
 8007c16:	690f      	ldr	r7, [r1, #16]
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	d0f6      	beq.n	8007c0a <__sflush_r+0xae>
 8007c1c:	0793      	lsls	r3, r2, #30
 8007c1e:	680e      	ldr	r6, [r1, #0]
 8007c20:	bf08      	it	eq
 8007c22:	694b      	ldreq	r3, [r1, #20]
 8007c24:	600f      	str	r7, [r1, #0]
 8007c26:	bf18      	it	ne
 8007c28:	2300      	movne	r3, #0
 8007c2a:	eba6 0807 	sub.w	r8, r6, r7
 8007c2e:	608b      	str	r3, [r1, #8]
 8007c30:	f1b8 0f00 	cmp.w	r8, #0
 8007c34:	dde9      	ble.n	8007c0a <__sflush_r+0xae>
 8007c36:	6a21      	ldr	r1, [r4, #32]
 8007c38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c3a:	4643      	mov	r3, r8
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b0      	blx	r6
 8007c42:	2800      	cmp	r0, #0
 8007c44:	dc08      	bgt.n	8007c58 <__sflush_r+0xfc>
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	4407      	add	r7, r0
 8007c5a:	eba8 0800 	sub.w	r8, r8, r0
 8007c5e:	e7e7      	b.n	8007c30 <__sflush_r+0xd4>
 8007c60:	dfbffffe 	.word	0xdfbffffe

08007c64 <_fflush_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	690b      	ldr	r3, [r1, #16]
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b913      	cbnz	r3, 8007c74 <_fflush_r+0x10>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	4628      	mov	r0, r5
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	b118      	cbz	r0, 8007c7e <_fflush_r+0x1a>
 8007c76:	6a03      	ldr	r3, [r0, #32]
 8007c78:	b90b      	cbnz	r3, 8007c7e <_fflush_r+0x1a>
 8007c7a:	f7fe fa2f 	bl	80060dc <__sinit>
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0f3      	beq.n	8007c6e <_fflush_r+0xa>
 8007c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c88:	07d0      	lsls	r0, r2, #31
 8007c8a:	d404      	bmi.n	8007c96 <_fflush_r+0x32>
 8007c8c:	0599      	lsls	r1, r3, #22
 8007c8e:	d402      	bmi.n	8007c96 <_fflush_r+0x32>
 8007c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c92:	f7fe fb3a 	bl	800630a <__retarget_lock_acquire_recursive>
 8007c96:	4628      	mov	r0, r5
 8007c98:	4621      	mov	r1, r4
 8007c9a:	f7ff ff5f 	bl	8007b5c <__sflush_r>
 8007c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ca0:	07da      	lsls	r2, r3, #31
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	d4e4      	bmi.n	8007c70 <_fflush_r+0xc>
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	059b      	lsls	r3, r3, #22
 8007caa:	d4e1      	bmi.n	8007c70 <_fflush_r+0xc>
 8007cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cae:	f7fe fb2d 	bl	800630c <__retarget_lock_release_recursive>
 8007cb2:	e7dd      	b.n	8007c70 <_fflush_r+0xc>

08007cb4 <memmove>:
 8007cb4:	4288      	cmp	r0, r1
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	eb01 0402 	add.w	r4, r1, r2
 8007cbc:	d902      	bls.n	8007cc4 <memmove+0x10>
 8007cbe:	4284      	cmp	r4, r0
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	d807      	bhi.n	8007cd4 <memmove+0x20>
 8007cc4:	1e43      	subs	r3, r0, #1
 8007cc6:	42a1      	cmp	r1, r4
 8007cc8:	d008      	beq.n	8007cdc <memmove+0x28>
 8007cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cd2:	e7f8      	b.n	8007cc6 <memmove+0x12>
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	428a      	cmp	r2, r1
 8007cda:	d100      	bne.n	8007cde <memmove+0x2a>
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ce6:	e7f7      	b.n	8007cd8 <memmove+0x24>

08007ce8 <_sbrk_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d06      	ldr	r5, [pc, #24]	@ (8007d04 <_sbrk_r+0x1c>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7fa fba2 	bl	800243c <_sbrk>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_sbrk_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_sbrk_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	200005c4 	.word	0x200005c4

08007d08 <memcpy>:
 8007d08:	440a      	add	r2, r1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	4770      	bx	lr
 8007d14:	b510      	push	{r4, lr}
 8007d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1e:	4291      	cmp	r1, r2
 8007d20:	d1f9      	bne.n	8007d16 <memcpy+0xe>
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <__assert_func>:
 8007d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d26:	4614      	mov	r4, r2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <__assert_func+0x2c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4605      	mov	r5, r0
 8007d30:	68d8      	ldr	r0, [r3, #12]
 8007d32:	b954      	cbnz	r4, 8007d4a <__assert_func+0x26>
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <__assert_func+0x30>)
 8007d36:	461c      	mov	r4, r3
 8007d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d3c:	9100      	str	r1, [sp, #0]
 8007d3e:	462b      	mov	r3, r5
 8007d40:	4905      	ldr	r1, [pc, #20]	@ (8007d58 <__assert_func+0x34>)
 8007d42:	f000 f86f 	bl	8007e24 <fiprintf>
 8007d46:	f000 f87f 	bl	8007e48 <abort>
 8007d4a:	4b04      	ldr	r3, [pc, #16]	@ (8007d5c <__assert_func+0x38>)
 8007d4c:	e7f4      	b.n	8007d38 <__assert_func+0x14>
 8007d4e:	bf00      	nop
 8007d50:	20000018 	.word	0x20000018
 8007d54:	08008716 	.word	0x08008716
 8007d58:	080086e8 	.word	0x080086e8
 8007d5c:	080086db 	.word	0x080086db

08007d60 <_calloc_r>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	fba1 5402 	umull	r5, r4, r1, r2
 8007d66:	b93c      	cbnz	r4, 8007d78 <_calloc_r+0x18>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7ff f991 	bl	8007090 <_malloc_r>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	b928      	cbnz	r0, 8007d7e <_calloc_r+0x1e>
 8007d72:	2600      	movs	r6, #0
 8007d74:	4630      	mov	r0, r6
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	220c      	movs	r2, #12
 8007d7a:	6002      	str	r2, [r0, #0]
 8007d7c:	e7f9      	b.n	8007d72 <_calloc_r+0x12>
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4621      	mov	r1, r4
 8007d82:	f7fe fa44 	bl	800620e <memset>
 8007d86:	e7f5      	b.n	8007d74 <_calloc_r+0x14>

08007d88 <__ascii_mbtowc>:
 8007d88:	b082      	sub	sp, #8
 8007d8a:	b901      	cbnz	r1, 8007d8e <__ascii_mbtowc+0x6>
 8007d8c:	a901      	add	r1, sp, #4
 8007d8e:	b142      	cbz	r2, 8007da2 <__ascii_mbtowc+0x1a>
 8007d90:	b14b      	cbz	r3, 8007da6 <__ascii_mbtowc+0x1e>
 8007d92:	7813      	ldrb	r3, [r2, #0]
 8007d94:	600b      	str	r3, [r1, #0]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	1e10      	subs	r0, r2, #0
 8007d9a:	bf18      	it	ne
 8007d9c:	2001      	movne	r0, #1
 8007d9e:	b002      	add	sp, #8
 8007da0:	4770      	bx	lr
 8007da2:	4610      	mov	r0, r2
 8007da4:	e7fb      	b.n	8007d9e <__ascii_mbtowc+0x16>
 8007da6:	f06f 0001 	mvn.w	r0, #1
 8007daa:	e7f8      	b.n	8007d9e <__ascii_mbtowc+0x16>

08007dac <_realloc_r>:
 8007dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	4680      	mov	r8, r0
 8007db2:	4615      	mov	r5, r2
 8007db4:	460c      	mov	r4, r1
 8007db6:	b921      	cbnz	r1, 8007dc2 <_realloc_r+0x16>
 8007db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	f7ff b967 	b.w	8007090 <_malloc_r>
 8007dc2:	b92a      	cbnz	r2, 8007dd0 <_realloc_r+0x24>
 8007dc4:	f7ff f8f0 	bl	8006fa8 <_free_r>
 8007dc8:	2400      	movs	r4, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd0:	f000 f841 	bl	8007e56 <_malloc_usable_size_r>
 8007dd4:	4285      	cmp	r5, r0
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	d802      	bhi.n	8007de0 <_realloc_r+0x34>
 8007dda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dde:	d8f4      	bhi.n	8007dca <_realloc_r+0x1e>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7ff f954 	bl	8007090 <_malloc_r>
 8007de8:	4607      	mov	r7, r0
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d0ec      	beq.n	8007dc8 <_realloc_r+0x1c>
 8007dee:	42b5      	cmp	r5, r6
 8007df0:	462a      	mov	r2, r5
 8007df2:	4621      	mov	r1, r4
 8007df4:	bf28      	it	cs
 8007df6:	4632      	movcs	r2, r6
 8007df8:	f7ff ff86 	bl	8007d08 <memcpy>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f7ff f8d2 	bl	8006fa8 <_free_r>
 8007e04:	463c      	mov	r4, r7
 8007e06:	e7e0      	b.n	8007dca <_realloc_r+0x1e>

08007e08 <__ascii_wctomb>:
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	b141      	cbz	r1, 8007e20 <__ascii_wctomb+0x18>
 8007e0e:	2aff      	cmp	r2, #255	@ 0xff
 8007e10:	d904      	bls.n	8007e1c <__ascii_wctomb+0x14>
 8007e12:	228a      	movs	r2, #138	@ 0x8a
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	4770      	bx	lr
 8007e1c:	700a      	strb	r2, [r1, #0]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	4770      	bx	lr
	...

08007e24 <fiprintf>:
 8007e24:	b40e      	push	{r1, r2, r3}
 8007e26:	b503      	push	{r0, r1, lr}
 8007e28:	4601      	mov	r1, r0
 8007e2a:	ab03      	add	r3, sp, #12
 8007e2c:	4805      	ldr	r0, [pc, #20]	@ (8007e44 <fiprintf+0x20>)
 8007e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e32:	6800      	ldr	r0, [r0, #0]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	f000 f83f 	bl	8007eb8 <_vfiprintf_r>
 8007e3a:	b002      	add	sp, #8
 8007e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e40:	b003      	add	sp, #12
 8007e42:	4770      	bx	lr
 8007e44:	20000018 	.word	0x20000018

08007e48 <abort>:
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	2006      	movs	r0, #6
 8007e4c:	f000 fa08 	bl	8008260 <raise>
 8007e50:	2001      	movs	r0, #1
 8007e52:	f7fa fa7a 	bl	800234a <_exit>

08007e56 <_malloc_usable_size_r>:
 8007e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5a:	1f18      	subs	r0, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfbc      	itt	lt
 8007e60:	580b      	ldrlt	r3, [r1, r0]
 8007e62:	18c0      	addlt	r0, r0, r3
 8007e64:	4770      	bx	lr

08007e66 <__sfputc_r>:
 8007e66:	6893      	ldr	r3, [r2, #8]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	b410      	push	{r4}
 8007e6e:	6093      	str	r3, [r2, #8]
 8007e70:	da08      	bge.n	8007e84 <__sfputc_r+0x1e>
 8007e72:	6994      	ldr	r4, [r2, #24]
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	db01      	blt.n	8007e7c <__sfputc_r+0x16>
 8007e78:	290a      	cmp	r1, #10
 8007e7a:	d103      	bne.n	8007e84 <__sfputc_r+0x1e>
 8007e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e80:	f000 b932 	b.w	80080e8 <__swbuf_r>
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	1c58      	adds	r0, r3, #1
 8007e88:	6010      	str	r0, [r2, #0]
 8007e8a:	7019      	strb	r1, [r3, #0]
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <__sfputs_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	4606      	mov	r6, r0
 8007e98:	460f      	mov	r7, r1
 8007e9a:	4614      	mov	r4, r2
 8007e9c:	18d5      	adds	r5, r2, r3
 8007e9e:	42ac      	cmp	r4, r5
 8007ea0:	d101      	bne.n	8007ea6 <__sfputs_r+0x12>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e007      	b.n	8007eb6 <__sfputs_r+0x22>
 8007ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eaa:	463a      	mov	r2, r7
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff ffda 	bl	8007e66 <__sfputc_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	d1f3      	bne.n	8007e9e <__sfputs_r+0xa>
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007eb8 <_vfiprintf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	b09d      	sub	sp, #116	@ 0x74
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	4698      	mov	r8, r3
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	b118      	cbz	r0, 8007ed0 <_vfiprintf_r+0x18>
 8007ec8:	6a03      	ldr	r3, [r0, #32]
 8007eca:	b90b      	cbnz	r3, 8007ed0 <_vfiprintf_r+0x18>
 8007ecc:	f7fe f906 	bl	80060dc <__sinit>
 8007ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed2:	07d9      	lsls	r1, r3, #31
 8007ed4:	d405      	bmi.n	8007ee2 <_vfiprintf_r+0x2a>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	059a      	lsls	r2, r3, #22
 8007eda:	d402      	bmi.n	8007ee2 <_vfiprintf_r+0x2a>
 8007edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ede:	f7fe fa14 	bl	800630a <__retarget_lock_acquire_recursive>
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	071b      	lsls	r3, r3, #28
 8007ee6:	d501      	bpl.n	8007eec <_vfiprintf_r+0x34>
 8007ee8:	692b      	ldr	r3, [r5, #16]
 8007eea:	b99b      	cbnz	r3, 8007f14 <_vfiprintf_r+0x5c>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f938 	bl	8008164 <__swsetup_r>
 8007ef4:	b170      	cbz	r0, 8007f14 <_vfiprintf_r+0x5c>
 8007ef6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ef8:	07dc      	lsls	r4, r3, #31
 8007efa:	d504      	bpl.n	8007f06 <_vfiprintf_r+0x4e>
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	b01d      	add	sp, #116	@ 0x74
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	0598      	lsls	r0, r3, #22
 8007f0a:	d4f7      	bmi.n	8007efc <_vfiprintf_r+0x44>
 8007f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f0e:	f7fe f9fd 	bl	800630c <__retarget_lock_release_recursive>
 8007f12:	e7f3      	b.n	8007efc <_vfiprintf_r+0x44>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f22:	2330      	movs	r3, #48	@ 0x30
 8007f24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080d4 <_vfiprintf_r+0x21c>
 8007f28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f2c:	f04f 0901 	mov.w	r9, #1
 8007f30:	4623      	mov	r3, r4
 8007f32:	469a      	mov	sl, r3
 8007f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f38:	b10a      	cbz	r2, 8007f3e <_vfiprintf_r+0x86>
 8007f3a:	2a25      	cmp	r2, #37	@ 0x25
 8007f3c:	d1f9      	bne.n	8007f32 <_vfiprintf_r+0x7a>
 8007f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f42:	d00b      	beq.n	8007f5c <_vfiprintf_r+0xa4>
 8007f44:	465b      	mov	r3, fp
 8007f46:	4622      	mov	r2, r4
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7ff ffa2 	bl	8007e94 <__sfputs_r>
 8007f50:	3001      	adds	r0, #1
 8007f52:	f000 80a7 	beq.w	80080a4 <_vfiprintf_r+0x1ec>
 8007f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f58:	445a      	add	r2, fp
 8007f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 809f 	beq.w	80080a4 <_vfiprintf_r+0x1ec>
 8007f66:	2300      	movs	r3, #0
 8007f68:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f70:	f10a 0a01 	add.w	sl, sl, #1
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	9307      	str	r3, [sp, #28]
 8007f78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f7e:	4654      	mov	r4, sl
 8007f80:	2205      	movs	r2, #5
 8007f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f86:	4853      	ldr	r0, [pc, #332]	@ (80080d4 <_vfiprintf_r+0x21c>)
 8007f88:	f7f8 f94a 	bl	8000220 <memchr>
 8007f8c:	9a04      	ldr	r2, [sp, #16]
 8007f8e:	b9d8      	cbnz	r0, 8007fc8 <_vfiprintf_r+0x110>
 8007f90:	06d1      	lsls	r1, r2, #27
 8007f92:	bf44      	itt	mi
 8007f94:	2320      	movmi	r3, #32
 8007f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f9a:	0713      	lsls	r3, r2, #28
 8007f9c:	bf44      	itt	mi
 8007f9e:	232b      	movmi	r3, #43	@ 0x2b
 8007fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007faa:	d015      	beq.n	8007fd8 <_vfiprintf_r+0x120>
 8007fac:	9a07      	ldr	r2, [sp, #28]
 8007fae:	4654      	mov	r4, sl
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fbc:	3b30      	subs	r3, #48	@ 0x30
 8007fbe:	2b09      	cmp	r3, #9
 8007fc0:	d94b      	bls.n	800805a <_vfiprintf_r+0x1a2>
 8007fc2:	b1b0      	cbz	r0, 8007ff2 <_vfiprintf_r+0x13a>
 8007fc4:	9207      	str	r2, [sp, #28]
 8007fc6:	e014      	b.n	8007ff2 <_vfiprintf_r+0x13a>
 8007fc8:	eba0 0308 	sub.w	r3, r0, r8
 8007fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	46a2      	mov	sl, r4
 8007fd6:	e7d2      	b.n	8007f7e <_vfiprintf_r+0xc6>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	1d19      	adds	r1, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	9103      	str	r1, [sp, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bfbb      	ittet	lt
 8007fe4:	425b      	neglt	r3, r3
 8007fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8007fea:	9307      	strge	r3, [sp, #28]
 8007fec:	9307      	strlt	r3, [sp, #28]
 8007fee:	bfb8      	it	lt
 8007ff0:	9204      	strlt	r2, [sp, #16]
 8007ff2:	7823      	ldrb	r3, [r4, #0]
 8007ff4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ff6:	d10a      	bne.n	800800e <_vfiprintf_r+0x156>
 8007ff8:	7863      	ldrb	r3, [r4, #1]
 8007ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ffc:	d132      	bne.n	8008064 <_vfiprintf_r+0x1ac>
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9203      	str	r2, [sp, #12]
 8008006:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800800a:	3402      	adds	r4, #2
 800800c:	9305      	str	r3, [sp, #20]
 800800e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080e4 <_vfiprintf_r+0x22c>
 8008012:	7821      	ldrb	r1, [r4, #0]
 8008014:	2203      	movs	r2, #3
 8008016:	4650      	mov	r0, sl
 8008018:	f7f8 f902 	bl	8000220 <memchr>
 800801c:	b138      	cbz	r0, 800802e <_vfiprintf_r+0x176>
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	eba0 000a 	sub.w	r0, r0, sl
 8008024:	2240      	movs	r2, #64	@ 0x40
 8008026:	4082      	lsls	r2, r0
 8008028:	4313      	orrs	r3, r2
 800802a:	3401      	adds	r4, #1
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008032:	4829      	ldr	r0, [pc, #164]	@ (80080d8 <_vfiprintf_r+0x220>)
 8008034:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008038:	2206      	movs	r2, #6
 800803a:	f7f8 f8f1 	bl	8000220 <memchr>
 800803e:	2800      	cmp	r0, #0
 8008040:	d03f      	beq.n	80080c2 <_vfiprintf_r+0x20a>
 8008042:	4b26      	ldr	r3, [pc, #152]	@ (80080dc <_vfiprintf_r+0x224>)
 8008044:	bb1b      	cbnz	r3, 800808e <_vfiprintf_r+0x1d6>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	3307      	adds	r3, #7
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	3308      	adds	r3, #8
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008054:	443b      	add	r3, r7
 8008056:	9309      	str	r3, [sp, #36]	@ 0x24
 8008058:	e76a      	b.n	8007f30 <_vfiprintf_r+0x78>
 800805a:	fb0c 3202 	mla	r2, ip, r2, r3
 800805e:	460c      	mov	r4, r1
 8008060:	2001      	movs	r0, #1
 8008062:	e7a8      	b.n	8007fb6 <_vfiprintf_r+0xfe>
 8008064:	2300      	movs	r3, #0
 8008066:	3401      	adds	r4, #1
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	4619      	mov	r1, r3
 800806c:	f04f 0c0a 	mov.w	ip, #10
 8008070:	4620      	mov	r0, r4
 8008072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008076:	3a30      	subs	r2, #48	@ 0x30
 8008078:	2a09      	cmp	r2, #9
 800807a:	d903      	bls.n	8008084 <_vfiprintf_r+0x1cc>
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0c6      	beq.n	800800e <_vfiprintf_r+0x156>
 8008080:	9105      	str	r1, [sp, #20]
 8008082:	e7c4      	b.n	800800e <_vfiprintf_r+0x156>
 8008084:	fb0c 2101 	mla	r1, ip, r1, r2
 8008088:	4604      	mov	r4, r0
 800808a:	2301      	movs	r3, #1
 800808c:	e7f0      	b.n	8008070 <_vfiprintf_r+0x1b8>
 800808e:	ab03      	add	r3, sp, #12
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	462a      	mov	r2, r5
 8008094:	4b12      	ldr	r3, [pc, #72]	@ (80080e0 <_vfiprintf_r+0x228>)
 8008096:	a904      	add	r1, sp, #16
 8008098:	4630      	mov	r0, r6
 800809a:	f7fd fbdb 	bl	8005854 <_printf_float>
 800809e:	4607      	mov	r7, r0
 80080a0:	1c78      	adds	r0, r7, #1
 80080a2:	d1d6      	bne.n	8008052 <_vfiprintf_r+0x19a>
 80080a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080a6:	07d9      	lsls	r1, r3, #31
 80080a8:	d405      	bmi.n	80080b6 <_vfiprintf_r+0x1fe>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	059a      	lsls	r2, r3, #22
 80080ae:	d402      	bmi.n	80080b6 <_vfiprintf_r+0x1fe>
 80080b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b2:	f7fe f92b 	bl	800630c <__retarget_lock_release_recursive>
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	065b      	lsls	r3, r3, #25
 80080ba:	f53f af1f 	bmi.w	8007efc <_vfiprintf_r+0x44>
 80080be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080c0:	e71e      	b.n	8007f00 <_vfiprintf_r+0x48>
 80080c2:	ab03      	add	r3, sp, #12
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	462a      	mov	r2, r5
 80080c8:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <_vfiprintf_r+0x228>)
 80080ca:	a904      	add	r1, sp, #16
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7fd fe59 	bl	8005d84 <_printf_i>
 80080d2:	e7e4      	b.n	800809e <_vfiprintf_r+0x1e6>
 80080d4:	080086c0 	.word	0x080086c0
 80080d8:	080086ca 	.word	0x080086ca
 80080dc:	08005855 	.word	0x08005855
 80080e0:	08007e95 	.word	0x08007e95
 80080e4:	080086c6 	.word	0x080086c6

080080e8 <__swbuf_r>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	460e      	mov	r6, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	4605      	mov	r5, r0
 80080f0:	b118      	cbz	r0, 80080fa <__swbuf_r+0x12>
 80080f2:	6a03      	ldr	r3, [r0, #32]
 80080f4:	b90b      	cbnz	r3, 80080fa <__swbuf_r+0x12>
 80080f6:	f7fd fff1 	bl	80060dc <__sinit>
 80080fa:	69a3      	ldr	r3, [r4, #24]
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	071a      	lsls	r2, r3, #28
 8008102:	d501      	bpl.n	8008108 <__swbuf_r+0x20>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	b943      	cbnz	r3, 800811a <__swbuf_r+0x32>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f82a 	bl	8008164 <__swsetup_r>
 8008110:	b118      	cbz	r0, 800811a <__swbuf_r+0x32>
 8008112:	f04f 37ff 	mov.w	r7, #4294967295
 8008116:	4638      	mov	r0, r7
 8008118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	6922      	ldr	r2, [r4, #16]
 800811e:	1a98      	subs	r0, r3, r2
 8008120:	6963      	ldr	r3, [r4, #20]
 8008122:	b2f6      	uxtb	r6, r6
 8008124:	4283      	cmp	r3, r0
 8008126:	4637      	mov	r7, r6
 8008128:	dc05      	bgt.n	8008136 <__swbuf_r+0x4e>
 800812a:	4621      	mov	r1, r4
 800812c:	4628      	mov	r0, r5
 800812e:	f7ff fd99 	bl	8007c64 <_fflush_r>
 8008132:	2800      	cmp	r0, #0
 8008134:	d1ed      	bne.n	8008112 <__swbuf_r+0x2a>
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	3b01      	subs	r3, #1
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	701e      	strb	r6, [r3, #0]
 8008144:	6962      	ldr	r2, [r4, #20]
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	429a      	cmp	r2, r3
 800814a:	d004      	beq.n	8008156 <__swbuf_r+0x6e>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	07db      	lsls	r3, r3, #31
 8008150:	d5e1      	bpl.n	8008116 <__swbuf_r+0x2e>
 8008152:	2e0a      	cmp	r6, #10
 8008154:	d1df      	bne.n	8008116 <__swbuf_r+0x2e>
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f7ff fd83 	bl	8007c64 <_fflush_r>
 800815e:	2800      	cmp	r0, #0
 8008160:	d0d9      	beq.n	8008116 <__swbuf_r+0x2e>
 8008162:	e7d6      	b.n	8008112 <__swbuf_r+0x2a>

08008164 <__swsetup_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4b29      	ldr	r3, [pc, #164]	@ (800820c <__swsetup_r+0xa8>)
 8008168:	4605      	mov	r5, r0
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	460c      	mov	r4, r1
 800816e:	b118      	cbz	r0, 8008178 <__swsetup_r+0x14>
 8008170:	6a03      	ldr	r3, [r0, #32]
 8008172:	b90b      	cbnz	r3, 8008178 <__swsetup_r+0x14>
 8008174:	f7fd ffb2 	bl	80060dc <__sinit>
 8008178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800817c:	0719      	lsls	r1, r3, #28
 800817e:	d422      	bmi.n	80081c6 <__swsetup_r+0x62>
 8008180:	06da      	lsls	r2, r3, #27
 8008182:	d407      	bmi.n	8008194 <__swsetup_r+0x30>
 8008184:	2209      	movs	r2, #9
 8008186:	602a      	str	r2, [r5, #0]
 8008188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	f04f 30ff 	mov.w	r0, #4294967295
 8008192:	e033      	b.n	80081fc <__swsetup_r+0x98>
 8008194:	0758      	lsls	r0, r3, #29
 8008196:	d512      	bpl.n	80081be <__swsetup_r+0x5a>
 8008198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800819a:	b141      	cbz	r1, 80081ae <__swsetup_r+0x4a>
 800819c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d002      	beq.n	80081aa <__swsetup_r+0x46>
 80081a4:	4628      	mov	r0, r5
 80081a6:	f7fe feff 	bl	8006fa8 <_free_r>
 80081aa:	2300      	movs	r3, #0
 80081ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	2300      	movs	r3, #0
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f043 0308 	orr.w	r3, r3, #8
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	b94b      	cbnz	r3, 80081de <__swsetup_r+0x7a>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d4:	d003      	beq.n	80081de <__swsetup_r+0x7a>
 80081d6:	4621      	mov	r1, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 f883 	bl	80082e4 <__smakebuf_r>
 80081de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e2:	f013 0201 	ands.w	r2, r3, #1
 80081e6:	d00a      	beq.n	80081fe <__swsetup_r+0x9a>
 80081e8:	2200      	movs	r2, #0
 80081ea:	60a2      	str	r2, [r4, #8]
 80081ec:	6962      	ldr	r2, [r4, #20]
 80081ee:	4252      	negs	r2, r2
 80081f0:	61a2      	str	r2, [r4, #24]
 80081f2:	6922      	ldr	r2, [r4, #16]
 80081f4:	b942      	cbnz	r2, 8008208 <__swsetup_r+0xa4>
 80081f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081fa:	d1c5      	bne.n	8008188 <__swsetup_r+0x24>
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	0799      	lsls	r1, r3, #30
 8008200:	bf58      	it	pl
 8008202:	6962      	ldrpl	r2, [r4, #20]
 8008204:	60a2      	str	r2, [r4, #8]
 8008206:	e7f4      	b.n	80081f2 <__swsetup_r+0x8e>
 8008208:	2000      	movs	r0, #0
 800820a:	e7f7      	b.n	80081fc <__swsetup_r+0x98>
 800820c:	20000018 	.word	0x20000018

08008210 <_raise_r>:
 8008210:	291f      	cmp	r1, #31
 8008212:	b538      	push	{r3, r4, r5, lr}
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	d904      	bls.n	8008224 <_raise_r+0x14>
 800821a:	2316      	movs	r3, #22
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	f04f 30ff 	mov.w	r0, #4294967295
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008226:	b112      	cbz	r2, 800822e <_raise_r+0x1e>
 8008228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800822c:	b94b      	cbnz	r3, 8008242 <_raise_r+0x32>
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f830 	bl	8008294 <_getpid_r>
 8008234:	4622      	mov	r2, r4
 8008236:	4601      	mov	r1, r0
 8008238:	4628      	mov	r0, r5
 800823a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800823e:	f000 b817 	b.w	8008270 <_kill_r>
 8008242:	2b01      	cmp	r3, #1
 8008244:	d00a      	beq.n	800825c <_raise_r+0x4c>
 8008246:	1c59      	adds	r1, r3, #1
 8008248:	d103      	bne.n	8008252 <_raise_r+0x42>
 800824a:	2316      	movs	r3, #22
 800824c:	6003      	str	r3, [r0, #0]
 800824e:	2001      	movs	r0, #1
 8008250:	e7e7      	b.n	8008222 <_raise_r+0x12>
 8008252:	2100      	movs	r1, #0
 8008254:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008258:	4620      	mov	r0, r4
 800825a:	4798      	blx	r3
 800825c:	2000      	movs	r0, #0
 800825e:	e7e0      	b.n	8008222 <_raise_r+0x12>

08008260 <raise>:
 8008260:	4b02      	ldr	r3, [pc, #8]	@ (800826c <raise+0xc>)
 8008262:	4601      	mov	r1, r0
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	f7ff bfd3 	b.w	8008210 <_raise_r>
 800826a:	bf00      	nop
 800826c:	20000018 	.word	0x20000018

08008270 <_kill_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	@ (8008290 <_kill_r+0x20>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	f7fa f854 	bl	800232a <_kill>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d102      	bne.n	800828c <_kill_r+0x1c>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b103      	cbz	r3, 800828c <_kill_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	200005c4 	.word	0x200005c4

08008294 <_getpid_r>:
 8008294:	f7fa b841 	b.w	800231a <_getpid>

08008298 <__swhatbuf_r>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2900      	cmp	r1, #0
 80082a2:	b096      	sub	sp, #88	@ 0x58
 80082a4:	4615      	mov	r5, r2
 80082a6:	461e      	mov	r6, r3
 80082a8:	da0d      	bge.n	80082c6 <__swhatbuf_r+0x2e>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	bf14      	ite	ne
 80082b6:	2340      	movne	r3, #64	@ 0x40
 80082b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082bc:	2000      	movs	r0, #0
 80082be:	6031      	str	r1, [r6, #0]
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	b016      	add	sp, #88	@ 0x58
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	466a      	mov	r2, sp
 80082c8:	f000 f848 	bl	800835c <_fstat_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	dbec      	blt.n	80082aa <__swhatbuf_r+0x12>
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082da:	4259      	negs	r1, r3
 80082dc:	4159      	adcs	r1, r3
 80082de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082e2:	e7eb      	b.n	80082bc <__swhatbuf_r+0x24>

080082e4 <__smakebuf_r>:
 80082e4:	898b      	ldrh	r3, [r1, #12]
 80082e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e8:	079d      	lsls	r5, r3, #30
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	d507      	bpl.n	8008300 <__smakebuf_r+0x1c>
 80082f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	2301      	movs	r3, #1
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	b003      	add	sp, #12
 80082fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008300:	ab01      	add	r3, sp, #4
 8008302:	466a      	mov	r2, sp
 8008304:	f7ff ffc8 	bl	8008298 <__swhatbuf_r>
 8008308:	9f00      	ldr	r7, [sp, #0]
 800830a:	4605      	mov	r5, r0
 800830c:	4639      	mov	r1, r7
 800830e:	4630      	mov	r0, r6
 8008310:	f7fe febe 	bl	8007090 <_malloc_r>
 8008314:	b948      	cbnz	r0, 800832a <__smakebuf_r+0x46>
 8008316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831a:	059a      	lsls	r2, r3, #22
 800831c:	d4ee      	bmi.n	80082fc <__smakebuf_r+0x18>
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	e7e2      	b.n	80082f0 <__smakebuf_r+0xc>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	6020      	str	r0, [r4, #0]
 800832e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800833a:	b15b      	cbz	r3, 8008354 <__smakebuf_r+0x70>
 800833c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f81d 	bl	8008380 <_isatty_r>
 8008346:	b128      	cbz	r0, 8008354 <__smakebuf_r+0x70>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	431d      	orrs	r5, r3
 8008358:	81a5      	strh	r5, [r4, #12]
 800835a:	e7cf      	b.n	80082fc <__smakebuf_r+0x18>

0800835c <_fstat_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	@ (800837c <_fstat_r+0x20>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	f7fa f83e 	bl	80023ea <_fstat>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d102      	bne.n	8008378 <_fstat_r+0x1c>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b103      	cbz	r3, 8008378 <_fstat_r+0x1c>
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	bf00      	nop
 800837c:	200005c4 	.word	0x200005c4

08008380 <_isatty_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	@ (800839c <_isatty_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7fa f83d 	bl	800240a <_isatty>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_isatty_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_isatty_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200005c4 	.word	0x200005c4

080083a0 <_init>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr

080083ac <_fini>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr
